
modbusMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b34  08009740  08009740  0000a740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a274  0800a274  0000c064  2**0
                  CONTENTS
  4 .ARM          00000008  0800a274  0800a274  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a27c  0800a27c  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a27c  0800a27c  0000b27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a280  0800a280  0000b280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800a284  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c064  2**0
                  CONTENTS
 10 .bss          00002728  20000064  20000064  0000c064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000278c  2000278c  0000c064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d152  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047bc  00000000  00000000  000291e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  0002d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012bb  00000000  00000000  0002f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235e1  00000000  00000000  00030493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021414  00000000  00000000  00053a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6e3c  00000000  00000000  00074e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012bcc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c38  00000000  00000000  0012bd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00132940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009728 	.word	0x08009728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08009728 	.word	0x08009728

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	@ (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	@ (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	@ 0x80
 800029c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	200004bc 	.word	0x200004bc
 80002b0:	2000055c 	.word	0x2000055c

080002b4 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b096      	sub	sp, #88	@ 0x58
 80002b8:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of lcdTask */
	osThreadDef(lcdTask, lcdHandlerTask, osPriorityNormal, 0, 400);
 80002ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000330 <MX_FREERTOS_Init+0x7c>)
 80002bc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80002c0:	461d      	mov	r5, r3
 80002c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 80002ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f006 fdce 	bl	8006e76 <osThreadCreate>
 80002da:	4603      	mov	r3, r0
 80002dc:	4a15      	ldr	r2, [pc, #84]	@ (8000334 <MX_FREERTOS_Init+0x80>)
 80002de:	6013      	str	r3, [r2, #0]

	/* definition and creation of modbusTask */
	osThreadDef(modbusTask, ModbusSlaveTask, osPriorityHigh, 0, 512);
 80002e0:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <MX_FREERTOS_Init+0x84>)
 80002e2:	f107 0420 	add.w	r4, r7, #32
 80002e6:	461d      	mov	r5, r3
 80002e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	modbusTaskHandle = osThreadCreate(osThread(modbusTask), NULL);
 80002f4:	f107 0320 	add.w	r3, r7, #32
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f006 fdbb 	bl	8006e76 <osThreadCreate>
 8000300:	4603      	mov	r3, r0
 8000302:	4a0e      	ldr	r2, [pc, #56]	@ (800033c <MX_FREERTOS_Init+0x88>)
 8000304:	6013      	str	r3, [r2, #0]

	/* definition and creation of console */
	osThreadDef(console, consoleTask, osPriorityIdle, 0, 256);
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_FREERTOS_Init+0x8c>)
 8000308:	1d3c      	adds	r4, r7, #4
 800030a:	461d      	mov	r5, r3
 800030c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	consoleHandle = osThreadCreate(osThread(console), NULL);
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f006 fdaa 	bl	8006e76 <osThreadCreate>
 8000322:	4603      	mov	r3, r0
 8000324:	4a07      	ldr	r2, [pc, #28]	@ (8000344 <MX_FREERTOS_Init+0x90>)
 8000326:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8000328:	bf00      	nop
 800032a:	3758      	adds	r7, #88	@ 0x58
 800032c:	46bd      	mov	sp, r7
 800032e:	bdb0      	pop	{r4, r5, r7, pc}
 8000330:	08009748 	.word	0x08009748
 8000334:	200004b0 	.word	0x200004b0
 8000338:	08009770 	.word	0x08009770
 800033c:	200004b4 	.word	0x200004b4
 8000340:	08009794 	.word	0x08009794
 8000344:	200004b8 	.word	0x200004b8

08000348 <lcdHandlerTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_lcdHandlerTask */
void lcdHandlerTask(void const * argument)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b091      	sub	sp, #68	@ 0x44
 800034c:	af02      	add	r7, sp, #8
 800034e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN lcdHandlerTask */
	char textBuffer[32];
	rtcTime time;
	time.SubSeconds = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	823b      	strh	r3, [r7, #16]

	ssd1306_Init();
 8000354:	f001 fc6c 	bl	8001c30 <ssd1306_Init>
	ssd1306_Fill(Black);
 8000358:	2000      	movs	r0, #0
 800035a:	f001 fcd3 	bl	8001d04 <ssd1306_Fill>
	ssd1306_DrawRectangle(0,0,127,63,1);
 800035e:	2301      	movs	r3, #1
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	233f      	movs	r3, #63	@ 0x3f
 8000364:	227f      	movs	r2, #127	@ 0x7f
 8000366:	2100      	movs	r1, #0
 8000368:	2000      	movs	r0, #0
 800036a:	f001 fe99 	bl	80020a0 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 800036e:	f001 fce1 	bl	8001d34 <ssd1306_UpdateScreen>

	// Read the date
	DS1307_GetDate(&time.day, &time.date, &time.month, &time.year);
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	f103 0408 	add.w	r4, r3, #8
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	1dda      	adds	r2, r3, #7
 8000380:	f107 030c 	add.w	r3, r7, #12
 8000384:	1d99      	adds	r1, r3, #6
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	f103 0009 	add.w	r0, r3, #9
 800038e:	4623      	mov	r3, r4
 8000390:	f000 ffba 	bl	8001308 <DS1307_GetDate>
	//read time
	DS1307_GetTime(&time.hours, &time.minutes, &time.seconds);
 8000394:	f107 030c 	add.w	r3, r7, #12
 8000398:	1c9a      	adds	r2, r3, #2
 800039a:	f107 030c 	add.w	r3, r7, #12
 800039e:	1c59      	adds	r1, r3, #1
 80003a0:	f107 030c 	add.w	r3, r7, #12
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 ff6f 	bl	8001288 <DS1307_GetTime>

	setRTC(&time);
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fe36 	bl	8001020 <setRTC>

	/* Infinite loop */
	for(;;)
	{
		readRTC(&time);
 80003b4:	f107 030c 	add.w	r3, r7, #12
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fe7d 	bl	80010b8 <readRTC>


		ssd1306_SetCursor(16, 6);
 80003be:	2106      	movs	r1, #6
 80003c0:	2010      	movs	r0, #16
 80003c2:	f001 fde9 	bl	8001f98 <ssd1306_SetCursor>
		sprintf(textBuffer, "Time %.2d:%.2d:%.2d.%.3d", time.hours,
 80003c6:	7b3b      	ldrb	r3, [r7, #12]
 80003c8:	4619      	mov	r1, r3
				time.minutes, time.seconds, time.SubSeconds);
 80003ca:	7b7b      	ldrb	r3, [r7, #13]
		sprintf(textBuffer, "Time %.2d:%.2d:%.2d.%.3d", time.hours,
 80003cc:	461c      	mov	r4, r3
				time.minutes, time.seconds, time.SubSeconds);
 80003ce:	7bbb      	ldrb	r3, [r7, #14]
 80003d0:	8a3a      	ldrh	r2, [r7, #16]
		sprintf(textBuffer, "Time %.2d:%.2d:%.2d.%.3d", time.hours,
 80003d2:	f107 0018 	add.w	r0, r7, #24
 80003d6:	9201      	str	r2, [sp, #4]
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	4623      	mov	r3, r4
 80003dc:	460a      	mov	r2, r1
 80003de:	4929      	ldr	r1, [pc, #164]	@ (8000484 <lcdHandlerTask+0x13c>)
 80003e0:	f008 f868 	bl	80084b4 <siprintf>
		ssd1306_WriteString(textBuffer, Font_6x8, White);
 80003e4:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <lcdHandlerTask+0x140>)
 80003e6:	f107 0018 	add.w	r0, r7, #24
 80003ea:	2201      	movs	r2, #1
 80003ec:	9200      	str	r2, [sp, #0]
 80003ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003f0:	f001 fdac 	bl	8001f4c <ssd1306_WriteString>

		ssd1306_SetCursor(10, 26);
 80003f4:	211a      	movs	r1, #26
 80003f6:	200a      	movs	r0, #10
 80003f8:	f001 fdce 	bl	8001f98 <ssd1306_SetCursor>
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[0].hours,
 80003fc:	4b23      	ldr	r3, [pc, #140]	@ (800048c <lcdHandlerTask+0x144>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
				eventTime[0].minutes, eventTime[0].seconds,
 8000402:	4b22      	ldr	r3, [pc, #136]	@ (800048c <lcdHandlerTask+0x144>)
 8000404:	785b      	ldrb	r3, [r3, #1]
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[0].hours,
 8000406:	461c      	mov	r4, r3
				eventTime[0].minutes, eventTime[0].seconds,
 8000408:	4b20      	ldr	r3, [pc, #128]	@ (800048c <lcdHandlerTask+0x144>)
 800040a:	789b      	ldrb	r3, [r3, #2]
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[0].hours,
 800040c:	461a      	mov	r2, r3
				eventTime[0].SubSeconds);
 800040e:	4b1f      	ldr	r3, [pc, #124]	@ (800048c <lcdHandlerTask+0x144>)
 8000410:	889b      	ldrh	r3, [r3, #4]
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[0].hours,
 8000412:	f107 0018 	add.w	r0, r7, #24
 8000416:	9301      	str	r3, [sp, #4]
 8000418:	9200      	str	r2, [sp, #0]
 800041a:	4623      	mov	r3, r4
 800041c:	460a      	mov	r2, r1
 800041e:	491c      	ldr	r1, [pc, #112]	@ (8000490 <lcdHandlerTask+0x148>)
 8000420:	f008 f848 	bl	80084b4 <siprintf>
		ssd1306_WriteString(textBuffer, Font_6x8, White);
 8000424:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <lcdHandlerTask+0x140>)
 8000426:	f107 0018 	add.w	r0, r7, #24
 800042a:	2201      	movs	r2, #1
 800042c:	9200      	str	r2, [sp, #0]
 800042e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000430:	f001 fd8c 	bl	8001f4c <ssd1306_WriteString>


		ssd1306_SetCursor(10, 46);
 8000434:	212e      	movs	r1, #46	@ 0x2e
 8000436:	200a      	movs	r0, #10
 8000438:	f001 fdae 	bl	8001f98 <ssd1306_SetCursor>
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[1].hours,
 800043c:	4b13      	ldr	r3, [pc, #76]	@ (800048c <lcdHandlerTask+0x144>)
 800043e:	7a9b      	ldrb	r3, [r3, #10]
 8000440:	4619      	mov	r1, r3
				eventTime[1].minutes, eventTime[1].seconds,
 8000442:	4b12      	ldr	r3, [pc, #72]	@ (800048c <lcdHandlerTask+0x144>)
 8000444:	7adb      	ldrb	r3, [r3, #11]
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[1].hours,
 8000446:	461c      	mov	r4, r3
				eventTime[1].minutes, eventTime[1].seconds,
 8000448:	4b10      	ldr	r3, [pc, #64]	@ (800048c <lcdHandlerTask+0x144>)
 800044a:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[1].hours,
 800044c:	461a      	mov	r2, r3
				eventTime[1].SubSeconds);
 800044e:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <lcdHandlerTask+0x144>)
 8000450:	89db      	ldrh	r3, [r3, #14]
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[1].hours,
 8000452:	f107 0018 	add.w	r0, r7, #24
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	9200      	str	r2, [sp, #0]
 800045a:	4623      	mov	r3, r4
 800045c:	460a      	mov	r2, r1
 800045e:	490c      	ldr	r1, [pc, #48]	@ (8000490 <lcdHandlerTask+0x148>)
 8000460:	f008 f828 	bl	80084b4 <siprintf>
		ssd1306_WriteString(textBuffer, Font_6x8, White);
 8000464:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <lcdHandlerTask+0x140>)
 8000466:	f107 0018 	add.w	r0, r7, #24
 800046a:	2201      	movs	r2, #1
 800046c:	9200      	str	r2, [sp, #0]
 800046e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000470:	f001 fd6c 	bl	8001f4c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000474:	f001 fc5e 	bl	8001d34 <ssd1306_UpdateScreen>

		osDelay(50);
 8000478:	2032      	movs	r0, #50	@ 0x32
 800047a:	f006 fd48 	bl	8006f0e <osDelay>
		readRTC(&time);
 800047e:	bf00      	nop
 8000480:	e798      	b.n	80003b4 <lcdHandlerTask+0x6c>
 8000482:	bf00      	nop
 8000484:	080097b0 	.word	0x080097b0
 8000488:	0800a0f8 	.word	0x0800a0f8
 800048c:	20000080 	.word	0x20000080
 8000490:	080097cc 	.word	0x080097cc

08000494 <myPrintf>:
 * @brief  Function to print debug messages to UART2.
 * @param  format: Format string (similar to printf).
 * @retval None
 */
void myPrintf(uint8_t debugLevel, const char *format, ...)
{
 8000494:	b40e      	push	{r1, r2, r3}
 8000496:	b580      	push	{r7, lr}
 8000498:	b0a7      	sub	sp, #156	@ 0x9c
 800049a:	af00      	add	r7, sp, #0
 800049c:	4603      	mov	r3, r0
 800049e:	71fb      	strb	r3, [r7, #7]
	if (debugLevel <= DEBUG_LEVEL)
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	2b03      	cmp	r3, #3
 80004a4:	d836      	bhi.n	8000514 <myPrintf+0x80>
	{
		char buffer[128];
		va_list args;
		va_start(args, format);
 80004a6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80004aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		vsnprintf(buffer, sizeof(buffer), format, args);
 80004ae:	f107 000c 	add.w	r0, r7, #12
 80004b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80004b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80004ba:	2180      	movs	r1, #128	@ 0x80
 80004bc:	f008 f872 	bl	80085a4 <vsniprintf>
		va_end(args);

		// Ensure the buffer does not overflow
		size_t length = strlen(buffer);
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe83 	bl	80001d0 <strlen>
 80004ca:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		size_t index = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		while (length)
 80004d4:	e01a      	b.n	800050c <myPrintf+0x78>
		{
			uart2Stream.txBuffer[uart2Stream.txFillIndex++] = buffer[index++];
 80004d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80004e0:	4a10      	ldr	r2, [pc, #64]	@ (8000524 <myPrintf+0x90>)
 80004e2:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80004e6:	1c51      	adds	r1, r2, #1
 80004e8:	b2c8      	uxtb	r0, r1
 80004ea:	490e      	ldr	r1, [pc, #56]	@ (8000524 <myPrintf+0x90>)
 80004ec:	f881 0202 	strb.w	r0, [r1, #514]	@ 0x202
 80004f0:	4611      	mov	r1, r2
 80004f2:	3398      	adds	r3, #152	@ 0x98
 80004f4:	443b      	add	r3, r7
 80004f6:	f813 2c8c 	ldrb.w	r2, [r3, #-140]
 80004fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000524 <myPrintf+0x90>)
 80004fc:	440b      	add	r3, r1
 80004fe:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
			if (uart2Stream.txFillIndex >= RX_BUFFER_SIZE)
			{
				uart2Stream.txFillIndex = 0;  // Reset index on overflow
			}
			length--;
 8000502:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000506:	3b01      	subs	r3, #1
 8000508:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		while (length)
 800050c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1e0      	bne.n	80004d6 <myPrintf+0x42>
		}
	}
}
 8000514:	bf00      	nop
 8000516:	379c      	adds	r7, #156	@ 0x9c
 8000518:	46bd      	mov	sp, r7
 800051a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800051e:	b003      	add	sp, #12
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200002a4 	.word	0x200002a4

08000528 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3)
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	2b08      	cmp	r3, #8
 8000536:	d10c      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		// Button pressed
		uint8_t buttonStatus = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000538:	2108      	movs	r1, #8
 800053a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053e:	f002 f96b 	bl	8002818 <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]

		if(buttonStatus == 1) //button pressed
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d102      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x2a>
			WriteTimePending = 1;
 800054c:	4b03      	ldr	r3, [pc, #12]	@ (800055c <HAL_GPIO_EXTI_Callback+0x34>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
	}
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_UART_RxCpltCallback>:



/// Interrupt callback when a byte is received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uartStream *stream = NULL;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]

	if (huart->Instance == USART1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <HAL_UART_RxCpltCallback+0x70>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d102      	bne.n	800057c <HAL_UART_RxCpltCallback+0x1c>
	{
		stream = &uart1Stream;
 8000576:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <HAL_UART_RxCpltCallback+0x74>)
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	e006      	b.n	800058a <HAL_UART_RxCpltCallback+0x2a>
	}
	else if (huart->Instance == USART2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a15      	ldr	r2, [pc, #84]	@ (80005d8 <HAL_UART_RxCpltCallback+0x78>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d101      	bne.n	800058a <HAL_UART_RxCpltCallback+0x2a>
	{
		stream = &uart2Stream;
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <HAL_UART_RxCpltCallback+0x7c>)
 8000588:	60fb      	str	r3, [r7, #12]
	}

	if (stream != NULL)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d01b      	beq.n	80005c8 <HAL_UART_RxCpltCallback+0x68>
	{
		// Store received byte in the buffer directly from UART
		stream->rxBuffer[stream->rxFillIndex++] = stream->rxByte;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	b2d1      	uxtb	r1, r2
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	f882 1201 	strb.w	r1, [r2, #513]	@ 0x201
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	5499      	strb	r1, [r3, r2]

		stream->lastByteTimestamp = xTaskGetTickCount();
 80005ac:	f007 f86a 	bl	8007684 <xTaskGetTickCount>
 80005b0:	4602      	mov	r2, r0
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (stream->rxFillIndex >= RX_BUFFER_SIZE)
		{
			stream->rxFillIndex = 0;  // Reset index on overflow
		}
		// Restart UART reception for the next byte
		HAL_UART_Receive_IT(huart, &stream->rxByte, 1);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80005be:	2201      	movs	r2, #1
 80005c0:	4619      	mov	r1, r3
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f005 fae3 	bl	8005b8e <HAL_UART_Receive_IT>
	}
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40013800 	.word	0x40013800
 80005d4:	20000098 	.word	0x20000098
 80005d8:	40004400 	.word	0x40004400
 80005dc:	200002a4 	.word	0x200002a4

080005e0 <isModbusFrameReady>:


// Function to detect if a Modbus frame is ready for UART1
uint8_t isModbusFrameReady(uint8_t slaveID)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	uint8_t frameReady = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	75fb      	strb	r3, [r7, #23]
	uartStream *stream = &uart1Stream;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <isModbusFrameReady+0x48>)
 80005f0:	613b      	str	r3, [r7, #16]

	// Calculate elapsed time since last byte received
	uint32_t elapsedTime = xTaskGetTickCount() - stream->lastByteTimestamp;
 80005f2:	f007 f847 	bl	8007684 <xTaskGetTickCount>
 80005f6:	4602      	mov	r2, r0
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	60fb      	str	r3, [r7, #12]

	// Check if 3.5 character times have passed (frame is ready)
	if (elapsedTime >= MODBUS_RTU_SILENCE_TIME)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d909      	bls.n	800061c <isModbusFrameReady+0x3c>
	{
		if((stream->rxFillIndex != stream->rxReadIndex))
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	f893 2201 	ldrb.w	r2, [r3, #513]	@ 0x201
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000614:	429a      	cmp	r2, r3
 8000616:	d001      	beq.n	800061c <isModbusFrameReady+0x3c>
		{
			frameReady = 1;  // Frame is ready for processing
 8000618:	2301      	movs	r3, #1
 800061a:	75fb      	strb	r3, [r7, #23]
		}
	}
	return frameReady;
 800061c:	7dfb      	ldrb	r3, [r7, #23]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000098 	.word	0x20000098

0800062c <RS485_Transmit>:



void RS485_Transmit(uint8_t *data, uint16_t dataLen)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	807b      	strh	r3, [r7, #2]
	// Set DE high and RE low (transmit mode)
	HAL_GPIO_WritePin(max485_DE_GPIO_Port, max485_DE_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800063e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000642:	f002 f901 	bl	8002848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(max485_RE_GPIO_Port, max485_RE_Pin, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2101      	movs	r1, #1
 800064a:	4810      	ldr	r0, [pc, #64]	@ (800068c <RS485_Transmit+0x60>)
 800064c:	f002 f8fc 	bl	8002848 <HAL_GPIO_WritePin>

	printInfo("sendLen=%d\n",dataLen);
 8000650:	887b      	ldrh	r3, [r7, #2]
 8000652:	461a      	mov	r2, r3
 8000654:	490e      	ldr	r1, [pc, #56]	@ (8000690 <RS485_Transmit+0x64>)
 8000656:	2003      	movs	r0, #3
 8000658:	f7ff ff1c 	bl	8000494 <myPrintf>

	HAL_UART_Transmit(&huart1, data, dataLen, osWaitForever);
 800065c:	887a      	ldrh	r2, [r7, #2]
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	480b      	ldr	r0, [pc, #44]	@ (8000694 <RS485_Transmit+0x68>)
 8000666:	f005 fa09 	bl	8005a7c <HAL_UART_Transmit>

	// Set DE and RE low (receive mode) after transmission is complete
	HAL_GPIO_WritePin(max485_DE_GPIO_Port, max485_DE_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000674:	f002 f8e8 	bl	8002848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(max485_RE_GPIO_Port, max485_RE_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2101      	movs	r1, #1
 800067c:	4803      	ldr	r0, [pc, #12]	@ (800068c <RS485_Transmit+0x60>)
 800067e:	f002 f8e3 	bl	8002848 <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	48000400 	.word	0x48000400
 8000690:	080097e8 	.word	0x080097e8
 8000694:	20000824 	.word	0x20000824

08000698 <scanMaster>:



void scanMaster(uint8_t slaveID)
{
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	b08f      	sub	sp, #60	@ 0x3c
 800069c:	af06      	add	r7, sp, #24
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	//	printInfo("Polling from slave = %d", slaveID);
	// send request frame to slave for button status
	requestDiscreteInputs(slaveID, DI_buttonStatus, 1); // request for button status
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2201      	movs	r2, #1
 80006a6:	f242 7111 	movw	r1, #10001	@ 0x2711
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fa59 	bl	8001b62 <requestDiscreteInputs>

	uint8_t values[8];
	uint16_t countOrAddress;
	uint32_t requestTime = HAL_GetTick();
 80006b0:	f001 fdb2 	bl	8002218 <HAL_GetTick>
 80006b4:	61f8      	str	r0, [r7, #28]

	while (HAL_GetTick() - requestTime < 200) {
 80006b6:	e0f0      	b.n	800089a <scanMaster+0x202>
		// Wait for 200 ms
		if (isModbusFrameReady(slaveID))   // waiting for response
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff90 	bl	80005e0 <isModbusFrameReady>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 80e6 	beq.w	8000894 <scanMaster+0x1fc>
		{
			uint8_t modlen = getModMasterFrameLen(
					uart1Stream.rxBuffer + uart1Stream.rxReadIndex);
 80006c8:	4b7a      	ldr	r3, [pc, #488]	@ (80008b4 <scanMaster+0x21c>)
 80006ca:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80006ce:	461a      	mov	r2, r3
			uint8_t modlen = getModMasterFrameLen(
 80006d0:	4b78      	ldr	r3, [pc, #480]	@ (80008b4 <scanMaster+0x21c>)
 80006d2:	4413      	add	r3, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 f89f 	bl	8001818 <getModMasterFrameLen>
 80006da:	4603      	mov	r3, r0
 80006dc:	76fb      	strb	r3, [r7, #27]

			printDebug("Data received from slave = %d", slaveID);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4975      	ldr	r1, [pc, #468]	@ (80008b8 <scanMaster+0x220>)
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff fed5 	bl	8000494 <myPrintf>
			printDebug("response received=%d, modlen = %d\n",
 80006ea:	4b72      	ldr	r3, [pc, #456]	@ (80008b4 <scanMaster+0x21c>)
 80006ec:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b70      	ldr	r3, [pc, #448]	@ (80008b4 <scanMaster+0x21c>)
 80006f4:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80006f8:	1ad2      	subs	r2, r2, r3
 80006fa:	7efb      	ldrb	r3, [r7, #27]
 80006fc:	496f      	ldr	r1, [pc, #444]	@ (80008bc <scanMaster+0x224>)
 80006fe:	2004      	movs	r0, #4
 8000700:	f7ff fec8 	bl	8000494 <myPrintf>
					uart1Stream.rxFillIndex - uart1Stream.rxReadIndex, modlen);

			if (modlen <= (uart1Stream.rxFillIndex - uart1Stream.rxReadIndex)) {
 8000704:	7efa      	ldrb	r2, [r7, #27]
 8000706:	4b6b      	ldr	r3, [pc, #428]	@ (80008b4 <scanMaster+0x21c>)
 8000708:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800070c:	4619      	mov	r1, r3
 800070e:	4b69      	ldr	r3, [pc, #420]	@ (80008b4 <scanMaster+0x21c>)
 8000710:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000714:	1acb      	subs	r3, r1, r3
 8000716:	429a      	cmp	r2, r3
 8000718:	f300 80ab 	bgt.w	8000872 <scanMaster+0x1da>
				if (modbusProcessResponse(
						uart1Stream.rxBuffer + uart1Stream.rxReadIndex, modlen,
 800071c:	4b65      	ldr	r3, [pc, #404]	@ (80008b4 <scanMaster+0x21c>)
 800071e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000722:	461a      	mov	r2, r3
				if (modbusProcessResponse(
 8000724:	4b63      	ldr	r3, [pc, #396]	@ (80008b4 <scanMaster+0x21c>)
 8000726:	18d0      	adds	r0, r2, r3
 8000728:	7efb      	ldrb	r3, [r7, #27]
 800072a:	b299      	uxth	r1, r3
 800072c:	f107 030e 	add.w	r3, r7, #14
 8000730:	f107 0210 	add.w	r2, r7, #16
 8000734:	f001 f8be 	bl	80018b4 <modbusProcessResponse>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	f000 8090 	beq.w	8000860 <scanMaster+0x1c8>
						values, &countOrAddress) != 0)
				{
					printDebug("DI address = %d \n", countOrAddress);
 8000740:	89fb      	ldrh	r3, [r7, #14]
 8000742:	461a      	mov	r2, r3
 8000744:	495e      	ldr	r1, [pc, #376]	@ (80008c0 <scanMaster+0x228>)
 8000746:	2004      	movs	r0, #4
 8000748:	f7ff fea4 	bl	8000494 <myPrintf>
					uint8_t slaveNum = uart1Stream.rxBuffer[uart1Stream.rxReadIndex];
 800074c:	4b59      	ldr	r3, [pc, #356]	@ (80008b4 <scanMaster+0x21c>)
 800074e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000752:	461a      	mov	r2, r3
 8000754:	4b57      	ldr	r3, [pc, #348]	@ (80008b4 <scanMaster+0x21c>)
 8000756:	5c9b      	ldrb	r3, [r3, r2]
 8000758:	76bb      	strb	r3, [r7, #26]
					if (buttonState[slaveNum - 1] != (values[0] & 1))
 800075a:	7ebb      	ldrb	r3, [r7, #26]
 800075c:	3b01      	subs	r3, #1
 800075e:	4a59      	ldr	r2, [pc, #356]	@ (80008c4 <scanMaster+0x22c>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	461a      	mov	r2, r3
 8000764:	7c3b      	ldrb	r3, [r7, #16]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	429a      	cmp	r2, r3
 800076c:	d078      	beq.n	8000860 <scanMaster+0x1c8>
					{
						buttonState[slaveNum - 1] = (values[0] & 1);
 800076e:	7c3a      	ldrb	r2, [r7, #16]
 8000770:	7ebb      	ldrb	r3, [r7, #26]
 8000772:	3b01      	subs	r3, #1
 8000774:	f002 0201 	and.w	r2, r2, #1
 8000778:	b2d1      	uxtb	r1, r2
 800077a:	4a52      	ldr	r2, [pc, #328]	@ (80008c4 <scanMaster+0x22c>)
 800077c:	54d1      	strb	r1, [r2, r3]

						readRTC(&eventTime[slaveNum - 1]);
 800077e:	7ebb      	ldrb	r3, [r7, #26]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	4a4f      	ldr	r2, [pc, #316]	@ (80008c8 <scanMaster+0x230>)
 800078c:	4413      	add	r3, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fc92 	bl	80010b8 <readRTC>
						printInfo("Data received from slave = %d \t", slaveNum);
 8000794:	7ebb      	ldrb	r3, [r7, #26]
 8000796:	461a      	mov	r2, r3
 8000798:	494c      	ldr	r1, [pc, #304]	@ (80008cc <scanMaster+0x234>)
 800079a:	2003      	movs	r0, #3
 800079c:	f7ff fe7a 	bl	8000494 <myPrintf>
						printInfo("Button state=%d\t",
 80007a0:	7ebb      	ldrb	r3, [r7, #26]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a47      	ldr	r2, [pc, #284]	@ (80008c4 <scanMaster+0x22c>)
 80007a6:	5cd3      	ldrb	r3, [r2, r3]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4949      	ldr	r1, [pc, #292]	@ (80008d0 <scanMaster+0x238>)
 80007ac:	2003      	movs	r0, #3
 80007ae:	f7ff fe71 	bl	8000494 <myPrintf>
								buttonState[slaveNum - 1]);
						printInfo(
 80007b2:	7ebb      	ldrb	r3, [r7, #26]
 80007b4:	1e5a      	subs	r2, r3, #1
 80007b6:	4944      	ldr	r1, [pc, #272]	@ (80008c8 <scanMaster+0x230>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	440b      	add	r3, r1
 80007c2:	3306      	adds	r3, #6
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	469c      	mov	ip, r3
 80007c8:	7ebb      	ldrb	r3, [r7, #26]
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	493e      	ldr	r1, [pc, #248]	@ (80008c8 <scanMaster+0x230>)
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	440b      	add	r3, r1
 80007d8:	3307      	adds	r3, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	469e      	mov	lr, r3
 80007de:	7ebb      	ldrb	r3, [r7, #26]
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4939      	ldr	r1, [pc, #228]	@ (80008c8 <scanMaster+0x230>)
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	440b      	add	r3, r1
 80007ee:	3308      	adds	r3, #8
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	f503 61fa 	add.w	r1, r3, #2000	@ 0x7d0
 80007f6:	7ebb      	ldrb	r3, [r7, #26]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	4833      	ldr	r0, [pc, #204]	@ (80008c8 <scanMaster+0x230>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4403      	add	r3, r0
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461c      	mov	r4, r3
 800080a:	7ebb      	ldrb	r3, [r7, #26]
 800080c:	1e5a      	subs	r2, r3, #1
 800080e:	482e      	ldr	r0, [pc, #184]	@ (80008c8 <scanMaster+0x230>)
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4403      	add	r3, r0
 800081a:	3301      	adds	r3, #1
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461d      	mov	r5, r3
 8000820:	7ebb      	ldrb	r3, [r7, #26]
 8000822:	1e5a      	subs	r2, r3, #1
 8000824:	4828      	ldr	r0, [pc, #160]	@ (80008c8 <scanMaster+0x230>)
 8000826:	4613      	mov	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4403      	add	r3, r0
 8000830:	3302      	adds	r3, #2
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461e      	mov	r6, r3
 8000836:	7ebb      	ldrb	r3, [r7, #26]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	4823      	ldr	r0, [pc, #140]	@ (80008c8 <scanMaster+0x230>)
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4403      	add	r3, r0
 8000846:	3304      	adds	r3, #4
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	9304      	str	r3, [sp, #16]
 800084c:	9603      	str	r6, [sp, #12]
 800084e:	9502      	str	r5, [sp, #8]
 8000850:	9401      	str	r4, [sp, #4]
 8000852:	9100      	str	r1, [sp, #0]
 8000854:	4673      	mov	r3, lr
 8000856:	4662      	mov	r2, ip
 8000858:	491e      	ldr	r1, [pc, #120]	@ (80008d4 <scanMaster+0x23c>)
 800085a:	2003      	movs	r0, #3
 800085c:	f7ff fe1a 	bl	8000494 <myPrintf>
								eventTime[slaveNum - 1].minutes,
								eventTime[slaveNum - 1].seconds,
								eventTime[slaveNum - 1].SubSeconds);
					}
				}
				uart1Stream.rxReadIndex += modlen;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <scanMaster+0x21c>)
 8000862:	f893 2203 	ldrb.w	r2, [r3, #515]	@ 0x203
 8000866:	7efb      	ldrb	r3, [r7, #27]
 8000868:	4413      	add	r3, r2
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <scanMaster+0x21c>)
 800086e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
			}

			if (uart1Stream.rxFillIndex == uart1Stream.rxReadIndex) {
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <scanMaster+0x21c>)
 8000874:	f893 2201 	ldrb.w	r2, [r3, #513]	@ 0x201
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <scanMaster+0x21c>)
 800087a:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800087e:	429a      	cmp	r2, r3
 8000880:	d114      	bne.n	80008ac <scanMaster+0x214>
				uart1Stream.rxFillIndex = 0; // Reset index for next frame
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <scanMaster+0x21c>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
				uart1Stream.rxReadIndex = 0; // Reset index for next frame
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <scanMaster+0x21c>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
 8000892:	e00c      	b.n	80008ae <scanMaster+0x216>
			}
			return 0;
			//break;
		}
		osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f006 fb3a 	bl	8006f0e <osDelay>
	while (HAL_GetTick() - requestTime < 200) {
 800089a:	f001 fcbd 	bl	8002218 <HAL_GetTick>
 800089e:	4602      	mov	r2, r0
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80008a6:	f67f af07 	bls.w	80006b8 <scanMaster+0x20>
 80008aa:	e000      	b.n	80008ae <scanMaster+0x216>
			return 0;
 80008ac:	bf00      	nop
	}
}
 80008ae:	3724      	adds	r7, #36	@ 0x24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b4:	20000098 	.word	0x20000098
 80008b8:	080097fc 	.word	0x080097fc
 80008bc:	08009824 	.word	0x08009824
 80008c0:	08009850 	.word	0x08009850
 80008c4:	20000094 	.word	0x20000094
 80008c8:	20000080 	.word	0x20000080
 80008cc:	0800986c 	.word	0x0800986c
 80008d0:	08009894 	.word	0x08009894
 80008d4:	080098ac 	.word	0x080098ac

080008d8 <ModbusSlaveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ModbusSlaveTask */
void ModbusSlaveTask(void const * argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	@ 0x38
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ModbusSlaveTask */

	uint32_t slaveLastPoll[2];
	uint32_t slavePollRate[2] = {200, 200};
 80008e0:	4a41      	ldr	r2, [pc, #260]	@ (80009e8 <ModbusSlaveTask+0x110>)
 80008e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ea:	e883 0003 	stmia.w	r3, {r0, r1}

	//put max485 in reception mode
	HAL_GPIO_WritePin(max485_DE_GPIO_Port, max485_DE_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f8:	f001 ffa6 	bl	8002848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(max485_RE_GPIO_Port, max485_RE_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2101      	movs	r1, #1
 8000900:	483a      	ldr	r0, [pc, #232]	@ (80009ec <ModbusSlaveTask+0x114>)
 8000902:	f001 ffa1 	bl	8002848 <HAL_GPIO_WritePin>

	// Start UART reception in interrupt mode
	HAL_UART_Receive_IT(&huart1, &uart1Stream.rxByte, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	4939      	ldr	r1, [pc, #228]	@ (80009f0 <ModbusSlaveTask+0x118>)
 800090a:	483a      	ldr	r0, [pc, #232]	@ (80009f4 <ModbusSlaveTask+0x11c>)
 800090c:	f005 f93f 	bl	8005b8e <HAL_UART_Receive_IT>
	for(;;)
	{
		// Process received Modbus data here
		static uint32_t lastSyncTime = 0;

		if(HAL_GetTick() - lastSyncTime > 1000) // Sync time every 10 secs
 8000910:	f001 fc82 	bl	8002218 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <ModbusSlaveTask+0x120>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000920:	d902      	bls.n	8000928 <ModbusSlaveTask+0x50>
		{
			WriteTimePending = 1;
 8000922:	4b36      	ldr	r3, [pc, #216]	@ (80009fc <ModbusSlaveTask+0x124>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
		}

		if (WriteTimePending == 1)
 8000928:	4b34      	ldr	r3, [pc, #208]	@ (80009fc <ModbusSlaveTask+0x124>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d132      	bne.n	8000996 <ModbusSlaveTask+0xbe>
		{
			rtcTime time;
			uint16_t syncTime[8];
			readRTC(&time);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fbbf 	bl	80010b8 <readRTC>
			syncTime[0] = (uint16_t)time.date;
 800093a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800093e:	81bb      	strh	r3, [r7, #12]
			syncTime[1] = (uint16_t)time.month;
 8000940:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000944:	81fb      	strh	r3, [r7, #14]
			syncTime[2] = (uint16_t)(time.year + 2000); // Adjust year for Modbus
 8000946:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800094a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800094e:	b29b      	uxth	r3, r3
 8000950:	823b      	strh	r3, [r7, #16]
			syncTime[3] = (uint16_t)time.day;
 8000952:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000956:	827b      	strh	r3, [r7, #18]
			syncTime[4] = (uint16_t)time.hours;
 8000958:	7f3b      	ldrb	r3, [r7, #28]
 800095a:	82bb      	strh	r3, [r7, #20]
			syncTime[5] = (uint16_t)time.minutes;
 800095c:	7f7b      	ldrb	r3, [r7, #29]
 800095e:	82fb      	strh	r3, [r7, #22]
			syncTime[6] = (uint16_t)time.seconds;
 8000960:	7fbb      	ldrb	r3, [r7, #30]
 8000962:	833b      	strh	r3, [r7, #24]
			syncTime[7] = (uint16_t)time.SubSeconds;
 8000964:	8c3b      	ldrh	r3, [r7, #32]
 8000966:	837b      	strh	r3, [r7, #26]

			printInfo("Syncing time to slaves\n");
 8000968:	4925      	ldr	r1, [pc, #148]	@ (8000a00 <ModbusSlaveTask+0x128>)
 800096a:	2003      	movs	r0, #3
 800096c:	f7ff fd92 	bl	8000494 <myPrintf>
			writeRegisters(0, RTC_DATE, syncTime, 7);
 8000970:	f107 020c 	add.w	r2, r7, #12
 8000974:	2307      	movs	r3, #7
 8000976:	f649 4141 	movw	r1, #40001	@ 0x9c41
 800097a:	2000      	movs	r0, #0
 800097c:	f001 f8be 	bl	8001afc <writeRegisters>

			/*dont expect response for broadcast message*/
			WriteTimePending = 0;
 8000980:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <ModbusSlaveTask+0x124>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
			lastSyncTime = HAL_GetTick();
 8000986:	f001 fc47 	bl	8002218 <HAL_GetTick>
 800098a:	4603      	mov	r3, r0
 800098c:	4a1a      	ldr	r2, [pc, #104]	@ (80009f8 <ModbusSlaveTask+0x120>)
 800098e:	6013      	str	r3, [r2, #0]
			osDelay(10);
 8000990:	200a      	movs	r0, #10
 8000992:	f006 fabc 	bl	8006f0e <osDelay>
		}

		if (HAL_GetTick() - slaveLastPoll[0] > slavePollRate[0])
 8000996:	f001 fc3f 	bl	8002218 <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099e:	1ad2      	subs	r2, r2, r3
 80009a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d909      	bls.n	80009ba <ModbusSlaveTask+0xe2>
		{
			scanMaster(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff fe76 	bl	8000698 <scanMaster>
			slaveLastPoll[0]= HAL_GetTick();
 80009ac:	f001 fc34 	bl	8002218 <HAL_GetTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	633b      	str	r3, [r7, #48]	@ 0x30
			osDelay(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f006 faaa 	bl	8006f0e <osDelay>
		}

		if (HAL_GetTick() - slaveLastPoll[1] > slavePollRate[1])
 80009ba:	f001 fc2d 	bl	8002218 <HAL_GetTick>
 80009be:	4602      	mov	r2, r0
 80009c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009c2:	1ad2      	subs	r2, r2, r3
 80009c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d909      	bls.n	80009de <ModbusSlaveTask+0x106>
		{
			scanMaster(2);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f7ff fe64 	bl	8000698 <scanMaster>
			slaveLastPoll[1]= HAL_GetTick();
 80009d0:	f001 fc22 	bl	8002218 <HAL_GetTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
			osDelay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f006 fa98 	bl	8006f0e <osDelay>
		}
		osDelay(50); //scan every 50ms
 80009de:	2032      	movs	r0, #50	@ 0x32
 80009e0:	f006 fa95 	bl	8006f0e <osDelay>
	{
 80009e4:	e794      	b.n	8000910 <ModbusSlaveTask+0x38>
 80009e6:	bf00      	nop
 80009e8:	08009904 	.word	0x08009904
 80009ec:	48000400 	.word	0x48000400
 80009f0:	20000298 	.word	0x20000298
 80009f4:	20000824 	.word	0x20000824
 80009f8:	2000075c 	.word	0x2000075c
 80009fc:	20000000 	.word	0x20000000
 8000a00:	080098e4 	.word	0x080098e4

08000a04 <consoleTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_consoleTask */
void consoleTask(void const * argument)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09a      	sub	sp, #104	@ 0x68
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN consoleTask */

	// Start UART reception in interrupt mode for UART2
	HAL_UART_Receive_IT(&huart2, &uart2Stream.rxByte, 1);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	498c      	ldr	r1, [pc, #560]	@ (8000c40 <consoleTask+0x23c>)
 8000a10:	488c      	ldr	r0, [pc, #560]	@ (8000c44 <consoleTask+0x240>)
 8000a12:	f005 f8bc 	bl	8005b8e <HAL_UART_Receive_IT>

	for(;;)
	{
		// Check if data is received on UART2
		if (uart2Stream.rxFillIndex != uart2Stream.rxReadIndex)
 8000a16:	4b8c      	ldr	r3, [pc, #560]	@ (8000c48 <consoleTask+0x244>)
 8000a18:	f893 2201 	ldrb.w	r2, [r3, #513]	@ 0x201
 8000a1c:	4b8a      	ldr	r3, [pc, #552]	@ (8000c48 <consoleTask+0x244>)
 8000a1e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000a22:	429a      	cmp	r2, r3
 8000a24:	f000 8100 	beq.w	8000c28 <consoleTask+0x224>
		{
			// Parse received data
			char commandBuffer[32];
			uint8_t commandIndex = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			while (uart2Stream.rxFillIndex != uart2Stream.rxReadIndex && commandIndex < sizeof(commandBuffer) - 1)
 8000a2e:	e015      	b.n	8000a5c <consoleTask+0x58>
			{
				commandBuffer[commandIndex++] = uart2Stream.rxBuffer[uart2Stream.rxReadIndex++];
 8000a30:	4b85      	ldr	r3, [pc, #532]	@ (8000c48 <consoleTask+0x244>)
 8000a32:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	b2d1      	uxtb	r1, r2
 8000a3a:	4a83      	ldr	r2, [pc, #524]	@ (8000c48 <consoleTask+0x244>)
 8000a3c:	f882 1203 	strb.w	r1, [r2, #515]	@ 0x203
 8000a40:	461a      	mov	r2, r3
 8000a42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000a46:	1c59      	adds	r1, r3, #1
 8000a48:	f887 105f 	strb.w	r1, [r7, #95]	@ 0x5f
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8000c48 <consoleTask+0x244>)
 8000a50:	5c9a      	ldrb	r2, [r3, r2]
 8000a52:	f101 0360 	add.w	r3, r1, #96	@ 0x60
 8000a56:	443b      	add	r3, r7
 8000a58:	f803 2c54 	strb.w	r2, [r3, #-84]
			while (uart2Stream.rxFillIndex != uart2Stream.rxReadIndex && commandIndex < sizeof(commandBuffer) - 1)
 8000a5c:	4b7a      	ldr	r3, [pc, #488]	@ (8000c48 <consoleTask+0x244>)
 8000a5e:	f893 2201 	ldrb.w	r2, [r3, #513]	@ 0x201
 8000a62:	4b79      	ldr	r3, [pc, #484]	@ (8000c48 <consoleTask+0x244>)
 8000a64:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d003      	beq.n	8000a74 <consoleTask+0x70>
 8000a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000a70:	2b1e      	cmp	r3, #30
 8000a72:	d9dd      	bls.n	8000a30 <consoleTask+0x2c>
				if (uart2Stream.rxReadIndex >= RX_BUFFER_SIZE)
				{
					uart2Stream.rxReadIndex = 0;  // Reset index on overflow
				}
			}
			commandBuffer[commandIndex] = '\0';  // Null-terminate the command string
 8000a74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000a78:	3360      	adds	r3, #96	@ 0x60
 8000a7a:	443b      	add	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f803 2c54 	strb.w	r2, [r3, #-84]

			// Check if the command is "setTime HH:MM:SS"
			if (strncmp(commandBuffer, "setTime ", 8) == 0)
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2208      	movs	r2, #8
 8000a88:	4970      	ldr	r1, [pc, #448]	@ (8000c4c <consoleTask+0x248>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f007 fdba 	bl	8008604 <strncmp>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d152      	bne.n	8000b3c <consoleTask+0x138>
			{
				RTC_TimeTypeDef newTime = {0};
 8000a96:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
				int hours, minutes, seconds;

				if (sscanf(commandBuffer + 8, "%2d:%2d:%2d", &hours, &minutes, &seconds) == 3)
 8000aa6:	f107 000c 	add.w	r0, r7, #12
 8000aaa:	3008      	adds	r0, #8
 8000aac:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000ab0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000ab4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	460b      	mov	r3, r1
 8000abc:	4964      	ldr	r1, [pc, #400]	@ (8000c50 <consoleTask+0x24c>)
 8000abe:	f007 fd19 	bl	80084f4 <siscanf>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d134      	bne.n	8000b32 <consoleTask+0x12e>
				{
					// Set the RTC time
					newTime.Hours = hours;
 8000ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
					newTime.Minutes = minutes;
 8000ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
					newTime.Seconds = seconds;
 8000ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
					newTime.SubSeconds = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c

					DS1307_SetTime(newTime.Hours, newTime.Minutes, newTime.Seconds);
 8000ae4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000ae8:	f897 1049 	ldrb.w	r1, [r7, #73]	@ 0x49
 8000aec:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fb9b 	bl	800122c <DS1307_SetTime>

					// Set the internal RTC time
					if (HAL_RTC_SetTime(&hrtc, &newTime, RTC_FORMAT_BIN) != HAL_OK)
 8000af6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	4855      	ldr	r0, [pc, #340]	@ (8000c54 <consoleTask+0x250>)
 8000b00:	f004 fa5b 	bl	8004fba <HAL_RTC_SetTime>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <consoleTask+0x110>
					{
						printInfo("Failed to set internal RTC time\n");
 8000b0a:	4953      	ldr	r1, [pc, #332]	@ (8000c58 <consoleTask+0x254>)
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f7ff fcc1 	bl	8000494 <myPrintf>
 8000b12:	e089      	b.n	8000c28 <consoleTask+0x224>
					}
					else
					{
						printInfo("Time set to %.2d:%.2d:%.2d\n", newTime.Hours, newTime.Minutes, newTime.Seconds);
 8000b14:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	460b      	mov	r3, r1
 8000b28:	494c      	ldr	r1, [pc, #304]	@ (8000c5c <consoleTask+0x258>)
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	f7ff fcb2 	bl	8000494 <myPrintf>
 8000b30:	e07a      	b.n	8000c28 <consoleTask+0x224>
					}
				}
				else
				{
					printInfo("Invalid time format. Use HH:MM:SS\n");
 8000b32:	494b      	ldr	r1, [pc, #300]	@ (8000c60 <consoleTask+0x25c>)
 8000b34:	2003      	movs	r0, #3
 8000b36:	f7ff fcad 	bl	8000494 <myPrintf>
 8000b3a:	e075      	b.n	8000c28 <consoleTask+0x224>
				}
			}

			// Check if the command is "setDate DD/MM/YYYY"
			else if (strncmp(commandBuffer, "setDate ", 8) == 0)
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2208      	movs	r2, #8
 8000b42:	4948      	ldr	r1, [pc, #288]	@ (8000c64 <consoleTask+0x260>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	f007 fd5d 	bl	8008604 <strncmp>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d14e      	bne.n	8000bee <consoleTask+0x1ea>
			{
				RTC_DateTypeDef newDate = {0};
 8000b50:	2300      	movs	r3, #0
 8000b52:	63bb      	str	r3, [r7, #56]	@ 0x38
				int day, month, year;

				if (sscanf(commandBuffer + 8, "%2d/%2d/%4d", &day, &month, &year) == 3)
 8000b54:	f107 000c 	add.w	r0, r7, #12
 8000b58:	3008      	adds	r0, #8
 8000b5a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000b5e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	493f      	ldr	r1, [pc, #252]	@ (8000c68 <consoleTask+0x264>)
 8000b6c:	f007 fcc2 	bl	80084f4 <siscanf>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d136      	bne.n	8000be4 <consoleTask+0x1e0>
				{
					newDate.Date = day;
 8000b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
					newDate.Month = month;
 8000b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
					newDate.Year = year - 2000; // Adjust year for internal RTC
 8000b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	3330      	adds	r3, #48	@ 0x30
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

					// Set the RTC date
					DS1307_SetDate(0,newDate.Date, newDate.Month, newDate.Year);
 8000b92:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000b96:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000b9a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 fb0a 	bl	80011b8 <DS1307_SetDate>

					if (HAL_RTC_SetDate(&hrtc, &newDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ba4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4829      	ldr	r0, [pc, #164]	@ (8000c54 <consoleTask+0x250>)
 8000bae:	f004 fafc 	bl	80051aa <HAL_RTC_SetDate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d004      	beq.n	8000bc2 <consoleTask+0x1be>
					{
						printInfo("Failed to set internal RTC date\n");
 8000bb8:	492c      	ldr	r1, [pc, #176]	@ (8000c6c <consoleTask+0x268>)
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f7ff fc6a 	bl	8000494 <myPrintf>
 8000bc0:	e032      	b.n	8000c28 <consoleTask+0x224>
					}
					else
					{
						printInfo("Date set to %.2d/%.2d/%.4d\n", newDate.Date, newDate.Month, newDate.Year + 2000);
 8000bc2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000bd2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	4925      	ldr	r1, [pc, #148]	@ (8000c70 <consoleTask+0x26c>)
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f7ff fc59 	bl	8000494 <myPrintf>
 8000be2:	e021      	b.n	8000c28 <consoleTask+0x224>
					}
				}
				else
				{
					printInfo("Invalid date format. Use DD/MM/YYYY\n");
 8000be4:	4923      	ldr	r1, [pc, #140]	@ (8000c74 <consoleTask+0x270>)
 8000be6:	2003      	movs	r0, #3
 8000be8:	f7ff fc54 	bl	8000494 <myPrintf>
 8000bec:	e01c      	b.n	8000c28 <consoleTask+0x224>
				}
			}
			else
			{
				printInfo("Unknown command: %s\n", commandBuffer);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4920      	ldr	r1, [pc, #128]	@ (8000c78 <consoleTask+0x274>)
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f7ff fc4c 	bl	8000494 <myPrintf>
			}
		}


		// Check if there is data to send from txBuffer
		while (uart2Stream.txFillIndex != uart2Stream.txReadIndex)
 8000bfc:	e014      	b.n	8000c28 <consoleTask+0x224>
		{
			// Calculate the number of bytes to send

			// Send all available data from txBuffer
			HAL_UART_Transmit(&huart2, &uart2Stream.txBuffer[uart2Stream.txReadIndex], 1, HAL_MAX_DELAY);
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <consoleTask+0x244>)
 8000c00:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000c04:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c08:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <consoleTask+0x244>)
 8000c0a:	1899      	adds	r1, r3, r2
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	2201      	movs	r2, #1
 8000c12:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <consoleTask+0x240>)
 8000c14:	f004 ff32 	bl	8005a7c <HAL_UART_Transmit>
			uart2Stream.txReadIndex++;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <consoleTask+0x244>)
 8000c1a:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <consoleTask+0x244>)
 8000c24:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		while (uart2Stream.txFillIndex != uart2Stream.txReadIndex)
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <consoleTask+0x244>)
 8000c2a:	f893 2202 	ldrb.w	r2, [r3, #514]	@ 0x202
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <consoleTask+0x244>)
 8000c30:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d1e2      	bne.n	8000bfe <consoleTask+0x1fa>
			{
				uart2Stream.txReadIndex = 0;  // Reset index on overflow
			}
		}

		osDelay(50);
 8000c38:	2032      	movs	r0, #50	@ 0x32
 8000c3a:	f006 f968 	bl	8006f0e <osDelay>
		if (uart2Stream.rxFillIndex != uart2Stream.rxReadIndex)
 8000c3e:	e6ea      	b.n	8000a16 <consoleTask+0x12>
 8000c40:	200004a4 	.word	0x200004a4
 8000c44:	200008ac 	.word	0x200008ac
 8000c48:	200002a4 	.word	0x200002a4
 8000c4c:	0800990c 	.word	0x0800990c
 8000c50:	08009918 	.word	0x08009918
 8000c54:	200007b4 	.word	0x200007b4
 8000c58:	08009924 	.word	0x08009924
 8000c5c:	0800994c 	.word	0x0800994c
 8000c60:	08009970 	.word	0x08009970
 8000c64:	0800999c 	.word	0x0800999c
 8000c68:	080099a8 	.word	0x080099a8
 8000c6c:	080099b4 	.word	0x080099b4
 8000c70:	080099dc 	.word	0x080099dc
 8000c74:	08009a00 	.word	0x08009a00
 8000c78:	08009a2c 	.word	0x08009a2c

08000c7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c92:	4b34      	ldr	r3, [pc, #208]	@ (8000d64 <MX_GPIO_Init+0xe8>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a33      	ldr	r2, [pc, #204]	@ (8000d64 <MX_GPIO_Init+0xe8>)
 8000c98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b31      	ldr	r3, [pc, #196]	@ (8000d64 <MX_GPIO_Init+0xe8>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b2e      	ldr	r3, [pc, #184]	@ (8000d64 <MX_GPIO_Init+0xe8>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a2d      	ldr	r2, [pc, #180]	@ (8000d64 <MX_GPIO_Init+0xe8>)
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <MX_GPIO_Init+0xe8>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b28      	ldr	r3, [pc, #160]	@ (8000d64 <MX_GPIO_Init+0xe8>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4a27      	ldr	r2, [pc, #156]	@ (8000d64 <MX_GPIO_Init+0xe8>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ccc:	6153      	str	r3, [r2, #20]
 8000cce:	4b25      	ldr	r3, [pc, #148]	@ (8000d64 <MX_GPIO_Init+0xe8>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(max485_RE_GPIO_Port, max485_RE_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4822      	ldr	r0, [pc, #136]	@ (8000d68 <MX_GPIO_Init+0xec>)
 8000ce0:	f001 fdb2 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(max485_DE_GPIO_Port, max485_DE_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cee:	f001 fdab 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000cf6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0a:	f001 fc13 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : max485_RE_Pin */
  GPIO_InitStruct.Pin = max485_RE_Pin;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(max485_RE_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	4810      	ldr	r0, [pc, #64]	@ (8000d68 <MX_GPIO_Init+0xec>)
 8000d26:	f001 fc05 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : max485_DE_Pin */
  GPIO_InitStruct.Pin = max485_DE_Pin;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(max485_DE_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f001 fbf5 	bl	8002534 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	2009      	movs	r0, #9
 8000d50:	f001 fb4a 	bl	80023e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d54:	2009      	movs	r0, #9
 8000d56:	f001 fb63 	bl	8002420 <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000400 	.word	0x48000400

08000d6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <MX_I2C1_Init+0x78>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <MX_I2C1_Init+0x7c>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da6:	480e      	ldr	r0, [pc, #56]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000da8:	f001 fd7e 	bl	80028a8 <HAL_I2C_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000db2:	f000 f8e3 	bl	8000f7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000dba:	f002 fc2d 	bl	8003618 <HAL_I2CEx_ConfigAnalogFilter>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dc4:	f000 f8da 	bl	8000f7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000dcc:	f002 fc6f 	bl	80036ae <HAL_I2CEx_ConfigDigitalFilter>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f000 f8d1 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000760 	.word	0x20000760
 8000de4:	40005400 	.word	0x40005400
 8000de8:	00201d2b 	.word	0x00201d2b

08000dec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a17      	ldr	r2, [pc, #92]	@ (8000e68 <HAL_I2C_MspInit+0x7c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d127      	bne.n	8000e5e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <HAL_I2C_MspInit+0x80>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	4a16      	ldr	r2, [pc, #88]	@ (8000e6c <HAL_I2C_MspInit+0x80>)
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e18:	6153      	str	r3, [r2, #20]
 8000e1a:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <HAL_I2C_MspInit+0x80>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e26:	23c0      	movs	r3, #192	@ 0xc0
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2a:	2312      	movs	r3, #18
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e36:	2304      	movs	r3, #4
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <HAL_I2C_MspInit+0x84>)
 8000e42:	f001 fb77 	bl	8002534 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <HAL_I2C_MspInit+0x80>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_I2C_MspInit+0x80>)
 8000e4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_I2C_MspInit+0x80>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e78:	f001 f9a4 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7c:	f000 f810 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e80:	f7ff fefc 	bl	8000c7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e84:	f000 fbd4 	bl	8001630 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e88:	f7ff ff70 	bl	8000d6c <MX_I2C1_Init>
  MX_RTC_Init();
 8000e8c:	f000 f87c 	bl	8000f88 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000e90:	f000 fb9e 	bl	80015d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e94:	f7ff fa0e 	bl	80002b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e98:	f005 ffe6 	bl	8006e68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <main+0x28>

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b096      	sub	sp, #88	@ 0x58
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eaa:	2228      	movs	r2, #40	@ 0x28
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f007 fba0 	bl	80085f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000edc:	2310      	movs	r3, #16
 8000ede:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fc2b 	bl	8003748 <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ef8:	f000 f840 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efc:	230f      	movs	r3, #15
 8000efe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fc54 	bl	80047c4 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f22:	f000 f82b 	bl	8000f7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <SystemClock_Config+0xb4>)
 8000f28:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 fe94 	bl	8004c68 <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f46:	f000 f819 	bl	8000f7c <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3758      	adds	r7, #88	@ 0x58
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	00010021 	.word	0x00010021

08000f58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f6a:	f001 f941 	bl	80021f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40014800 	.word	0x40014800

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <Error_Handler+0x8>

08000f88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_RTC_Init+0x44>)
 8000f8e:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <MX_RTC_Init+0x48>)
 8000f90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_RTC_Init+0x44>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_RTC_Init+0x44>)
 8000f9a:	227f      	movs	r2, #127	@ 0x7f
 8000f9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <MX_RTC_Init+0x44>)
 8000fa0:	22ff      	movs	r2, #255	@ 0xff
 8000fa2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_RTC_Init+0x44>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <MX_RTC_Init+0x44>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_RTC_Init+0x44>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_RTC_Init+0x44>)
 8000fb8:	f003 ff7c 	bl	8004eb4 <HAL_RTC_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000fc2:	f7ff ffdb 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200007b4 	.word	0x200007b4
 8000fd0:	40002800 	.word	0x40002800

08000fd4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <HAL_RTC_MspInit+0x44>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d111      	bne.n	800100a <HAL_RTC_MspInit+0x36>
 8000fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fea:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <HAL_RTC_MspInit+0x48>)
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	461a      	mov	r2, r3
 8001006:	2301      	movs	r3, #1
 8001008:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40002800 	.word	0x40002800
 800101c:	10908100 	.word	0x10908100

08001020 <setRTC>:
/* USER CODE BEGIN 1 */



void setRTC( rtcTime* newTime )
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]

	sTime.Hours = newTime->hours;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = newTime->minutes;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = newTime->seconds;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	789b      	ldrb	r3, [r3, #2]
 800104c:	73bb      	strb	r3, [r7, #14]
	sTime.SubSeconds = newTime->SubSeconds;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	889b      	ldrh	r3, [r3, #4]
 8001052:	613b      	str	r3, [r7, #16]
	sTime.SecondFraction = 1000;
 8001054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001058:	617b      	str	r3, [r7, #20]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4812      	ldr	r0, [pc, #72]	@ (80010b4 <setRTC+0x94>)
 800106c:	f003 ffa5 	bl	8004fba <HAL_RTC_SetTime>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <setRTC+0x5a>
	{
		Error_Handler();
 8001076:	f7ff ff81 	bl	8000f7c <Error_Handler>
	}

	sDate.WeekDay = newTime->day;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a5b      	ldrb	r3, [r3, #9]
 800107e:	723b      	strb	r3, [r7, #8]
	sDate.Month = newTime->month;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	79db      	ldrb	r3, [r3, #7]
 8001084:	727b      	strb	r3, [r7, #9]
	sDate.Date = newTime->date;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	799b      	ldrb	r3, [r3, #6]
 800108a:	72bb      	strb	r3, [r7, #10]
	sDate.Year = newTime->year;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7a1b      	ldrb	r3, [r3, #8]
 8001090:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <setRTC+0x94>)
 800109c:	f004 f885 	bl	80051aa <HAL_RTC_SetDate>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <setRTC+0x8a>
	{
		Error_Handler();
 80010a6:	f7ff ff69 	bl	8000f7c <Error_Handler>
	}
}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200007b4 	.word	0x200007b4

080010b8 <readRTC>:

void readRTC(rtcTime *newTime)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	@ 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef stimestructureget;
	  RTC_DateTypeDef sdatestructureget;
	uint32_t subseconds, secondfraction;

	  /* Get the RTC current Time */
	  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	481b      	ldr	r0, [pc, #108]	@ (8001138 <readRTC+0x80>)
 80010ca:	f004 f810 	bl	80050ee <HAL_RTC_GetTime>

	  /*Date is not required but without reading data its returning
	   * time value = 0 */

	  /* Get the RTC current Date */
	  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	4818      	ldr	r0, [pc, #96]	@ (8001138 <readRTC+0x80>)
 80010d8:	f004 f8eb 	bl	80052b2 <HAL_RTC_GetDate>


	subseconds = stimestructureget.SubSeconds;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	secondfraction = hrtc.Init.SynchPrediv;
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <readRTC+0x80>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Calculate the exact time in milliseconds
	uint32_t milliseconds = ((secondfraction - subseconds) * 1000) / (secondfraction + 1);
 80010e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f0:	fb03 f202 	mul.w	r2, r3, r2
 80010f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f6:	3301      	adds	r3, #1
 80010f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24

	newTime->SubSeconds = milliseconds;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	b29a      	uxth	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	809a      	strh	r2, [r3, #4]
	newTime->seconds = stimestructureget.Seconds;
 8001106:	7cba      	ldrb	r2, [r7, #18]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	709a      	strb	r2, [r3, #2]
	newTime->minutes = stimestructureget.Minutes;
 800110c:	7c7a      	ldrb	r2, [r7, #17]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	705a      	strb	r2, [r3, #1]
	newTime->hours = stimestructureget.Hours;
 8001112:	7c3a      	ldrb	r2, [r7, #16]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	701a      	strb	r2, [r3, #0]

	newTime->date = sdatestructureget.Date;
 8001118:	7bba      	ldrb	r2, [r7, #14]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	719a      	strb	r2, [r3, #6]
	newTime->month = sdatestructureget.Month;
 800111e:	7b7a      	ldrb	r2, [r7, #13]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	71da      	strb	r2, [r3, #7]
	newTime->year = sdatestructureget.Year;
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	721a      	strb	r2, [r3, #8]
	newTime->day = sdatestructureget.WeekDay;
 800112a:	7b3a      	ldrb	r2, [r7, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	725a      	strb	r2, [r3, #9]

}
 8001130:	bf00      	nop
 8001132:	3730      	adds	r7, #48	@ 0x30
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200007b4 	.word	0x200007b4

0800113c <DecimalToBCD>:
#define DS1307_ADDRESS 0xD0  // 7-bit address shifted for HAL

extern I2C_HandleTypeDef hi2c1;

// Convert Decimal to Binary-Coded Decimal (BCD)
uint8_t DecimalToBCD(uint8_t val) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	return ((val / 10) << 4) | (val % 10);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <DecimalToBCD+0x44>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	b258      	sxtb	r0, r3
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <DecimalToBCD+0x44>)
 800115a:	fba3 1302 	umull	r1, r3, r3, r2
 800115e:	08d9      	lsrs	r1, r3, #3
 8001160:	460b      	mov	r3, r1
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	b25b      	sxtb	r3, r3
 800116e:	4303      	orrs	r3, r0
 8001170:	b25b      	sxtb	r3, r3
 8001172:	b2db      	uxtb	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	cccccccd 	.word	0xcccccccd

08001184 <BCDToDecimal>:
uint8_t BCDToDecimal(uint8_t val) {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	return ((val >> 4) * 10) + (val & 0x0F);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4413      	add	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	b2db      	uxtb	r3, r3
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <DS1307_SetDate>:

void DS1307_SetDate(uint8_t dayOfWeek, uint8_t date, uint8_t month, uint8_t year) {
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4604      	mov	r4, r0
 80011c0:	4608      	mov	r0, r1
 80011c2:	4611      	mov	r1, r2
 80011c4:	461a      	mov	r2, r3
 80011c6:	4623      	mov	r3, r4
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	4603      	mov	r3, r0
 80011cc:	71bb      	strb	r3, [r7, #6]
 80011ce:	460b      	mov	r3, r1
 80011d0:	717b      	strb	r3, [r7, #5]
 80011d2:	4613      	mov	r3, r2
 80011d4:	713b      	strb	r3, [r7, #4]
	uint8_t buffer[5];

	// Prepare data for date registers
	buffer[0] = 0x03;                     // Start at register 0x03 (day of the week)
 80011d6:	2303      	movs	r3, #3
 80011d8:	723b      	strb	r3, [r7, #8]
	buffer[1] = DecimalToBCD(dayOfWeek);  // Day of the week (1 = Sunday, 7 = Saturday)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffad 	bl	800113c <DecimalToBCD>
 80011e2:	4603      	mov	r3, r0
 80011e4:	727b      	strb	r3, [r7, #9]
	buffer[2] = DecimalToBCD(date);       // Date
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ffa7 	bl	800113c <DecimalToBCD>
 80011ee:	4603      	mov	r3, r0
 80011f0:	72bb      	strb	r3, [r7, #10]
	buffer[3] = DecimalToBCD(month);      // Month
 80011f2:	797b      	ldrb	r3, [r7, #5]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ffa1 	bl	800113c <DecimalToBCD>
 80011fa:	4603      	mov	r3, r0
 80011fc:	72fb      	strb	r3, [r7, #11]
	buffer[4] = DecimalToBCD(year);       // Year (last two digits)
 80011fe:	793b      	ldrb	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff9b 	bl	800113c <DecimalToBCD>
 8001206:	4603      	mov	r3, r0
 8001208:	733b      	strb	r3, [r7, #12]

	// Write to DS1307
	HAL_I2C_Master_Transmit(&hi2c1, DS1307_ADDRESS, buffer, 5, HAL_MAX_DELAY);
 800120a:	f107 0208 	add.w	r2, r7, #8
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2305      	movs	r3, #5
 8001216:	21d0      	movs	r1, #208	@ 0xd0
 8001218:	4803      	ldr	r0, [pc, #12]	@ (8001228 <DS1307_SetDate+0x70>)
 800121a:	f001 fbe1 	bl	80029e0 <HAL_I2C_Master_Transmit>
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	20000760 	.word	0x20000760

0800122c <DS1307_SetTime>:

void DS1307_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af02      	add	r7, sp, #8
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	460b      	mov	r3, r1
 8001238:	71bb      	strb	r3, [r7, #6]
 800123a:	4613      	mov	r3, r2
 800123c:	717b      	strb	r3, [r7, #5]
	uint8_t buffer[4];

	// Prepare data for time registers
	buffer[0] = 0x00;                        // Start at register 0x00 (seconds)
 800123e:	2300      	movs	r3, #0
 8001240:	733b      	strb	r3, [r7, #12]
	buffer[1] = DecimalToBCD(seconds);       // Seconds (CH bit is cleared automatically)
 8001242:	797b      	ldrb	r3, [r7, #5]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff79 	bl	800113c <DecimalToBCD>
 800124a:	4603      	mov	r3, r0
 800124c:	737b      	strb	r3, [r7, #13]
	buffer[2] = DecimalToBCD(minutes);       // Minutes
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff73 	bl	800113c <DecimalToBCD>
 8001256:	4603      	mov	r3, r0
 8001258:	73bb      	strb	r3, [r7, #14]
	buffer[3] = DecimalToBCD(hours);         // Hours
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff6d 	bl	800113c <DecimalToBCD>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]

	// Write to DS1307
	HAL_I2C_Master_Transmit(&hi2c1, DS1307_ADDRESS, buffer, 4, HAL_MAX_DELAY);
 8001266:	f107 020c 	add.w	r2, r7, #12
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2304      	movs	r3, #4
 8001272:	21d0      	movs	r1, #208	@ 0xd0
 8001274:	4803      	ldr	r0, [pc, #12]	@ (8001284 <DS1307_SetTime+0x58>)
 8001276:	f001 fbb3 	bl	80029e0 <HAL_I2C_Master_Transmit>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000760 	.word	0x20000760

08001288 <DS1307_GetTime>:


void DS1307_GetTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af02      	add	r7, sp, #8
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	uint8_t buffer[3];
	uint8_t reg = 0x00;  // Start at register 0x00 (seconds)
 8001294:	2300      	movs	r3, #0
 8001296:	74fb      	strb	r3, [r7, #19]

	// Request data from DS1307 starting at seconds register
	HAL_I2C_Master_Transmit(&hi2c1, DS1307_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 8001298:	f107 0213 	add.w	r2, r7, #19
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	21d0      	movs	r1, #208	@ 0xd0
 80012a6:	4817      	ldr	r0, [pc, #92]	@ (8001304 <DS1307_GetTime+0x7c>)
 80012a8:	f001 fb9a 	bl	80029e0 <HAL_I2C_Master_Transmit>

	// Read 3 bytes (seconds, minutes, hours)
	HAL_I2C_Master_Receive(&hi2c1, DS1307_ADDRESS, buffer, 3, HAL_MAX_DELAY);
 80012ac:	f107 0214 	add.w	r2, r7, #20
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2303      	movs	r3, #3
 80012b8:	21d0      	movs	r1, #208	@ 0xd0
 80012ba:	4812      	ldr	r0, [pc, #72]	@ (8001304 <DS1307_GetTime+0x7c>)
 80012bc:	f001 fca8 	bl	8002c10 <HAL_I2C_Master_Receive>

	// Convert BCD to Decimal
	*seconds = BCDToDecimal(buffer[0] & 0x7F);  // Mask CH bit (bit 7)
 80012c0:	7d3b      	ldrb	r3, [r7, #20]
 80012c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5b 	bl	8001184 <BCDToDecimal>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	701a      	strb	r2, [r3, #0]
	*minutes = BCDToDecimal(buffer[1]);
 80012d6:	7d7b      	ldrb	r3, [r7, #21]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff53 	bl	8001184 <BCDToDecimal>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	701a      	strb	r2, [r3, #0]
	*hours = BCDToDecimal(buffer[2] & 0x3F);    // Mask 24-hour mode bits
 80012e6:	7dbb      	ldrb	r3, [r7, #22]
 80012e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff48 	bl	8001184 <BCDToDecimal>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	701a      	strb	r2, [r3, #0]
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000760 	.word	0x20000760

08001308 <DS1307_GetDate>:

void DS1307_GetDate(uint8_t *dayOfWeek, uint8_t *date, uint8_t *month, uint8_t *year) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af02      	add	r7, sp, #8
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	603b      	str	r3, [r7, #0]
	uint8_t buffer[4];
	uint8_t reg = 0x03;  // Start at register 0x03 (day of the week)
 8001316:	2303      	movs	r3, #3
 8001318:	74fb      	strb	r3, [r7, #19]

	// Request data from DS1307 starting at day of the week register
	HAL_I2C_Master_Transmit(&hi2c1, DS1307_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 800131a:	f107 0213 	add.w	r2, r7, #19
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2301      	movs	r3, #1
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	4818      	ldr	r0, [pc, #96]	@ (800138c <DS1307_GetDate+0x84>)
 800132a:	f001 fb59 	bl	80029e0 <HAL_I2C_Master_Transmit>

	// Read 4 bytes (day of the week, date, month, year)
	HAL_I2C_Master_Receive(&hi2c1, DS1307_ADDRESS, buffer, 4, HAL_MAX_DELAY);
 800132e:	f107 0214 	add.w	r2, r7, #20
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2304      	movs	r3, #4
 800133a:	21d0      	movs	r1, #208	@ 0xd0
 800133c:	4813      	ldr	r0, [pc, #76]	@ (800138c <DS1307_GetDate+0x84>)
 800133e:	f001 fc67 	bl	8002c10 <HAL_I2C_Master_Receive>

	// Convert BCD to Decimal
	*dayOfWeek = BCDToDecimal(buffer[0]);
 8001342:	7d3b      	ldrb	r3, [r7, #20]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff1d 	bl	8001184 <BCDToDecimal>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	701a      	strb	r2, [r3, #0]
	*date = BCDToDecimal(buffer[1]);
 8001352:	7d7b      	ldrb	r3, [r7, #21]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff15 	bl	8001184 <BCDToDecimal>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	701a      	strb	r2, [r3, #0]
	*month = BCDToDecimal(buffer[2]);
 8001362:	7dbb      	ldrb	r3, [r7, #22]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff0d 	bl	8001184 <BCDToDecimal>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	701a      	strb	r2, [r3, #0]
	*year = BCDToDecimal(buffer[3]);  // Last two digits of the year
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff05 	bl	8001184 <BCDToDecimal>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000760 	.word	0x20000760

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_MspInit+0x4c>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4a10      	ldr	r2, [pc, #64]	@ (80013dc <HAL_MspInit+0x4c>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6193      	str	r3, [r2, #24]
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_MspInit+0x4c>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_MspInit+0x4c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <HAL_MspInit+0x4c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_MspInit+0x4c>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	210f      	movs	r1, #15
 80013ca:	f06f 0001 	mvn.w	r0, #1
 80013ce:	f001 f80b 	bl	80023e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	@ 0x30
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80013f0:	4b2e      	ldr	r3, [pc, #184]	@ (80014ac <HAL_InitTick+0xcc>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a2d      	ldr	r2, [pc, #180]	@ (80014ac <HAL_InitTick+0xcc>)
 80013f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <HAL_InitTick+0xcc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001408:	f107 020c 	add.w	r2, r7, #12
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fbf6 	bl	8004c04 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001418:	f003 fbd2 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 800141c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800141e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001420:	4a23      	ldr	r2, [pc, #140]	@ (80014b0 <HAL_InitTick+0xd0>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	0c9b      	lsrs	r3, r3, #18
 8001428:	3b01      	subs	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <HAL_InitTick+0xd4>)
 800142e:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <HAL_InitTick+0xd8>)
 8001430:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_InitTick+0xd4>)
 8001434:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001438:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <HAL_InitTick+0xd4>)
 800143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <HAL_InitTick+0xd4>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <HAL_InitTick+0xd4>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_InitTick+0xd4>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001452:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <HAL_InitTick+0xd4>)
 8001454:	f004 f83a 	bl	80054cc <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800145e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001462:	2b00      	cmp	r3, #0
 8001464:	d11b      	bne.n	800149e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001466:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <HAL_InitTick+0xd4>)
 8001468:	f004 f892 	bl	8005590 <HAL_TIM_Base_Start_IT>
 800146c:	4603      	mov	r3, r0
 800146e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001476:	2b00      	cmp	r3, #0
 8001478:	d111      	bne.n	800149e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800147a:	201a      	movs	r0, #26
 800147c:	f000 ffd0 	bl	8002420 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	d808      	bhi.n	8001498 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8001486:	2200      	movs	r2, #0
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	201a      	movs	r0, #26
 800148c:	f000 ffac 	bl	80023e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <HAL_InitTick+0xdc>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e002      	b.n	800149e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800149e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3730      	adds	r7, #48	@ 0x30
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	431bde83 	.word	0x431bde83
 80014b4:	200007d4 	.word	0x200007d4
 80014b8:	40014800 	.word	0x40014800
 80014bc:	20000008 	.word	0x20000008

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80014fa:	2008      	movs	r0, #8
 80014fc:	f001 f9bc 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800150a:	f004 f89d 	bl	8005648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200007d4 	.word	0x200007d4

08001518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <USART1_IRQHandler+0x10>)
 800151e:	f004 fb7b 	bl	8005c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000824 	.word	0x20000824

0800152c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <USART2_IRQHandler+0x10>)
 8001532:	f004 fb71 	bl	8005c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200008ac 	.word	0x200008ac

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	@ (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f007 f8c0 	bl	80086f4 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <_sbrk+0x64>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20003000 	.word	0x20003000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	20000820 	.word	0x20000820
 80015a8:	20002790 	.word	0x20002790

080015ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015d6:	4a15      	ldr	r2, [pc, #84]	@ (800162c <MX_USART1_UART_Init+0x5c>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 8001614:	f004 f9e4 	bl	80059e0 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800161e:	f7ff fcad 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000824 	.word	0x20000824
 800162c:	40013800 	.word	0x40013800

08001630 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001636:	4a15      	ldr	r2, [pc, #84]	@ (800168c <MX_USART2_UART_Init+0x5c>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001674:	f004 f9b4 	bl	80059e0 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800167e:	f7ff fc7d 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200008ac 	.word	0x200008ac
 800168c:	40004400 	.word	0x40004400

08001690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	@ 0x30
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a38      	ldr	r2, [pc, #224]	@ (8001790 <HAL_UART_MspInit+0x100>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d132      	bne.n	8001718 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b2:	4b38      	ldr	r3, [pc, #224]	@ (8001794 <HAL_UART_MspInit+0x104>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4a37      	ldr	r2, [pc, #220]	@ (8001794 <HAL_UART_MspInit+0x104>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016bc:	6193      	str	r3, [r2, #24]
 80016be:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <HAL_UART_MspInit+0x104>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b32      	ldr	r3, [pc, #200]	@ (8001794 <HAL_UART_MspInit+0x104>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a31      	ldr	r2, [pc, #196]	@ (8001794 <HAL_UART_MspInit+0x104>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <HAL_UART_MspInit+0x104>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f4:	2307      	movs	r3, #7
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001702:	f000 ff17 	bl	8002534 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	2025      	movs	r0, #37	@ 0x25
 800170c:	f000 fe6c 	bl	80023e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001710:	2025      	movs	r0, #37	@ 0x25
 8001712:	f000 fe85 	bl	8002420 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001716:	e036      	b.n	8001786 <HAL_UART_MspInit+0xf6>
  else if(uartHandle->Instance==USART2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1e      	ldr	r2, [pc, #120]	@ (8001798 <HAL_UART_MspInit+0x108>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d131      	bne.n	8001786 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <HAL_UART_MspInit+0x104>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <HAL_UART_MspInit+0x104>)
 8001728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_UART_MspInit+0x104>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_UART_MspInit+0x104>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	4a15      	ldr	r2, [pc, #84]	@ (8001794 <HAL_UART_MspInit+0x104>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001744:	6153      	str	r3, [r2, #20]
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <HAL_UART_MspInit+0x104>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001752:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001764:	2307      	movs	r3, #7
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001772:	f000 fedf 	bl	8002534 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2105      	movs	r1, #5
 800177a:	2026      	movs	r0, #38	@ 0x26
 800177c:	f000 fe34 	bl	80023e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001780:	2026      	movs	r0, #38	@ 0x26
 8001782:	f000 fe4d 	bl	8002420 <HAL_NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	@ 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40013800 	.word	0x40013800
 8001794:	40021000 	.word	0x40021000
 8001798:	40004400 	.word	0x40004400

0800179c <modbus_crc16>:
// Function to calculate the CRC16 for Modbus RTU
// data: Pointer to the data array
// length: Length of the data array
// Returns the calculated CRC16 value
 uint16_t modbus_crc16(const uint8_t *data, uint16_t length)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF; // Initialize CRC to 0xFFFF
 80017a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ac:	81fb      	strh	r3, [r7, #14]

    // Loop through each byte in the data array
    for (uint16_t pos = 0; pos < length; pos++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	81bb      	strh	r3, [r7, #12]
 80017b2:	e026      	b.n	8001802 <modbus_crc16+0x66>
    {
        crc ^= (uint16_t)data[pos]; // XOR byte into least significant byte of CRC
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	89fb      	ldrh	r3, [r7, #14]
 80017c0:	4053      	eors	r3, r2
 80017c2:	81fb      	strh	r3, [r7, #14]

        // Loop through each bit in the current byte
        for (int i = 8; i != 0; i--)
 80017c4:	2308      	movs	r3, #8
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	e015      	b.n	80017f6 <modbus_crc16+0x5a>
        {
            // If the least significant bit is set
            if ((crc & 0x0001) != 0)
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00a      	beq.n	80017ea <modbus_crc16+0x4e>
            {
                crc >>= 1;     // Shift right
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001; // XOR with polynomial 0xA001
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80017e0:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80017e4:	43db      	mvns	r3, r3
 80017e6:	81fb      	strh	r3, [r7, #14]
 80017e8:	e002      	b.n	80017f0 <modbus_crc16+0x54>
            }
            else
            {
                crc >>= 1; // Just shift right
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	81fb      	strh	r3, [r7, #14]
        for (int i = 8; i != 0; i--)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1e6      	bne.n	80017ca <modbus_crc16+0x2e>
    for (uint16_t pos = 0; pos < length; pos++)
 80017fc:	89bb      	ldrh	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	81bb      	strh	r3, [r7, #12]
 8001802:	89ba      	ldrh	r2, [r7, #12]
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	429a      	cmp	r2, r3
 8001808:	d3d4      	bcc.n	80017b4 <modbus_crc16+0x18>
            }
        }
    }
    return crc; // Return the calculated CRC16 value
 800180a:	89fb      	ldrh	r3, [r7, #14]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <getModMasterFrameLen>:
#include "main.h"


// Function to calculate the length of the Modbus frame at the master end
uint16_t getModMasterFrameLen(const uint8_t *frame)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	 uint8_t function_code = frame[1];
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3301      	adds	r3, #1
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	73fb      	strb	r3, [r7, #15]

	    switch (function_code) {
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	3b01      	subs	r3, #1
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d839      	bhi.n	80018a4 <getModMasterFrameLen+0x8c>
 8001830:	a201      	add	r2, pc, #4	@ (adr r2, 8001838 <getModMasterFrameLen+0x20>)
 8001832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001836:	bf00      	nop
 8001838:	08001879 	.word	0x08001879
 800183c:	08001879 	.word	0x08001879
 8001840:	0800188b 	.word	0x0800188b
 8001844:	0800188b 	.word	0x0800188b
 8001848:	0800189d 	.word	0x0800189d
 800184c:	0800189d 	.word	0x0800189d
 8001850:	080018a5 	.word	0x080018a5
 8001854:	080018a5 	.word	0x080018a5
 8001858:	080018a5 	.word	0x080018a5
 800185c:	080018a5 	.word	0x080018a5
 8001860:	080018a5 	.word	0x080018a5
 8001864:	080018a5 	.word	0x080018a5
 8001868:	080018a5 	.word	0x080018a5
 800186c:	080018a5 	.word	0x080018a5
 8001870:	080018a1 	.word	0x080018a1
 8001874:	080018a1 	.word	0x080018a1
	        case 1: case 2: { // Read Coils, Read Discrete Inputs
	            uint8_t byte_count = frame[2];
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3302      	adds	r3, #2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	737b      	strb	r3, [r7, #13]
	            return 5 + byte_count;
 8001880:	7b7b      	ldrb	r3, [r7, #13]
 8001882:	b29b      	uxth	r3, r3
 8001884:	3305      	adds	r3, #5
 8001886:	b29b      	uxth	r3, r3
 8001888:	e00e      	b.n	80018a8 <getModMasterFrameLen+0x90>
	        }
	        case 3: case 4: { // Read Holding/Input Registers
	            uint8_t byte_count = frame[2];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3302      	adds	r3, #2
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	73bb      	strb	r3, [r7, #14]
	            return 5 + byte_count;
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	b29b      	uxth	r3, r3
 8001896:	3305      	adds	r3, #5
 8001898:	b29b      	uxth	r3, r3
 800189a:	e005      	b.n	80018a8 <getModMasterFrameLen+0x90>
	        }
	        case 5: case 6: // Write Single Coil/Register
	            return 8;
 800189c:	2308      	movs	r3, #8
 800189e:	e003      	b.n	80018a8 <getModMasterFrameLen+0x90>
	        case 15: case 16: // Write Multiple Coils/Registers
	            return 8;
 80018a0:	2308      	movs	r3, #8
 80018a2:	e001      	b.n	80018a8 <getModMasterFrameLen+0x90>
	        default:
	            return -1; // Unsupported function code
 80018a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
	    }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <modbusProcessResponse>:
// Function to process a Modbus response frame
// response: Pointer to the response frame buffer
// responseLength: Length of the response frame
// Returns: slave address if the response is successfully processed, 0 otherwise
uint8_t modbusProcessResponse(uint8_t *response, uint16_t responseLength, uint8_t *values, uint16_t *countOrAddress)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	460b      	mov	r3, r1
 80018c2:	817b      	strh	r3, [r7, #10]
    if (responseLength < 5) 
 80018c4:	897b      	ldrh	r3, [r7, #10]
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d805      	bhi.n	80018d6 <modbusProcessResponse+0x22>
    {
        // Minimum length for a valid Modbus response is 5 bytes
        printDebug("Invalid response length\n");
 80018ca:	4932      	ldr	r1, [pc, #200]	@ (8001994 <modbusProcessResponse+0xe0>)
 80018cc:	2004      	movs	r0, #4
 80018ce:	f7fe fde1 	bl	8000494 <myPrintf>
        return 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e059      	b.n	800198a <modbusProcessResponse+0xd6>
    }


    uint8_t slaveAddress = response[0];
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	75fb      	strb	r3, [r7, #23]
    uint8_t functionCode = response[1];
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	785b      	ldrb	r3, [r3, #1]
 80018e0:	75bb      	strb	r3, [r7, #22]
    uint16_t crcReceived = (uint16_t)response[responseLength - CRC_LENGTH] | ((uint16_t)response[responseLength - 1] << 8);
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	3b02      	subs	r3, #2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	897b      	ldrh	r3, [r7, #10]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	440b      	add	r3, r1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21b      	sxth	r3, r3
 8001900:	82bb      	strh	r3, [r7, #20]
    uint16_t crcCalculated = modbus_crc16(response, responseLength - 2);
 8001902:	897b      	ldrh	r3, [r7, #10]
 8001904:	3b02      	subs	r3, #2
 8001906:	4619      	mov	r1, r3
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f7ff ff47 	bl	800179c <modbus_crc16>
 800190e:	4603      	mov	r3, r0
 8001910:	827b      	strh	r3, [r7, #18]

    printDebug("receivedCRC=%04X calculatedCRC=%04X\n", crcReceived, crcCalculated);
 8001912:	8aba      	ldrh	r2, [r7, #20]
 8001914:	8a7b      	ldrh	r3, [r7, #18]
 8001916:	4920      	ldr	r1, [pc, #128]	@ (8001998 <modbusProcessResponse+0xe4>)
 8001918:	2004      	movs	r0, #4
 800191a:	f7fe fdbb 	bl	8000494 <myPrintf>
    
    if (crcReceived != crcCalculated) 
 800191e:	8aba      	ldrh	r2, [r7, #20]
 8001920:	8a7b      	ldrh	r3, [r7, #18]
 8001922:	429a      	cmp	r2, r3
 8001924:	d005      	beq.n	8001932 <modbusProcessResponse+0x7e>
    {
        // CRC check failed
        printDebug("CRC check failed\n");
 8001926:	491d      	ldr	r1, [pc, #116]	@ (800199c <modbusProcessResponse+0xe8>)
 8001928:	2004      	movs	r0, #4
 800192a:	f7fe fdb3 	bl	8000494 <myPrintf>
        return 0;
 800192e:	2300      	movs	r3, #0
 8001930:	e02b      	b.n	800198a <modbusProcessResponse+0xd6>
    }

    printDebug("functionCode=%d\n", functionCode);
 8001932:	7dbb      	ldrb	r3, [r7, #22]
 8001934:	461a      	mov	r2, r3
 8001936:	491a      	ldr	r1, [pc, #104]	@ (80019a0 <modbusProcessResponse+0xec>)
 8001938:	2004      	movs	r0, #4
 800193a:	f7fe fdab 	bl	8000494 <myPrintf>

    // Process the response based on the function code
    switch (functionCode)
 800193e:	7dbb      	ldrb	r3, [r7, #22]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d002      	beq.n	800194a <modbusProcessResponse+0x96>
 8001944:	2b10      	cmp	r3, #16
 8001946:	d00c      	beq.n	8001962 <modbusProcessResponse+0xae>
 8001948:	e01c      	b.n	8001984 <modbusProcessResponse+0xd0>
    {

    case 0x02: // Read Discrete Inputs
        // Extract the byte count
        countOrAddress = response[2];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3302      	adds	r3, #2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	603b      	str	r3, [r7, #0]
        memcpy(values, response + 3,countOrAddress);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3303      	adds	r3, #3
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f006 fef6 	bl	800874c <memcpy>
        break;
 8001960:	e012      	b.n	8001988 <modbusProcessResponse+0xd4>
        
    case 0x10: // Write Multiple Registers

        // Extract the address
        countOrAddress = response[2] | (response[3] << 8);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3302      	adds	r3, #2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3303      	adds	r3, #3
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	4313      	orrs	r3, r2
 8001974:	603b      	str	r3, [r7, #0]
        memcpy(values, response + 3,2); // Skip address and send quantity fields pointer
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3303      	adds	r3, #3
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	801a      	strh	r2, [r3, #0]
        break;
 8001982:	e001      	b.n	8001988 <modbusProcessResponse+0xd4>
        
    default:
        // Unsupported function code
        return 0;
 8001984:	2300      	movs	r3, #0
 8001986:	e000      	b.n	800198a <modbusProcessResponse+0xd6>
    }

    return slaveAddress; // Indicate successful processing
 8001988:	7dfb      	ldrb	r3, [r7, #23]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08009a48 	.word	0x08009a48
 8001998:	08009a68 	.word	0x08009a68
 800199c:	08009a94 	.word	0x08009a94
 80019a0:	08009ab0 	.word	0x08009ab0

080019a4 <form_modbus_request_frame>:
// functionCode: Function code
// startAddress: Starting address
// numItems: Number of items (registers or coils)
// values: Array of values (for write operations)
static uint16_t form_modbus_request_frame(uint8_t *frame, uint8_t slaveID, uint8_t functionCode, uint16_t startAddress, uint16_t numItems, const uint8_t *values)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	70fb      	strb	r3, [r7, #3]
 80019b6:	460b      	mov	r3, r1
 80019b8:	70bb      	strb	r3, [r7, #2]
 80019ba:	4613      	mov	r3, r2
 80019bc:	803b      	strh	r3, [r7, #0]
    frame[0] = slaveID;                    // Slave ID
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	701a      	strb	r2, [r3, #0]
    frame[1] = functionCode;               // Function code
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	78ba      	ldrb	r2, [r7, #2]
 80019ca:	701a      	strb	r2, [r3, #0]
    frame[2] = (startAddress >> 8) & 0xFF; // Start address high byte
 80019cc:	883b      	ldrh	r3, [r7, #0]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3302      	adds	r3, #2
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]
    frame[3] = startAddress & 0xFF;        // Start address low byte
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3303      	adds	r3, #3
 80019de:	883a      	ldrh	r2, [r7, #0]
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]

    uint16_t frameLength = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	81fb      	strh	r3, [r7, #14]
    uint16_t crc;
   
    if (functionCode == WRITE_MULTIPLE_REGISTERS)
 80019e8:	78bb      	ldrb	r3, [r7, #2]
 80019ea:	2b10      	cmp	r3, #16
 80019ec:	d159      	bne.n	8001aa2 <form_modbus_request_frame+0xfe>
    {
        frame[4] = (numItems >> 8) & 0xFF; // Number of items high byte
 80019ee:	8b3b      	ldrh	r3, [r7, #24]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]
        frame[5] = numItems & 0xFF;        // Number of items low byte
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3305      	adds	r3, #5
 8001a00:	8b3a      	ldrh	r2, [r7, #24]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]
        frame[6] = numItems * 2;           // Byte count for register values
 8001a06:	8b3b      	ldrh	r3, [r7, #24]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3306      	adds	r3, #6
 8001a0e:	0052      	lsls	r2, r2, #1
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]

        // Add the register values to the frame
        for (uint16_t i = 0; i < numItems; i++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	817b      	strh	r3, [r7, #10]
 8001a18:	e01c      	b.n	8001a54 <form_modbus_request_frame+0xb0>
        {
            frame[7 + (i * 2)] = values[i * 2 + 1];     // Register value high byte
 8001a1a:	897b      	ldrh	r3, [r7, #10]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	3301      	adds	r3, #1
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	441a      	add	r2, r3
 8001a24:	897b      	ldrh	r3, [r7, #10]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	3307      	adds	r3, #7
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	440b      	add	r3, r1
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	701a      	strb	r2, [r3, #0]
            frame[8 + (i * 2)] = values[i * 2]; // Register value low byte
 8001a34:	897b      	ldrh	r3, [r7, #10]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	461a      	mov	r2, r3
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	441a      	add	r2, r3
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	3304      	adds	r3, #4
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4619      	mov	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	440b      	add	r3, r1
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < numItems; i++)
 8001a4e:	897b      	ldrh	r3, [r7, #10]
 8001a50:	3301      	adds	r3, #1
 8001a52:	817b      	strh	r3, [r7, #10]
 8001a54:	897a      	ldrh	r2, [r7, #10]
 8001a56:	8b3b      	ldrh	r3, [r7, #24]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d3de      	bcc.n	8001a1a <form_modbus_request_frame+0x76>
        }

        // Calculate the CRC for the frame
        crc = modbus_crc16(frame, 7 + (numItems * 2));
 8001a5c:	8b3b      	ldrh	r3, [r7, #24]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	3307      	adds	r3, #7
 8001a62:	4619      	mov	r1, r3
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fe99 	bl	800179c <modbus_crc16>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	81bb      	strh	r3, [r7, #12]
        frame[7 + (numItems * 2)] = crc & 0xFF;        // CRC low byte
 8001a6e:	8b3b      	ldrh	r3, [r7, #24]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	3307      	adds	r3, #7
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	89ba      	ldrh	r2, [r7, #12]
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
        frame[8 + (numItems * 2)] = (crc >> 8) & 0xFF; // CRC high byte
 8001a80:	89bb      	ldrh	r3, [r7, #12]
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	8b3b      	ldrh	r3, [r7, #24]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	440b      	add	r3, r1
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

        frameLength = 9 + (numItems * 2);
 8001a96:	8b3b      	ldrh	r3, [r7, #24]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3309      	adds	r3, #9
 8001a9e:	81fb      	strh	r3, [r7, #14]
 8001aa0:	e01f      	b.n	8001ae2 <form_modbus_request_frame+0x13e>
    }

    else
    {
        // For read operations
        frame[4] = (numItems >> 8) & 0xFF; // Number of items high byte
 8001aa2:	8b3b      	ldrh	r3, [r7, #24]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
        frame[5] = numItems & 0xFF;        // Number of items low byte
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3305      	adds	r3, #5
 8001ab4:	8b3a      	ldrh	r2, [r7, #24]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

        // Calculate the CRC for the frame
        crc = modbus_crc16(frame, 6);
 8001aba:	2106      	movs	r1, #6
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fe6d 	bl	800179c <modbus_crc16>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	81bb      	strh	r3, [r7, #12]
        frame[6] = crc & 0xFF;        // CRC low byte
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3306      	adds	r3, #6
 8001aca:	89ba      	ldrh	r2, [r7, #12]
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]
        frame[7] = (crc >> 8) & 0xFF; // CRC high byte
 8001ad0:	89bb      	ldrh	r3, [r7, #12]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3307      	adds	r3, #7
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

        frameLength = 8;
 8001ade:	2308      	movs	r3, #8
 8001ae0:	81fb      	strh	r3, [r7, #14]
    }

    printDebug("crc=%04X\n", crc);
 8001ae2:	89bb      	ldrh	r3, [r7, #12]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4904      	ldr	r1, [pc, #16]	@ (8001af8 <form_modbus_request_frame+0x154>)
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f7fe fcd3 	bl	8000494 <myPrintf>

    return frameLength;
 8001aee:	89fb      	ldrh	r3, [r7, #14]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	08009ac8 	.word	0x08009ac8

08001afc <writeRegisters>:



void writeRegisters(uint8_t slaveID, uint16_t address, uint16_t *values, uint16_t numRegisters)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b092      	sub	sp, #72	@ 0x48
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60ba      	str	r2, [r7, #8]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	81bb      	strh	r3, [r7, #12]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]
    uint8_t frame[40] = {0};
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	f107 0318 	add.w	r3, r7, #24
 8001b1a:	2224      	movs	r2, #36	@ 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f006 fd68 	bl	80085f4 <memset>
    uint8_t frameLen = form_modbus_request_frame(frame, slaveID, WRITE_MULTIPLE_REGISTERS, address - HOLDING_REGISTERS_START_ADDRESS, numRegisters, (uint8_t *)values);
 8001b24:	89bb      	ldrh	r3, [r7, #12]
 8001b26:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8001b2a:	333f      	adds	r3, #63	@ 0x3f
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	7bf9      	ldrb	r1, [r7, #15]
 8001b30:	f107 0014 	add.w	r0, r7, #20
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	2210      	movs	r2, #16
 8001b40:	f7ff ff30 	bl	80019a4 <form_modbus_request_frame>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    RS485_Transmit(frame, frameLen);
 8001b4a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd69 	bl	800062c <RS485_Transmit>
}
 8001b5a:	bf00      	nop
 8001b5c:	3740      	adds	r7, #64	@ 0x40
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <requestDiscreteInputs>:

void requestDiscreteInputs(uint8_t slaveID, uint16_t address, uint16_t numInputs)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b08a      	sub	sp, #40	@ 0x28
 8001b66:	af02      	add	r7, sp, #8
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	80bb      	strh	r3, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	807b      	strh	r3, [r7, #2]
    uint8_t frame[16] = {0};
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
    uint8_t frameLen = form_modbus_request_frame(frame, slaveID, READ_DISCRETE_INPUTS, address - DISCRETE_INPUTS_START_ADDRESS, numInputs, NULL);
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001b8a:	3b11      	subs	r3, #17
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	79f9      	ldrb	r1, [r7, #7]
 8001b90:	f107 000c 	add.w	r0, r7, #12
 8001b94:	2300      	movs	r3, #0
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f7ff ff00 	bl	80019a4 <form_modbus_request_frame>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	77fb      	strb	r3, [r7, #31]
    RS485_Transmit(frame, frameLen);
 8001ba8:	7ffa      	ldrb	r2, [r7, #31]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fd3b 	bl	800062c <RS485_Transmit>
}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af04      	add	r7, sp, #16
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	1dfb      	adds	r3, r7, #7
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2301      	movs	r3, #1
 8001be6:	2200      	movs	r2, #0
 8001be8:	2178      	movs	r1, #120	@ 0x78
 8001bea:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <ssd1306_WriteCommand+0x2c>)
 8001bec:	f001 f906 	bl	8002dfc <HAL_I2C_Mem_Write>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000760 	.word	0x20000760

08001bfc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af04      	add	r7, sp, #16
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0e:	9202      	str	r2, [sp, #8]
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2301      	movs	r3, #1
 8001c18:	2240      	movs	r2, #64	@ 0x40
 8001c1a:	2178      	movs	r1, #120	@ 0x78
 8001c1c:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <ssd1306_WriteData+0x30>)
 8001c1e:	f001 f8ed 	bl	8002dfc <HAL_I2C_Mem_Write>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000760 	.word	0x20000760

08001c30 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c34:	f7ff ffc3 	bl	8001bbe <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c38:	2064      	movs	r0, #100	@ 0x64
 8001c3a:	f000 faf9 	bl	8002230 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 fa78 	bl	8002134 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c44:	2020      	movs	r0, #32
 8001c46:	f7ff ffc1 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff ffbe 	bl	8001bcc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c50:	20b0      	movs	r0, #176	@ 0xb0
 8001c52:	f7ff ffbb 	bl	8001bcc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c56:	20c8      	movs	r0, #200	@ 0xc8
 8001c58:	f7ff ffb8 	bl	8001bcc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff ffb5 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c62:	2010      	movs	r0, #16
 8001c64:	f7ff ffb2 	bl	8001bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c68:	2040      	movs	r0, #64	@ 0x40
 8001c6a:	f7ff ffaf 	bl	8001bcc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c6e:	20ff      	movs	r0, #255	@ 0xff
 8001c70:	f000 fa4d 	bl	800210e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c74:	20a1      	movs	r0, #161	@ 0xa1
 8001c76:	f7ff ffa9 	bl	8001bcc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c7a:	20a6      	movs	r0, #166	@ 0xa6
 8001c7c:	f7ff ffa6 	bl	8001bcc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c80:	20a8      	movs	r0, #168	@ 0xa8
 8001c82:	f7ff ffa3 	bl	8001bcc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c86:	203f      	movs	r0, #63	@ 0x3f
 8001c88:	f7ff ffa0 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c8c:	20a4      	movs	r0, #164	@ 0xa4
 8001c8e:	f7ff ff9d 	bl	8001bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c92:	20d3      	movs	r0, #211	@ 0xd3
 8001c94:	f7ff ff9a 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff ff97 	bl	8001bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c9e:	20d5      	movs	r0, #213	@ 0xd5
 8001ca0:	f7ff ff94 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ca4:	20f0      	movs	r0, #240	@ 0xf0
 8001ca6:	f7ff ff91 	bl	8001bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001caa:	20d9      	movs	r0, #217	@ 0xd9
 8001cac:	f7ff ff8e 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001cb0:	2022      	movs	r0, #34	@ 0x22
 8001cb2:	f7ff ff8b 	bl	8001bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001cb6:	20da      	movs	r0, #218	@ 0xda
 8001cb8:	f7ff ff88 	bl	8001bcc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001cbc:	2012      	movs	r0, #18
 8001cbe:	f7ff ff85 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cc2:	20db      	movs	r0, #219	@ 0xdb
 8001cc4:	f7ff ff82 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001cc8:	2020      	movs	r0, #32
 8001cca:	f7ff ff7f 	bl	8001bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cce:	208d      	movs	r0, #141	@ 0x8d
 8001cd0:	f7ff ff7c 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001cd4:	2014      	movs	r0, #20
 8001cd6:	f7ff ff79 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 fa2a 	bl	8002134 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f000 f80f 	bl	8001d04 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ce6:	f000 f825 	bl	8001d34 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cea:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <ssd1306_Init+0xd0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <ssd1306_Init+0xd0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001cf6:	4b02      	ldr	r3, [pc, #8]	@ (8001d00 <ssd1306_Init+0xd0>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	711a      	strb	r2, [r3, #4]
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000d34 	.word	0x20000d34

08001d04 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <ssd1306_Fill+0x14>
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <ssd1306_Fill+0x16>
 8001d18:	23ff      	movs	r3, #255	@ 0xff
 8001d1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <ssd1306_Fill+0x2c>)
 8001d22:	f006 fc67 	bl	80085f4 <memset>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000934 	.word	0x20000934

08001d34 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	e016      	b.n	8001d6e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	3b50      	subs	r3, #80	@ 0x50
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff40 	bl	8001bcc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff ff3d 	bl	8001bcc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d52:	2010      	movs	r0, #16
 8001d54:	f7ff ff3a 	bl	8001bcc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	01db      	lsls	r3, r3, #7
 8001d5c:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <ssd1306_UpdateScreen+0x4c>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	2180      	movs	r1, #128	@ 0x80
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff4a 	bl	8001bfc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b07      	cmp	r3, #7
 8001d72:	d9e5      	bls.n	8001d40 <ssd1306_UpdateScreen+0xc>
    }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000934 	.word	0x20000934

08001d84 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	71bb      	strb	r3, [r7, #6]
 8001d92:	4613      	mov	r3, r2
 8001d94:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db3d      	blt.n	8001e1a <ssd1306_DrawPixel+0x96>
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001da2:	d83a      	bhi.n	8001e1a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001da4:	797b      	ldrb	r3, [r7, #5]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d11a      	bne.n	8001de0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001daa:	79fa      	ldrb	r2, [r7, #7]
 8001dac:	79bb      	ldrb	r3, [r7, #6]
 8001dae:	08db      	lsrs	r3, r3, #3
 8001db0:	b2d8      	uxtb	r0, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	01db      	lsls	r3, r3, #7
 8001db6:	4413      	add	r3, r2
 8001db8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <ssd1306_DrawPixel+0xa4>)
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	b25a      	sxtb	r2, r3
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	b259      	sxtb	r1, r3
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	01db      	lsls	r3, r3, #7
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2c9      	uxtb	r1, r1
 8001dda:	4a13      	ldr	r2, [pc, #76]	@ (8001e28 <ssd1306_DrawPixel+0xa4>)
 8001ddc:	54d1      	strb	r1, [r2, r3]
 8001dde:	e01d      	b.n	8001e1c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	b2d8      	uxtb	r0, r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	01db      	lsls	r3, r3, #7
 8001dec:	4413      	add	r3, r2
 8001dee:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <ssd1306_DrawPixel+0xa4>)
 8001df0:	5cd3      	ldrb	r3, [r2, r3]
 8001df2:	b25a      	sxtb	r2, r3
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	4013      	ands	r3, r2
 8001e08:	b259      	sxtb	r1, r3
 8001e0a:	79fa      	ldrb	r2, [r7, #7]
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	01db      	lsls	r3, r3, #7
 8001e10:	4413      	add	r3, r2
 8001e12:	b2c9      	uxtb	r1, r1
 8001e14:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <ssd1306_DrawPixel+0xa4>)
 8001e16:	54d1      	strb	r1, [r2, r3]
 8001e18:	e000      	b.n	8001e1c <ssd1306_DrawPixel+0x98>
        return;
 8001e1a:	bf00      	nop
    }
}
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000934 	.word	0x20000934

08001e2c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4604      	mov	r4, r0
 8001e34:	4638      	mov	r0, r7
 8001e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b1f      	cmp	r3, #31
 8001e42:	d902      	bls.n	8001e4a <ssd1306_WriteChar+0x1e>
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e48:	d901      	bls.n	8001e4e <ssd1306_WriteChar+0x22>
        return 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e077      	b.n	8001f3e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f48 <ssd1306_WriteChar+0x11c>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	783b      	ldrb	r3, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	2b80      	cmp	r3, #128	@ 0x80
 8001e5a:	dc06      	bgt.n	8001e6a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <ssd1306_WriteChar+0x11c>)
 8001e5e:	885b      	ldrh	r3, [r3, #2]
 8001e60:	461a      	mov	r2, r3
 8001e62:	787b      	ldrb	r3, [r7, #1]
 8001e64:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001e66:	2b40      	cmp	r3, #64	@ 0x40
 8001e68:	dd01      	ble.n	8001e6e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e067      	b.n	8001f3e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e04e      	b.n	8001f12 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	3b20      	subs	r3, #32
 8001e7a:	7879      	ldrb	r1, [r7, #1]
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	440b      	add	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	e036      	b.n	8001f02 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ea4:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <ssd1306_WriteChar+0x11c>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	b2d8      	uxtb	r0, r3
 8001eb2:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <ssd1306_WriteChar+0x11c>)
 8001eb4:	885b      	ldrh	r3, [r3, #2]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <ssd1306_DrawPixel>
 8001eca:	e017      	b.n	8001efc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <ssd1306_WriteChar+0x11c>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2d8      	uxtb	r0, r3
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <ssd1306_WriteChar+0x11c>)
 8001edc:	885b      	ldrh	r3, [r3, #2]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2d9      	uxtb	r1, r3
 8001ee8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7ff ff44 	bl	8001d84 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	3301      	adds	r3, #1
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	783b      	ldrb	r3, [r7, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d3c3      	bcc.n	8001e94 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	787b      	ldrb	r3, [r7, #1]
 8001f14:	461a      	mov	r2, r3
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d3ab      	bcc.n	8001e74 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <ssd1306_WriteChar+0x11c>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	d005      	beq.n	8001f32 <ssd1306_WriteChar+0x106>
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	3a20      	subs	r2, #32
 8001f2c:	440a      	add	r2, r1
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	e000      	b.n	8001f34 <ssd1306_WriteChar+0x108>
 8001f32:	783a      	ldrb	r2, [r7, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <ssd1306_WriteChar+0x11c>)
 8001f3a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd90      	pop	{r4, r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000d34 	.word	0x20000d34

08001f4c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	4638      	mov	r0, r7
 8001f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001f5a:	e013      	b.n	8001f84 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	7818      	ldrb	r0, [r3, #0]
 8001f60:	7e3b      	ldrb	r3, [r7, #24]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	463b      	mov	r3, r7
 8001f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f68:	f7ff ff60 	bl	8001e2c <ssd1306_WriteChar>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d002      	beq.n	8001f7e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	e008      	b.n	8001f90 <ssd1306_WriteString+0x44>
        }
        str++;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3301      	adds	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e7      	bne.n	8001f5c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460a      	mov	r2, r1
 8001fa2:	71fb      	strb	r3, [r7, #7]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <ssd1306_SetCursor+0x2c>)
 8001fae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001fb0:	79bb      	ldrb	r3, [r7, #6]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b03      	ldr	r3, [pc, #12]	@ (8001fc4 <ssd1306_SetCursor+0x2c>)
 8001fb6:	805a      	strh	r2, [r3, #2]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	20000d34 	.word	0x20000d34

08001fc8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b089      	sub	sp, #36	@ 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4604      	mov	r4, r0
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71bb      	strb	r3, [r7, #6]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	717b      	strb	r3, [r7, #5]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001fe6:	797a      	ldrb	r2, [r7, #5]
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bfb8      	it	lt
 8001ff0:	425b      	neglt	r3, r3
 8001ff2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001ff4:	793a      	ldrb	r2, [r7, #4]
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bfb8      	it	lt
 8001ffe:	425b      	neglt	r3, r3
 8002000:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	797b      	ldrb	r3, [r7, #5]
 8002006:	429a      	cmp	r2, r3
 8002008:	d201      	bcs.n	800200e <ssd1306_Line+0x46>
 800200a:	2301      	movs	r3, #1
 800200c:	e001      	b.n	8002012 <ssd1306_Line+0x4a>
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002014:	79ba      	ldrb	r2, [r7, #6]
 8002016:	793b      	ldrb	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	d201      	bcs.n	8002020 <ssd1306_Line+0x58>
 800201c:	2301      	movs	r3, #1
 800201e:	e001      	b.n	8002024 <ssd1306_Line+0x5c>
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800202e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002032:	7939      	ldrb	r1, [r7, #4]
 8002034:	797b      	ldrb	r3, [r7, #5]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fea4 	bl	8001d84 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800203c:	e024      	b.n	8002088 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800203e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002042:	79b9      	ldrb	r1, [r7, #6]
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fe9c 	bl	8001d84 <ssd1306_DrawPixel>
        error2 = error * 2;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	425b      	negs	r3, r3
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	429a      	cmp	r2, r3
 800205a:	dd08      	ble.n	800206e <ssd1306_Line+0xa6>
            error -= deltaY;
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	4413      	add	r3, r2
 800206c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	429a      	cmp	r2, r3
 8002074:	da08      	bge.n	8002088 <ssd1306_Line+0xc0>
            error += deltaX;
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	4413      	add	r3, r2
 800207c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	4413      	add	r3, r2
 8002086:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002088:	79fa      	ldrb	r2, [r7, #7]
 800208a:	797b      	ldrb	r3, [r7, #5]
 800208c:	429a      	cmp	r2, r3
 800208e:	d1d6      	bne.n	800203e <ssd1306_Line+0x76>
 8002090:	79ba      	ldrb	r2, [r7, #6]
 8002092:	793b      	ldrb	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	d1d2      	bne.n	800203e <ssd1306_Line+0x76>
        }
    }
    return;
 8002098:	bf00      	nop
}
 800209a:	3724      	adds	r7, #36	@ 0x24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}

080020a0 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	4604      	mov	r4, r0
 80020a8:	4608      	mov	r0, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	461a      	mov	r2, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	71fb      	strb	r3, [r7, #7]
 80020b2:	4603      	mov	r3, r0
 80020b4:	71bb      	strb	r3, [r7, #6]
 80020b6:	460b      	mov	r3, r1
 80020b8:	717b      	strb	r3, [r7, #5]
 80020ba:	4613      	mov	r3, r2
 80020bc:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80020be:	79bc      	ldrb	r4, [r7, #6]
 80020c0:	797a      	ldrb	r2, [r7, #5]
 80020c2:	79b9      	ldrb	r1, [r7, #6]
 80020c4:	79f8      	ldrb	r0, [r7, #7]
 80020c6:	7e3b      	ldrb	r3, [r7, #24]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	4623      	mov	r3, r4
 80020cc:	f7ff ff7c 	bl	8001fc8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80020d0:	793c      	ldrb	r4, [r7, #4]
 80020d2:	797a      	ldrb	r2, [r7, #5]
 80020d4:	79b9      	ldrb	r1, [r7, #6]
 80020d6:	7978      	ldrb	r0, [r7, #5]
 80020d8:	7e3b      	ldrb	r3, [r7, #24]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4623      	mov	r3, r4
 80020de:	f7ff ff73 	bl	8001fc8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80020e2:	793c      	ldrb	r4, [r7, #4]
 80020e4:	79fa      	ldrb	r2, [r7, #7]
 80020e6:	7939      	ldrb	r1, [r7, #4]
 80020e8:	7978      	ldrb	r0, [r7, #5]
 80020ea:	7e3b      	ldrb	r3, [r7, #24]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4623      	mov	r3, r4
 80020f0:	f7ff ff6a 	bl	8001fc8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80020f4:	79bc      	ldrb	r4, [r7, #6]
 80020f6:	79fa      	ldrb	r2, [r7, #7]
 80020f8:	7939      	ldrb	r1, [r7, #4]
 80020fa:	79f8      	ldrb	r0, [r7, #7]
 80020fc:	7e3b      	ldrb	r3, [r7, #24]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4623      	mov	r3, r4
 8002102:	f7ff ff61 	bl	8001fc8 <ssd1306_Line>

    return;
 8002106:	bf00      	nop
}
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}

0800210e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002118:	2381      	movs	r3, #129	@ 0x81
 800211a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fd54 	bl	8001bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fd50 	bl	8001bcc <ssd1306_WriteCommand>
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002144:	23af      	movs	r3, #175	@ 0xaf
 8002146:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <ssd1306_SetDisplayOn+0x38>)
 800214a:	2201      	movs	r2, #1
 800214c:	715a      	strb	r2, [r3, #5]
 800214e:	e004      	b.n	800215a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002150:	23ae      	movs	r3, #174	@ 0xae
 8002152:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <ssd1306_SetDisplayOn+0x38>)
 8002156:	2200      	movs	r2, #0
 8002158:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fd35 	bl	8001bcc <ssd1306_WriteCommand>
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000d34 	.word	0x20000d34

08002170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002174:	f7ff fa1a 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	@ (80021ac <LoopForever+0x6>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	@ (80021b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <LoopForever+0xe>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	@ (80021bc <LoopForever+0x16>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219e:	f006 faaf 	bl	8008700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021a2:	f7fe fe67 	bl	8000e74 <main>

080021a6 <LoopForever>:

LoopForever:
    b LoopForever
 80021a6:	e7fe      	b.n	80021a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80021b4:	0800a284 	.word	0x0800a284
  ldr r2, =_sbss
 80021b8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80021bc:	2000278c 	.word	0x2000278c

080021c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_2_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_Init+0x28>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_Init+0x28>)
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 f8fc 	bl	80023d2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	200f      	movs	r0, #15
 80021dc:	f7ff f900 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff f8d6 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000

080021f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	2000000c 	.word	0x2000000c
 8002214:	20000d3c 	.word	0x20000d3c

08002218 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;  
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000d3c 	.word	0x20000d3c

08002230 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff ffee 	bl	8002218 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffde 	bl	8002218 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000000c 	.word	0x2000000c

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	@ (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	@ (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	@ (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	@ 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ff4c 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fa:	f7ff ff61 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 80023fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	6978      	ldr	r0, [r7, #20]
 8002406:	f7ff ffb1 	bl	800236c <NVIC_EncodePriority>
 800240a:	4602      	mov	r2, r0
 800240c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff80 	bl	8002318 <__NVIC_SetPriority>
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff54 	bl	80022dc <__NVIC_EnableIRQ>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e02e      	b.n	80024ac <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002454:	2b02      	cmp	r3, #2
 8002456:	d008      	beq.n	800246a <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2204      	movs	r2, #4
 800245c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e020      	b.n	80024ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 020e 	bic.w	r2, r2, #14
 8002478:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d005      	beq.n	80024da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2204      	movs	r2, #4
 80024d2:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e027      	b.n	800252a <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 020e 	bic.w	r2, r2, #14
 80024e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
    }
  }
  return status;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002542:	e14e      	b.n	80027e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8140 	beq.w	80027dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d005      	beq.n	8002574 <HAL_GPIO_Init+0x40>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d130      	bne.n	80025d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025aa:	2201      	movs	r2, #1
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 0201 	and.w	r2, r3, #1
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d017      	beq.n	8002612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	2203      	movs	r2, #3
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d123      	bne.n	8002666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	6939      	ldr	r1, [r7, #16]
 8002662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0203 	and.w	r2, r3, #3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 809a 	beq.w	80027dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a8:	4b55      	ldr	r3, [pc, #340]	@ (8002800 <HAL_GPIO_Init+0x2cc>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a54      	ldr	r2, [pc, #336]	@ (8002800 <HAL_GPIO_Init+0x2cc>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b52      	ldr	r3, [pc, #328]	@ (8002800 <HAL_GPIO_Init+0x2cc>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026c0:	4a50      	ldr	r2, [pc, #320]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026ea:	d013      	beq.n	8002714 <HAL_GPIO_Init+0x1e0>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a46      	ldr	r2, [pc, #280]	@ (8002808 <HAL_GPIO_Init+0x2d4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00d      	beq.n	8002710 <HAL_GPIO_Init+0x1dc>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a45      	ldr	r2, [pc, #276]	@ (800280c <HAL_GPIO_Init+0x2d8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <HAL_GPIO_Init+0x1d8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a44      	ldr	r2, [pc, #272]	@ (8002810 <HAL_GPIO_Init+0x2dc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_GPIO_Init+0x1d4>
 8002704:	2303      	movs	r3, #3
 8002706:	e006      	b.n	8002716 <HAL_GPIO_Init+0x1e2>
 8002708:	2305      	movs	r3, #5
 800270a:	e004      	b.n	8002716 <HAL_GPIO_Init+0x1e2>
 800270c:	2302      	movs	r3, #2
 800270e:	e002      	b.n	8002716 <HAL_GPIO_Init+0x1e2>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_GPIO_Init+0x1e2>
 8002714:	2300      	movs	r3, #0
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	f002 0203 	and.w	r2, r2, #3
 800271c:	0092      	lsls	r2, r2, #2
 800271e:	4093      	lsls	r3, r2
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002726:	4937      	ldr	r1, [pc, #220]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002734:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <HAL_GPIO_Init+0x2e0>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002758:	4a2e      	ldr	r2, [pc, #184]	@ (8002814 <HAL_GPIO_Init+0x2e0>)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275e:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_GPIO_Init+0x2e0>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002782:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_GPIO_Init+0x2e0>)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002788:	4b22      	ldr	r3, [pc, #136]	@ (8002814 <HAL_GPIO_Init+0x2e0>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027ac:	4a19      	ldr	r2, [pc, #100]	@ (8002814 <HAL_GPIO_Init+0x2e0>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b2:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <HAL_GPIO_Init+0x2e0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <HAL_GPIO_Init+0x2e0>)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3301      	adds	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f47f aea9 	bne.w	8002544 <HAL_GPIO_Init+0x10>
  }
}
 80027f2:	bf00      	nop
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40021000 	.word	0x40021000
 8002804:	40010000 	.word	0x40010000
 8002808:	48000400 	.word	0x48000400
 800280c:	48000800 	.word	0x48000800
 8002810:	48000c00 	.word	0x48000c00
 8002814:	40010400 	.word	0x40010400

08002818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e001      	b.n	800283a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002864:	e002      	b.n	800286c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002882:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe46 	bl	8000528 <HAL_GPIO_EXTI_Callback>
  }
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e08d      	b.n	80029d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fa8c 	bl	8000dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	@ 0x24
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002908:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e006      	b.n	8002930 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800292e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d108      	bne.n	800294a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	e007      	b.n	800295a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800296c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800297c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1a      	ldr	r2, [r3, #32]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	461a      	mov	r2, r3
 80029ec:	460b      	mov	r3, r1
 80029ee:	817b      	strh	r3, [r7, #10]
 80029f0:	4613      	mov	r3, r2
 80029f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f040 80fd 	bne.w	8002bfc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_I2C_Master_Transmit+0x30>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e0f6      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x21e>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a18:	f7ff fbfe 	bl	8002218 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2319      	movs	r3, #25
 8002a24:	2201      	movs	r2, #1
 8002a26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fb72 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0e1      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2221      	movs	r2, #33	@ 0x21
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2210      	movs	r2, #16
 8002a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	893a      	ldrh	r2, [r7, #8]
 8002a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2bff      	cmp	r3, #255	@ 0xff
 8002a6a:	d906      	bls.n	8002a7a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	22ff      	movs	r2, #255	@ 0xff
 8002a70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	e007      	b.n	8002a8a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a88:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d024      	beq.n	8002adc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	781a      	ldrb	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	8979      	ldrh	r1, [r7, #10]
 8002ace:	4b4e      	ldr	r3, [pc, #312]	@ (8002c08 <HAL_I2C_Master_Transmit+0x228>)
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fd6d 	bl	80035b4 <I2C_TransferConfig>
 8002ada:	e066      	b.n	8002baa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	8979      	ldrh	r1, [r7, #10]
 8002ae4:	4b48      	ldr	r3, [pc, #288]	@ (8002c08 <HAL_I2C_Master_Transmit+0x228>)
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fd62 	bl	80035b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002af0:	e05b      	b.n	8002baa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	6a39      	ldr	r1, [r7, #32]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fb65 	bl	80031c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07b      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d034      	beq.n	8002baa <HAL_I2C_Master_Transmit+0x1ca>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d130      	bne.n	8002baa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2180      	movs	r1, #128	@ 0x80
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fade 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e04d      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2bff      	cmp	r3, #255	@ 0xff
 8002b6a:	d90e      	bls.n	8002b8a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	22ff      	movs	r2, #255	@ 0xff
 8002b70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fd16 	bl	80035b4 <I2C_TransferConfig>
 8002b88:	e00f      	b.n	8002baa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fd05 	bl	80035b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d19e      	bne.n	8002af2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	6a39      	ldr	r1, [r7, #32]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fb4b 	bl	8003254 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e01a      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <HAL_I2C_Master_Transmit+0x22c>)
 8002bdc:	400b      	ands	r3, r1
 8002bde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	80002000 	.word	0x80002000
 8002c0c:	fe00e800 	.word	0xfe00e800

08002c10 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
 8002c20:	4613      	mov	r3, r2
 8002c22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	f040 80db 	bne.w	8002de8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2C_Master_Receive+0x30>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0d4      	b.n	8002dea <HAL_I2C_Master_Receive+0x1da>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c48:	f7ff fae6 	bl	8002218 <HAL_GetTick>
 8002c4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2319      	movs	r3, #25
 8002c54:	2201      	movs	r2, #1
 8002c56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fa5a 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0bf      	b.n	8002dea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2222      	movs	r2, #34	@ 0x22
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2210      	movs	r2, #16
 8002c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2bff      	cmp	r3, #255	@ 0xff
 8002c9a:	d90e      	bls.n	8002cba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	8979      	ldrh	r1, [r7, #10]
 8002caa:	4b52      	ldr	r3, [pc, #328]	@ (8002df4 <HAL_I2C_Master_Receive+0x1e4>)
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fc7e 	bl	80035b4 <I2C_TransferConfig>
 8002cb8:	e06d      	b.n	8002d96 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	4b49      	ldr	r3, [pc, #292]	@ (8002df4 <HAL_I2C_Master_Receive+0x1e4>)
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fc6d 	bl	80035b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002cda:	e05c      	b.n	8002d96 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	6a39      	ldr	r1, [r7, #32]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fafb 	bl	80032dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e07c      	b.n	8002dea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d034      	beq.n	8002d96 <HAL_I2C_Master_Receive+0x186>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d130      	bne.n	8002d96 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2180      	movs	r1, #128	@ 0x80
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f9e8 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e04d      	b.n	8002dea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2bff      	cmp	r3, #255	@ 0xff
 8002d56:	d90e      	bls.n	8002d76 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	22ff      	movs	r2, #255	@ 0xff
 8002d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	2300      	movs	r3, #0
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fc20 	bl	80035b4 <I2C_TransferConfig>
 8002d74:	e00f      	b.n	8002d96 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	8979      	ldrh	r1, [r7, #10]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fc0f 	bl	80035b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d19d      	bne.n	8002cdc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	6a39      	ldr	r1, [r7, #32]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fa55 	bl	8003254 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e01a      	b.n	8002dea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2220      	movs	r2, #32
 8002dba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <HAL_I2C_Master_Receive+0x1e8>)
 8002dc8:	400b      	ands	r3, r1
 8002dca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	80002400 	.word	0x80002400
 8002df8:	fe00e800 	.word	0xfe00e800

08002dfc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	813b      	strh	r3, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	f040 80f9 	bne.w	8003016 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_I2C_Mem_Write+0x34>
 8002e2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e36:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0ed      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_I2C_Mem_Write+0x4e>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0e6      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e52:	f7ff f9e1 	bl	8002218 <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2319      	movs	r3, #25
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f955 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d1      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2221      	movs	r2, #33	@ 0x21
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2240      	movs	r2, #64	@ 0x40
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a3a      	ldr	r2, [r7, #32]
 8002e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e9c:	88f8      	ldrh	r0, [r7, #6]
 8002e9e:	893a      	ldrh	r2, [r7, #8]
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	4603      	mov	r3, r0
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f8b9 	bl	8003024 <I2C_RequestMemoryWrite>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0a9      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2bff      	cmp	r3, #255	@ 0xff
 8002ecc:	d90e      	bls.n	8002eec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	22ff      	movs	r2, #255	@ 0xff
 8002ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	8979      	ldrh	r1, [r7, #10]
 8002edc:	2300      	movs	r3, #0
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fb65 	bl	80035b4 <I2C_TransferConfig>
 8002eea:	e00f      	b.n	8002f0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	8979      	ldrh	r1, [r7, #10]
 8002efe:	2300      	movs	r3, #0
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fb54 	bl	80035b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f958 	bl	80031c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e07b      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d034      	beq.n	8002fc4 <HAL_I2C_Mem_Write+0x1c8>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d130      	bne.n	8002fc4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2180      	movs	r1, #128	@ 0x80
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f8d1 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e04d      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2bff      	cmp	r3, #255	@ 0xff
 8002f84:	d90e      	bls.n	8002fa4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22ff      	movs	r2, #255	@ 0xff
 8002f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	8979      	ldrh	r1, [r7, #10]
 8002f94:	2300      	movs	r3, #0
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fb09 	bl	80035b4 <I2C_TransferConfig>
 8002fa2:	e00f      	b.n	8002fc4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	8979      	ldrh	r1, [r7, #10]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 faf8 	bl	80035b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d19e      	bne.n	8002f0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f93e 	bl	8003254 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e01a      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_I2C_Mem_Write+0x224>)
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	fe00e800 	.word	0xfe00e800

08003024 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	817b      	strh	r3, [r7, #10]
 8003036:	460b      	mov	r3, r1
 8003038:	813b      	strh	r3, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	8979      	ldrh	r1, [r7, #10]
 8003044:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <I2C_RequestMemoryWrite+0xa4>)
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fab1 	bl	80035b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	69b9      	ldr	r1, [r7, #24]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8b5 	bl	80031c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e02c      	b.n	80030c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	629a      	str	r2, [r3, #40]	@ 0x28
 8003076:	e015      	b.n	80030a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f89b 	bl	80031c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e012      	b.n	80030c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2200      	movs	r2, #0
 80030ac:	2180      	movs	r1, #128	@ 0x80
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f830 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	80002000 	.word	0x80002000

080030cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d103      	bne.n	80030ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d007      	beq.n	8003108 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	619a      	str	r2, [r3, #24]
  }
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003124:	e03b      	b.n	800319e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	6839      	ldr	r1, [r7, #0]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f962 	bl	80033f4 <I2C_IsErrorOccurred>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e041      	b.n	80031be <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d02d      	beq.n	800319e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7ff f869 	bl	8002218 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d122      	bne.n	800319e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	429a      	cmp	r2, r3
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	429a      	cmp	r2, r3
 8003174:	d113      	bne.n	800319e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	f043 0220 	orr.w	r2, r3, #32
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d0b4      	beq.n	8003126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031d2:	e033      	b.n	800323c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f90b 	bl	80033f4 <I2C_IsErrorOccurred>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e031      	b.n	800324c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d025      	beq.n	800323c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f0:	f7ff f812 	bl	8002218 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11a      	bne.n	800323c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d013      	beq.n	800323c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e007      	b.n	800324c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	d1c4      	bne.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003260:	e02f      	b.n	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f8c4 	bl	80033f4 <I2C_IsErrorOccurred>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e02d      	b.n	80032d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7fe ffcf 	bl	8002218 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d11a      	bne.n	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d013      	beq.n	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e007      	b.n	80032d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d1c8      	bne.n	8003262 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80032ec:	e071      	b.n	80033d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f87e 	bl	80033f4 <I2C_IsErrorOccurred>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b20      	cmp	r3, #32
 800330e:	d13b      	bne.n	8003388 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d138      	bne.n	8003388 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b04      	cmp	r3, #4
 8003322:	d105      	bne.n	8003330 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b10      	cmp	r3, #16
 800333c:	d121      	bne.n	8003382 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2210      	movs	r2, #16
 8003344:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2204      	movs	r2, #4
 800334a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2220      	movs	r2, #32
 8003352:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b24      	ldr	r3, [pc, #144]	@ (80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003360:	400b      	ands	r3, r1
 8003362:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
 8003380:	e002      	b.n	8003388 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003388:	f7fe ff46 	bl	8002218 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d116      	bne.n	80033d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d00f      	beq.n	80033d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d002      	beq.n	80033e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d083      	beq.n	80032ee <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	fe00e800 	.word	0xfe00e800

080033f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	@ 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d068      	beq.n	80034f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2210      	movs	r2, #16
 8003426:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003428:	e049      	b.n	80034be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d045      	beq.n	80034be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7fe fef1 	bl	8002218 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <I2C_IsErrorOccurred+0x54>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d13a      	bne.n	80034be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003452:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800345a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800346a:	d121      	bne.n	80034b0 <I2C_IsErrorOccurred+0xbc>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003472:	d01d      	beq.n	80034b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	2b20      	cmp	r3, #32
 8003478:	d01a      	beq.n	80034b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003488:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800348a:	f7fe fec5 	bl	8002218 <HAL_GetTick>
 800348e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003490:	e00e      	b.n	80034b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003492:	f7fe fec1 	bl	8002218 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b19      	cmp	r3, #25
 800349e:	d907      	bls.n	80034b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	f043 0320 	orr.w	r3, r3, #32
 80034a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034ae:	e006      	b.n	80034be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d1e9      	bne.n	8003492 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d003      	beq.n	80034d4 <I2C_IsErrorOccurred+0xe0>
 80034cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0aa      	beq.n	800342a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2220      	movs	r2, #32
 80034e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f043 0304 	orr.w	r3, r3, #4
 80034ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003514:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003536:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003558:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01c      	beq.n	80035a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fdaf 	bl	80030cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b0d      	ldr	r3, [pc, #52]	@ (80035b0 <I2C_IsErrorOccurred+0x1bc>)
 800357a:	400b      	ands	r3, r1
 800357c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80035a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3728      	adds	r7, #40	@ 0x28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	fe00e800 	.word	0xfe00e800

080035b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	817b      	strh	r3, [r7, #10]
 80035c2:	4613      	mov	r3, r2
 80035c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035cc:	7a7b      	ldrb	r3, [r7, #9]
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	4313      	orrs	r3, r2
 80035de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	0d5b      	lsrs	r3, r3, #21
 80035ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80035f2:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <I2C_TransferConfig+0x60>)
 80035f4:	430b      	orrs	r3, r1
 80035f6:	43db      	mvns	r3, r3
 80035f8:	ea02 0103 	and.w	r1, r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	03ff63ff 	.word	0x03ff63ff

08003618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b20      	cmp	r3, #32
 800362c:	d138      	bne.n	80036a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003638:	2302      	movs	r3, #2
 800363a:	e032      	b.n	80036a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	@ 0x24
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800366a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d139      	bne.n	8003738 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e033      	b.n	800373a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2224      	movs	r2, #36	@ 0x24
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003700:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800374e:	af00      	add	r7, sp, #0
 8003750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003754:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003758:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800375a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f001 b823 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 817d 	beq.w	8003a7e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003784:	4bbc      	ldr	r3, [pc, #752]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b04      	cmp	r3, #4
 800378e:	d00c      	beq.n	80037aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003790:	4bb9      	ldr	r3, [pc, #740]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d15c      	bne.n	8003856 <HAL_RCC_OscConfig+0x10e>
 800379c:	4bb6      	ldr	r3, [pc, #728]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a8:	d155      	bne.n	8003856 <HAL_RCC_OscConfig+0x10e>
 80037aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037ae:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  return result;
 80037be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d102      	bne.n	80037dc <HAL_RCC_OscConfig+0x94>
 80037d6:	4ba8      	ldr	r3, [pc, #672]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	e015      	b.n	8003808 <HAL_RCC_OscConfig+0xc0>
 80037dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037e0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80037f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037f4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80037f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003804:	4b9c      	ldr	r3, [pc, #624]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800380c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003810:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003814:	fa92 f2a2 	rbit	r2, r2
 8003818:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800381c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003820:	fab2 f282 	clz	r2, r2
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	f042 0220 	orr.w	r2, r2, #32
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f002 021f 	and.w	r2, r2, #31
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f202 	lsl.w	r2, r1, r2
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 811f 	beq.w	8003a7c <HAL_RCC_OscConfig+0x334>
 800383e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003842:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 8116 	bne.w	8003a7c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f000 bfaf 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x12e>
 8003868:	4b83      	ldr	r3, [pc, #524]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a82      	ldr	r2, [pc, #520]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	e036      	b.n	80038e4 <HAL_RCC_OscConfig+0x19c>
 8003876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x158>
 8003886:	4b7c      	ldr	r3, [pc, #496]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b79      	ldr	r3, [pc, #484]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a78      	ldr	r2, [pc, #480]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003898:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e021      	b.n	80038e4 <HAL_RCC_OscConfig+0x19c>
 80038a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x184>
 80038b2:	4b71      	ldr	r3, [pc, #452]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a70      	ldr	r2, [pc, #448]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b6e      	ldr	r3, [pc, #440]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6d      	ldr	r2, [pc, #436]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0x19c>
 80038cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a69      	ldr	r2, [pc, #420]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b67      	ldr	r3, [pc, #412]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a66      	ldr	r2, [pc, #408]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e4:	4b64      	ldr	r3, [pc, #400]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	f023 020f 	bic.w	r2, r3, #15
 80038ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	495f      	ldr	r1, [pc, #380]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003902:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d059      	beq.n	80039c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fe fc83 	bl	8002218 <HAL_GetTick>
 8003912:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7fe fc7e 	bl	8002218 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b64      	cmp	r3, #100	@ 0x64
 8003926:	d902      	bls.n	800392e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	f000 bf43 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 800392e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003932:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003942:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HAL_RCC_OscConfig+0x218>
 800395a:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	e015      	b.n	800398c <HAL_RCC_OscConfig+0x244>
 8003960:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003964:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003974:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003978:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800397c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003988:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003990:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003994:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003998:	fa92 f2a2 	rbit	r2, r2
 800399c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80039a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80039a4:	fab2 f282 	clz	r2, r2
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f042 0220 	orr.w	r2, r2, #32
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	f002 021f 	and.w	r2, r2, #31
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ab      	beq.n	8003918 <HAL_RCC_OscConfig+0x1d0>
 80039c0:	e05d      	b.n	8003a7e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fe fc29 	bl	8002218 <HAL_GetTick>
 80039c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fe fc24 	bl	8002218 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	@ 0x64
 80039da:	d902      	bls.n	80039e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	f000 bee9 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 80039e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039e6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80039f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d102      	bne.n	8003a14 <HAL_RCC_OscConfig+0x2cc>
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e015      	b.n	8003a40 <HAL_RCC_OscConfig+0x2f8>
 8003a14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a18:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003a28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a2c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003a30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <HAL_RCC_OscConfig+0x330>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a44:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003a48:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003a4c:	fa92 f2a2 	rbit	r2, r2
 8003a50:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003a54:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003a58:	fab2 f282 	clz	r2, r2
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f042 0220 	orr.w	r2, r2, #32
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	f002 021f 	and.w	r2, r2, #31
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ab      	bne.n	80039cc <HAL_RCC_OscConfig+0x284>
 8003a74:	e003      	b.n	8003a7e <HAL_RCC_OscConfig+0x336>
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 817d 	beq.w	8003d8e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a94:	4ba6      	ldr	r3, [pc, #664]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 030c 	and.w	r3, r3, #12
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003aa0:	4ba3      	ldr	r3, [pc, #652]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d172      	bne.n	8003b92 <HAL_RCC_OscConfig+0x44a>
 8003aac:	4ba0      	ldr	r3, [pc, #640]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d16c      	bne.n	8003b92 <HAL_RCC_OscConfig+0x44a>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003aca:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d102      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x3a0>
 8003ae2:	4b93      	ldr	r3, [pc, #588]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	e013      	b.n	8003b10 <HAL_RCC_OscConfig+0x3c8>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003afa:	2302      	movs	r3, #2
 8003afc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003b00:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003b0c:	4b88      	ldr	r3, [pc, #544]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	2202      	movs	r2, #2
 8003b12:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003b16:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003b1a:	fa92 f2a2 	rbit	r2, r2
 8003b1e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003b22:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003b26:	fab2 f282 	clz	r2, r2
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	f042 0220 	orr.w	r2, r2, #32
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f002 021f 	and.w	r2, r2, #31
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCC_OscConfig+0x410>
 8003b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d002      	beq.n	8003b58 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f000 be2e 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b75      	ldr	r3, [pc, #468]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	21f8      	movs	r1, #248	@ 0xf8
 8003b6e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003b76:	fa91 f1a1 	rbit	r1, r1
 8003b7a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003b7e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003b82:	fab1 f181 	clz	r1, r1
 8003b86:	b2c9      	uxtb	r1, r1
 8003b88:	408b      	lsls	r3, r1
 8003b8a:	4969      	ldr	r1, [pc, #420]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b90:	e0fd      	b.n	8003d8e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8088 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x56c>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003bb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bc4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2301      	movs	r3, #1
 8003bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fb22 	bl	8002218 <HAL_GetTick>
 8003bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bda:	f7fe fb1d 	bl	8002218 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	f000 bde2 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003c02:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d102      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4d8>
 8003c1a:	4b45      	ldr	r3, [pc, #276]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	e013      	b.n	8003c48 <HAL_RCC_OscConfig+0x500>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003c32:	2302      	movs	r3, #2
 8003c34:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003c38:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003c44:	4b3a      	ldr	r3, [pc, #232]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003c4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003c52:	fa92 f2a2 	rbit	r2, r2
 8003c56:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003c5a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003c5e:	fab2 f282 	clz	r2, r2
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f042 0220 	orr.w	r2, r2, #32
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	f002 021f 	and.w	r2, r2, #31
 8003c6e:	2101      	movs	r1, #1
 8003c70:	fa01 f202 	lsl.w	r2, r1, r2
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0af      	beq.n	8003bda <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	21f8      	movs	r1, #248	@ 0xf8
 8003c90:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003c98:	fa91 f1a1 	rbit	r1, r1
 8003c9c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003ca0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003ca4:	fab1 f181 	clz	r1, r1
 8003ca8:	b2c9      	uxtb	r1, r1
 8003caa:	408b      	lsls	r3, r1
 8003cac:	4920      	ldr	r1, [pc, #128]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
 8003cb2:	e06c      	b.n	8003d8e <HAL_RCC_OscConfig+0x646>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003cc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cd4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fe fa9a 	bl	8002218 <HAL_GetTick>
 8003ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fe fa95 	bl	8002218 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	f000 bd5a 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 8003d00:	2302      	movs	r3, #2
 8003d02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d104      	bne.n	8003d34 <HAL_RCC_OscConfig+0x5ec>
 8003d2a:	4b01      	ldr	r3, [pc, #4]	@ (8003d30 <HAL_RCC_OscConfig+0x5e8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	e015      	b.n	8003d5c <HAL_RCC_OscConfig+0x614>
 8003d30:	40021000 	.word	0x40021000
 8003d34:	2302      	movs	r3, #2
 8003d36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d46:	2302      	movs	r3, #2
 8003d48:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003d4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003d58:	4bc8      	ldr	r3, [pc, #800]	@ (800407c <HAL_RCC_OscConfig+0x934>)
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003d62:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003d66:	fa92 f2a2 	rbit	r2, r2
 8003d6a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003d6e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003d72:	fab2 f282 	clz	r2, r2
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	f042 0220 	orr.w	r2, r2, #32
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	f002 021f 	and.w	r2, r2, #31
 8003d82:	2101      	movs	r1, #1
 8003d84:	fa01 f202 	lsl.w	r2, r1, r2
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ad      	bne.n	8003cea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8110 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d079      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x760>
 8003db4:	2301      	movs	r3, #1
 8003db6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4bab      	ldr	r3, [pc, #684]	@ (8004080 <HAL_RCC_OscConfig+0x938>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2301      	movs	r3, #1
 8003ddc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dde:	f7fe fa1b 	bl	8002218 <HAL_GetTick>
 8003de2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de8:	f7fe fa16 	bl	8002218 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d902      	bls.n	8003dfe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	f000 bcdb 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e14:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e18:	2202      	movs	r2, #2
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e20:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	fa93 f2a3 	rbit	r2, r3
 8003e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e58:	4b88      	ldr	r3, [pc, #544]	@ (800407c <HAL_RCC_OscConfig+0x934>)
 8003e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e64:	2102      	movs	r1, #2
 8003e66:	6019      	str	r1, [r3, #0]
 8003e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f1a3 	rbit	r1, r3
 8003e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e7e:	6019      	str	r1, [r3, #0]
  return result;
 8003e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e84:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0a0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x6a0>
 8003ea6:	e08d      	b.n	8003fc4 <HAL_RCC_OscConfig+0x87c>
 8003ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	fa93 f2a3 	rbit	r2, r3
 8003ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003eca:	601a      	str	r2, [r3, #0]
  return result;
 8003ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ed4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b68      	ldr	r3, [pc, #416]	@ (8004080 <HAL_RCC_OscConfig+0x938>)
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fe f995 	bl	8002218 <HAL_GetTick>
 8003eee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef4:	f7fe f990 	bl	8002218 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d902      	bls.n	8003f0a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	f000 bc55 	b.w	80047b4 <HAL_RCC_OscConfig+0x106c>
 8003f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f12:	2202      	movs	r2, #2
 8003f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f2a3 	rbit	r2, r3
 8003f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f28:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f36:	2202      	movs	r2, #2
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	fa93 f2a3 	rbit	r2, r3
 8003f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	fa93 f2a3 	rbit	r2, r3
 8003f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f70:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f76:	4b41      	ldr	r3, [pc, #260]	@ (800407c <HAL_RCC_OscConfig+0x934>)
 8003f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003f82:	2102      	movs	r1, #2
 8003f84:	6019      	str	r1, [r3, #0]
 8003f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fa93 f1a3 	rbit	r1, r3
 8003f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f98:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003f9c:	6019      	str	r1, [r3, #0]
  return result;
 8003f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d197      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 81a1 	beq.w	800431c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe0:	4b26      	ldr	r3, [pc, #152]	@ (800407c <HAL_RCC_OscConfig+0x934>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d116      	bne.n	800401a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fec:	4b23      	ldr	r3, [pc, #140]	@ (800407c <HAL_RCC_OscConfig+0x934>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	4a22      	ldr	r2, [pc, #136]	@ (800407c <HAL_RCC_OscConfig+0x934>)
 8003ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	61d3      	str	r3, [r2, #28]
 8003ff8:	4b20      	ldr	r3, [pc, #128]	@ (800407c <HAL_RCC_OscConfig+0x934>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004004:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800400e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004012:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401a:	4b1a      	ldr	r3, [pc, #104]	@ (8004084 <HAL_RCC_OscConfig+0x93c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11a      	bne.n	800405c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004026:	4b17      	ldr	r3, [pc, #92]	@ (8004084 <HAL_RCC_OscConfig+0x93c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a16      	ldr	r2, [pc, #88]	@ (8004084 <HAL_RCC_OscConfig+0x93c>)
 800402c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004030:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004032:	f7fe f8f1 	bl	8002218 <HAL_GetTick>
 8004036:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	e009      	b.n	8004050 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403c:	f7fe f8ec 	bl	8002218 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	@ 0x64
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e3b1      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004050:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <HAL_RCC_OscConfig+0x93c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ef      	beq.n	800403c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800405c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004060:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d10d      	bne.n	8004088 <HAL_RCC_OscConfig+0x940>
 800406c:	4b03      	ldr	r3, [pc, #12]	@ (800407c <HAL_RCC_OscConfig+0x934>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4a02      	ldr	r2, [pc, #8]	@ (800407c <HAL_RCC_OscConfig+0x934>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6213      	str	r3, [r2, #32]
 8004078:	e03c      	b.n	80040f4 <HAL_RCC_OscConfig+0x9ac>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	10908120 	.word	0x10908120
 8004084:	40007000 	.word	0x40007000
 8004088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10c      	bne.n	80040b2 <HAL_RCC_OscConfig+0x96a>
 8004098:	4bc1      	ldr	r3, [pc, #772]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4ac0      	ldr	r2, [pc, #768]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	6213      	str	r3, [r2, #32]
 80040a4:	4bbe      	ldr	r3, [pc, #760]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	4abd      	ldr	r2, [pc, #756]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040aa:	f023 0304 	bic.w	r3, r3, #4
 80040ae:	6213      	str	r3, [r2, #32]
 80040b0:	e020      	b.n	80040f4 <HAL_RCC_OscConfig+0x9ac>
 80040b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x994>
 80040c2:	4bb7      	ldr	r3, [pc, #732]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	4ab6      	ldr	r2, [pc, #728]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6213      	str	r3, [r2, #32]
 80040ce:	4bb4      	ldr	r3, [pc, #720]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4ab3      	ldr	r2, [pc, #716]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6213      	str	r3, [r2, #32]
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0x9ac>
 80040dc:	4bb0      	ldr	r3, [pc, #704]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4aaf      	ldr	r2, [pc, #700]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	6213      	str	r3, [r2, #32]
 80040e8:	4bad      	ldr	r3, [pc, #692]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4aac      	ldr	r2, [pc, #688]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80040ee:	f023 0304 	bic.w	r3, r3, #4
 80040f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8081 	beq.w	8004208 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fe f887 	bl	8002218 <HAL_GetTick>
 800410a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fe f882 	bl	8002218 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e345      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 8004128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004130:	2202      	movs	r2, #2
 8004132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	fa93 f2a3 	rbit	r2, r3
 8004142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004146:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004150:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004154:	2202      	movs	r2, #2
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800416e:	601a      	str	r2, [r3, #0]
  return result;
 8004170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004174:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004178:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d102      	bne.n	8004194 <HAL_RCC_OscConfig+0xa4c>
 800418e:	4b84      	ldr	r3, [pc, #528]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	e013      	b.n	80041bc <HAL_RCC_OscConfig+0xa74>
 8004194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004198:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800419c:	2202      	movs	r2, #2
 800419e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	fa93 f2a3 	rbit	r2, r3
 80041ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	4b79      	ldr	r3, [pc, #484]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041c0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80041c4:	2102      	movs	r1, #2
 80041c6:	6011      	str	r1, [r2, #0]
 80041c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041cc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	fa92 f1a2 	rbit	r1, r2
 80041d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041da:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80041de:	6011      	str	r1, [r2, #0]
  return result;
 80041e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041e4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	fab2 f282 	clz	r2, r2
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	f002 021f 	and.w	r2, r2, #31
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d084      	beq.n	8004110 <HAL_RCC_OscConfig+0x9c8>
 8004206:	e07f      	b.n	8004308 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004208:	f7fe f806 	bl	8002218 <HAL_GetTick>
 800420c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004210:	e00b      	b.n	800422a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fe f801 	bl	8002218 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e2c4      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 800422a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004232:	2202      	movs	r2, #2
 8004234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	fa93 f2a3 	rbit	r2, r3
 8004244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004248:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004252:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004256:	2202      	movs	r2, #2
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800425e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	fa93 f2a3 	rbit	r2, r3
 8004268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004270:	601a      	str	r2, [r3, #0]
  return result;
 8004272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004276:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800427a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f043 0302 	orr.w	r3, r3, #2
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d102      	bne.n	8004296 <HAL_RCC_OscConfig+0xb4e>
 8004290:	4b43      	ldr	r3, [pc, #268]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	e013      	b.n	80042be <HAL_RCC_OscConfig+0xb76>
 8004296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800429e:	2202      	movs	r2, #2
 80042a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	fa93 f2a3 	rbit	r2, r3
 80042b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	4b39      	ldr	r3, [pc, #228]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042c2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80042c6:	2102      	movs	r1, #2
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042ce:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	fa92 f1a2 	rbit	r1, r2
 80042d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042dc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80042e0:	6011      	str	r1, [r2, #0]
  return result;
 80042e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042e6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	fab2 f282 	clz	r2, r2
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	f002 021f 	and.w	r2, r2, #31
 80042fc:	2101      	movs	r1, #1
 80042fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d184      	bne.n	8004212 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004308:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800430c:	2b01      	cmp	r3, #1
 800430e:	d105      	bne.n	800431c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004310:	4b23      	ldr	r3, [pc, #140]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800431a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004320:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8242 	beq.w	80047b2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800432e:	4b1c      	ldr	r3, [pc, #112]	@ (80043a0 <HAL_RCC_OscConfig+0xc58>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b08      	cmp	r3, #8
 8004338:	f000 8213 	beq.w	8004762 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004340:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	2b02      	cmp	r3, #2
 800434a:	f040 8162 	bne.w	8004612 <HAL_RCC_OscConfig+0xeca>
 800434e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004352:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004356:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800435a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004360:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	fa93 f2a3 	rbit	r2, r3
 800436a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004372:	601a      	str	r2, [r3, #0]
  return result;
 8004374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004378:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800437c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004388:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	461a      	mov	r2, r3
 8004390:	2300      	movs	r3, #0
 8004392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fd ff40 	bl	8002218 <HAL_GetTick>
 8004398:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439c:	e00c      	b.n	80043b8 <HAL_RCC_OscConfig+0xc70>
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fd ff38 	bl	8002218 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e1fd      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 80043b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	fa93 f2a3 	rbit	r2, r3
 80043d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80043dc:	601a      	str	r2, [r3, #0]
  return result;
 80043de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80043e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_OscConfig+0xcba>
 80043fc:	4bb0      	ldr	r3, [pc, #704]	@ (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	e027      	b.n	8004452 <HAL_RCC_OscConfig+0xd0a>
 8004402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004406:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800440a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800440e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004414:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	fa93 f2a3 	rbit	r2, r3
 800441e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004422:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004430:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	fa93 f2a3 	rbit	r2, r3
 8004444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004448:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	4b9c      	ldr	r3, [pc, #624]	@ (80046c0 <HAL_RCC_OscConfig+0xf78>)
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004456:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800445a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800445e:	6011      	str	r1, [r2, #0]
 8004460:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004464:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	fa92 f1a2 	rbit	r1, r2
 800446e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004472:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004476:	6011      	str	r1, [r2, #0]
  return result;
 8004478:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800447c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	fab2 f282 	clz	r2, r2
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	f042 0220 	orr.w	r2, r2, #32
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f002 021f 	and.w	r2, r2, #31
 8004492:	2101      	movs	r1, #1
 8004494:	fa01 f202 	lsl.w	r2, r1, r2
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d182      	bne.n	80043a4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449e:	4b88      	ldr	r3, [pc, #544]	@ (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	430b      	orrs	r3, r1
 80044c0:	497f      	ldr	r1, [pc, #508]	@ (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
 80044c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ca:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80044ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	fa93 f2a3 	rbit	r2, r3
 80044e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80044ea:	601a      	str	r2, [r3, #0]
  return result;
 80044ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80044f4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004500:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	461a      	mov	r2, r3
 8004508:	2301      	movs	r3, #1
 800450a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd fe84 	bl	8002218 <HAL_GetTick>
 8004510:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004514:	e009      	b.n	800452a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004516:	f7fd fe7f 	bl	8002218 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e144      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 800452a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004532:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800453c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	fa93 f2a3 	rbit	r2, r3
 8004546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800454a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800454e:	601a      	str	r2, [r3, #0]
  return result;
 8004550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004554:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004558:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d102      	bne.n	8004574 <HAL_RCC_OscConfig+0xe2c>
 800456e:	4b54      	ldr	r3, [pc, #336]	@ (80046c0 <HAL_RCC_OscConfig+0xf78>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	e027      	b.n	80045c4 <HAL_RCC_OscConfig+0xe7c>
 8004574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004578:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800457c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004586:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	fa93 f2a3 	rbit	r2, r3
 8004590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004594:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ac:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	fa93 f2a3 	rbit	r2, r3
 80045b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	4b3f      	ldr	r3, [pc, #252]	@ (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045c8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80045cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80045d0:	6011      	str	r1, [r2, #0]
 80045d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045d6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	fa92 f1a2 	rbit	r1, r2
 80045e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045e4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80045e8:	6011      	str	r1, [r2, #0]
  return result;
 80045ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045ee:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	fab2 f282 	clz	r2, r2
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	f042 0220 	orr.w	r2, r2, #32
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	f002 021f 	and.w	r2, r2, #31
 8004604:	2101      	movs	r1, #1
 8004606:	fa01 f202 	lsl.w	r2, r1, r2
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d082      	beq.n	8004516 <HAL_RCC_OscConfig+0xdce>
 8004610:	e0cf      	b.n	80047b2 <HAL_RCC_OscConfig+0x106a>
 8004612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004616:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800461a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800461e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004624:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	fa93 f2a3 	rbit	r2, r3
 800462e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004632:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004636:	601a      	str	r2, [r3, #0]
  return result;
 8004638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800463c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004640:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800464c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fd fdde 	bl	8002218 <HAL_GetTick>
 800465c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004660:	e009      	b.n	8004676 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004662:	f7fd fdd9 	bl	8002218 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e09e      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
 8004676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800467a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800467e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004688:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	fa93 f2a3 	rbit	r2, r3
 8004692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004696:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800469a:	601a      	str	r2, [r3, #0]
  return result;
 800469c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d104      	bne.n	80046c4 <HAL_RCC_OscConfig+0xf7c>
 80046ba:	4b01      	ldr	r3, [pc, #4]	@ (80046c0 <HAL_RCC_OscConfig+0xf78>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	e029      	b.n	8004714 <HAL_RCC_OscConfig+0xfcc>
 80046c0:	40021000 	.word	0x40021000
 80046c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	fa93 f2a3 	rbit	r2, r3
 80046e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80046f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046fc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	fa93 f2a3 	rbit	r2, r3
 8004706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800470a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	4b2b      	ldr	r3, [pc, #172]	@ (80047c0 <HAL_RCC_OscConfig+0x1078>)
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004714:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004718:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800471c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004726:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	fa92 f1a2 	rbit	r1, r2
 8004730:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004734:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004738:	6011      	str	r1, [r2, #0]
  return result;
 800473a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800473e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	fab2 f282 	clz	r2, r2
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	f042 0220 	orr.w	r2, r2, #32
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	f002 021f 	and.w	r2, r2, #31
 8004754:	2101      	movs	r1, #1
 8004756:	fa01 f202 	lsl.w	r2, r1, r2
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d180      	bne.n	8004662 <HAL_RCC_OscConfig+0xf1a>
 8004760:	e027      	b.n	80047b2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004766:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e01e      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004776:	4b12      	ldr	r3, [pc, #72]	@ (80047c0 <HAL_RCC_OscConfig+0x1078>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800477e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004782:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800478a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	429a      	cmp	r2, r3
 8004794:	d10b      	bne.n	80047ae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004796:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800479a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800479e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000

080047c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b09e      	sub	sp, #120	@ 0x78
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e162      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047dc:	4b90      	ldr	r3, [pc, #576]	@ (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d910      	bls.n	800480c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 0207 	bic.w	r2, r3, #7
 80047f2:	498b      	ldr	r1, [pc, #556]	@ (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b89      	ldr	r3, [pc, #548]	@ (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e14a      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b82      	ldr	r3, [pc, #520]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	497f      	ldr	r1, [pc, #508]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 8004826:	4313      	orrs	r3, r2
 8004828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80dc 	beq.w	80049f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d13c      	bne.n	80048ba <HAL_RCC_ClockConfig+0xf6>
 8004840:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004844:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800484e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004850:	fab3 f383 	clz	r3, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d102      	bne.n	800486a <HAL_RCC_ClockConfig+0xa6>
 8004864:	4b6f      	ldr	r3, [pc, #444]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	e00f      	b.n	800488a <HAL_RCC_ClockConfig+0xc6>
 800486a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800486e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	667b      	str	r3, [r7, #100]	@ 0x64
 8004878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800487c:	663b      	str	r3, [r7, #96]	@ 0x60
 800487e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004886:	4b67      	ldr	r3, [pc, #412]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800488e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004890:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004892:	fa92 f2a2 	rbit	r2, r2
 8004896:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004898:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800489a:	fab2 f282 	clz	r2, r2
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	f042 0220 	orr.w	r2, r2, #32
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	f002 021f 	and.w	r2, r2, #31
 80048aa:	2101      	movs	r1, #1
 80048ac:	fa01 f202 	lsl.w	r2, r1, r2
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d17b      	bne.n	80049ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e0f3      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d13c      	bne.n	800493c <HAL_RCC_ClockConfig+0x178>
 80048c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80048d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d2:	fab3 f383 	clz	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_RCC_ClockConfig+0x128>
 80048e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	e00f      	b.n	800490c <HAL_RCC_ClockConfig+0x148>
 80048ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f4:	fa93 f3a3 	rbit	r3, r3
 80048f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004908:	4b46      	ldr	r3, [pc, #280]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004910:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004914:	fa92 f2a2 	rbit	r2, r2
 8004918:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800491a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800491c:	fab2 f282 	clz	r2, r2
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	f042 0220 	orr.w	r2, r2, #32
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	f002 021f 	and.w	r2, r2, #31
 800492c:	2101      	movs	r1, #1
 800492e:	fa01 f202 	lsl.w	r2, r1, r2
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d13a      	bne.n	80049ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0b2      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
 800493c:	2302      	movs	r3, #2
 800493e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d102      	bne.n	8004964 <HAL_RCC_ClockConfig+0x1a0>
 800495e:	4b31      	ldr	r3, [pc, #196]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	e00d      	b.n	8004980 <HAL_RCC_ClockConfig+0x1bc>
 8004964:	2302      	movs	r3, #2
 8004966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004970:	2302      	movs	r3, #2
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	fa93 f3a3 	rbit	r3, r3
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	4b29      	ldr	r3, [pc, #164]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	2202      	movs	r2, #2
 8004982:	61ba      	str	r2, [r7, #24]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	fa92 f2a2 	rbit	r2, r2
 800498a:	617a      	str	r2, [r7, #20]
  return result;
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	fab2 f282 	clz	r2, r2
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	f042 0220 	orr.w	r2, r2, #32
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	f002 021f 	and.w	r2, r2, #31
 800499e:	2101      	movs	r1, #1
 80049a0:	fa01 f202 	lsl.w	r2, r1, r2
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e079      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f023 0203 	bic.w	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	491a      	ldr	r1, [pc, #104]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c0:	f7fd fc2a 	bl	8002218 <HAL_GetTick>
 80049c4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	e00a      	b.n	80049de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c8:	f7fd fc26 	bl	8002218 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e061      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	4b11      	ldr	r3, [pc, #68]	@ (8004a24 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 020c 	and.w	r2, r3, #12
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d1eb      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d214      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fe:	4b08      	ldr	r3, [pc, #32]	@ (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 0207 	bic.w	r2, r3, #7
 8004a06:	4906      	ldr	r1, [pc, #24]	@ (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <HAL_RCC_ClockConfig+0x25c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e040      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x2de>
 8004a20:	40022000 	.word	0x40022000
 8004a24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4b1d      	ldr	r3, [pc, #116]	@ (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	491a      	ldr	r1, [pc, #104]	@ (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a52:	4b16      	ldr	r3, [pc, #88]	@ (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4912      	ldr	r1, [pc, #72]	@ (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a66:	f000 f829 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <HAL_RCC_ClockConfig+0x2e8>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a74:	22f0      	movs	r2, #240	@ 0xf0
 8004a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	fa92 f2a2 	rbit	r2, r2
 8004a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	fab2 f282 	clz	r2, r2
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	40d3      	lsrs	r3, r2
 8004a8a:	4a09      	ldr	r2, [pc, #36]	@ (8004ab0 <HAL_RCC_ClockConfig+0x2ec>)
 8004a8c:	5cd3      	ldrb	r3, [r2, r3]
 8004a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a92:	4a08      	ldr	r2, [pc, #32]	@ (8004ab4 <HAL_RCC_ClockConfig+0x2f0>)
 8004a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a96:	4b08      	ldr	r3, [pc, #32]	@ (8004ab8 <HAL_RCC_ClockConfig+0x2f4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fc fca0 	bl	80013e0 <HAL_InitTick>
  
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3778      	adds	r7, #120	@ 0x78
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	08009af0 	.word	0x08009af0
 8004ab4:	20000004 	.word	0x20000004
 8004ab8:	20000008 	.word	0x20000008

08004abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d002      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x30>
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x36>
 8004aea:	e026      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aec:	4b19      	ldr	r3, [pc, #100]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8004aee:	613b      	str	r3, [r7, #16]
      break;
 8004af0:	e026      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	0c9b      	lsrs	r3, r3, #18
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	4a17      	ldr	r2, [pc, #92]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004afc:	5cd3      	ldrb	r3, [r2, r3]
 8004afe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b00:	4b13      	ldr	r3, [pc, #76]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	4a14      	ldr	r2, [pc, #80]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b0a:	5cd3      	ldrb	r3, [r2, r3]
 8004b0c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b18:	4a0e      	ldr	r2, [pc, #56]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e004      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	613b      	str	r3, [r7, #16]
      break;
 8004b38:	e002      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b3a:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b3c:	613b      	str	r3, [r7, #16]
      break;
 8004b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b40:	693b      	ldr	r3, [r7, #16]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	007a1200 	.word	0x007a1200
 8004b58:	0800a104 	.word	0x0800a104
 8004b5c:	0800a114 	.word	0x0800a114
 8004b60:	003d0900 	.word	0x003d0900

08004b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b03      	ldr	r3, [pc, #12]	@ (8004b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000004 	.word	0x20000004

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004b82:	f7ff ffef 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b86:	4601      	mov	r1, r0
 8004b88:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b90:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	fa92 f2a2 	rbit	r2, r2
 8004b9c:	603a      	str	r2, [r7, #0]
  return result;
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	fab2 f282 	clz	r2, r2
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	40d3      	lsrs	r3, r2
 8004ba8:	4a04      	ldr	r2, [pc, #16]	@ (8004bbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8004baa:	5cd3      	ldrb	r3, [r2, r3]
 8004bac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	08009b00 	.word	0x08009b00

08004bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004bc6:	f7ff ffcd 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004bca:	4601      	mov	r1, r0
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004bd4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004bd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	fa92 f2a2 	rbit	r2, r2
 8004be0:	603a      	str	r2, [r7, #0]
  return result;
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	fab2 f282 	clz	r2, r2
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	40d3      	lsrs	r3, r2
 8004bec:	4a04      	ldr	r2, [pc, #16]	@ (8004c00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004bee:	5cd3      	ldrb	r3, [r2, r3]
 8004bf0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	08009b00 	.word	0x08009b00

08004c04 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	220f      	movs	r2, #15
 8004c12:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c14:	4b12      	ldr	r3, [pc, #72]	@ (8004c60 <HAL_RCC_GetClockConfig+0x5c>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0203 	and.w	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004c20:	4b0f      	ldr	r3, [pc, #60]	@ (8004c60 <HAL_RCC_GetClockConfig+0x5c>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c60 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c38:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <HAL_RCC_GetClockConfig+0x5c>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	08db      	lsrs	r3, r3, #3
 8004c3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004c46:	4b07      	ldr	r3, [pc, #28]	@ (8004c64 <HAL_RCC_GetClockConfig+0x60>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0207 	and.w	r2, r3, #7
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40022000 	.word	0x40022000

08004c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b092      	sub	sp, #72	@ 0x48
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80cd 	beq.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8c:	4b86      	ldr	r3, [pc, #536]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10e      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c98:	4b83      	ldr	r3, [pc, #524]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	4a82      	ldr	r2, [pc, #520]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	61d3      	str	r3, [r2, #28]
 8004ca4:	4b80      	ldr	r3, [pc, #512]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d118      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a79      	ldr	r2, [pc, #484]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ccc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cce:	f7fd faa3 	bl	8002218 <HAL_GetTick>
 8004cd2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd6:	f7fd fa9f 	bl	8002218 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b64      	cmp	r3, #100	@ 0x64
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0db      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	4b70      	ldr	r3, [pc, #448]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d07d      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d076      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d12:	4b65      	ldr	r3, [pc, #404]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d20:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d2c:	fab3 f383 	clz	r3, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	4b5e      	ldr	r3, [pc, #376]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d48:	fa93 f3a3 	rbit	r3, r3
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	4b55      	ldr	r3, [pc, #340]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2300      	movs	r3, #0
 8004d62:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d64:	4a50      	ldr	r2, [pc, #320]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d68:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d045      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fd fa50 	bl	8002218 <HAL_GetTick>
 8004d78:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f7fd fa4c 	bl	8002218 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e086      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004d92:	2302      	movs	r3, #2
 8004d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9e:	2302      	movs	r3, #2
 8004da0:	623b      	str	r3, [r7, #32]
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	61fb      	str	r3, [r7, #28]
  return result;
 8004daa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	fab3 f383 	clz	r3, r3
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f043 0302 	orr.w	r3, r3, #2
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004dc0:	4b39      	ldr	r3, [pc, #228]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	e007      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	fa93 f3a3 	rbit	r3, r3
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	613a      	str	r2, [r7, #16]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	fa92 f2a2 	rbit	r2, r2
 8004de0:	60fa      	str	r2, [r7, #12]
  return result;
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	fab2 f282 	clz	r2, r2
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	f002 021f 	and.w	r2, r2, #31
 8004df4:	2101      	movs	r1, #1
 8004df6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0bd      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e00:	4b29      	ldr	r3, [pc, #164]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4926      	ldr	r1, [pc, #152]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	4a22      	ldr	r2, [pc, #136]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	491a      	ldr	r1, [pc, #104]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e50:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	f023 0210 	bic.w	r2, r3, #16
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4912      	ldr	r1, [pc, #72]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	490b      	ldr	r1, [pc, #44]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	4903      	ldr	r1, [pc, #12]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3748      	adds	r7, #72	@ 0x48
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	10908100 	.word	0x10908100

08004eb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e073      	b.n	8004fb2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	7f5b      	ldrb	r3, [r3, #29]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc f87a 	bl	8000fd4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d055      	beq.n	8004fa0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	22ca      	movs	r2, #202	@ 0xca
 8004efa:	625a      	str	r2, [r3, #36]	@ 0x24
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2253      	movs	r2, #83	@ 0x53
 8004f02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fa49 	bl	800539c <RTC_EnterInitMode>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d12c      	bne.n	8004f6e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004f22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f26:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6899      	ldr	r1, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68d2      	ldr	r2, [r2, #12]
 8004f4e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6919      	ldr	r1, [r3, #16]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	041a      	lsls	r2, r3, #16
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa50 	bl	800540a <RTC_ExitInitMode>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d110      	bne.n	8004f96 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f82:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	22ff      	movs	r2, #255	@ 0xff
 8004f9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f9e:	e001      	b.n	8004fa4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fba:	b590      	push	{r4, r7, lr}
 8004fbc:	b087      	sub	sp, #28
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	7f1b      	ldrb	r3, [r3, #28]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RTC_SetTime+0x1c>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e087      	b.n	80050e6 <HAL_RTC_SetTime+0x12c>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d126      	bne.n	8005036 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fa27 	bl	8005454 <RTC_ByteToBcd2>
 8005006:	4603      	mov	r3, r0
 8005008:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fa20 	bl	8005454 <RTC_ByteToBcd2>
 8005014:	4603      	mov	r3, r0
 8005016:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005018:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	789b      	ldrb	r3, [r3, #2]
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fa18 	bl	8005454 <RTC_ByteToBcd2>
 8005024:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005026:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	78db      	ldrb	r3, [r3, #3]
 800502e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	e018      	b.n	8005068 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2200      	movs	r2, #0
 8005048:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005056:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800505c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	78db      	ldrb	r3, [r3, #3]
 8005062:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	22ca      	movs	r2, #202	@ 0xca
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2253      	movs	r2, #83	@ 0x53
 8005076:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f98f 	bl	800539c <RTC_EnterInitMode>
 800507e:	4603      	mov	r3, r0
 8005080:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005082:	7cfb      	ldrb	r3, [r7, #19]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d120      	bne.n	80050ca <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005092:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005096:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6899      	ldr	r1, [r3, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f9a2 	bl	800540a <RTC_ExitInitMode>
 80050c6:	4603      	mov	r3, r0
 80050c8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80050ca:	7cfb      	ldrb	r3, [r7, #19]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	22ff      	movs	r2, #255	@ 0xff
 80050dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]

  return status;
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd90      	pop	{r4, r7, pc}

080050ee <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005120:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005124:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005140:	b2da      	uxtb	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800514e:	b2da      	uxtb	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	0d9b      	lsrs	r3, r3, #22
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d11a      	bne.n	80051a0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f98e 	bl	8005490 <RTC_Bcd2ToByte>
 8005174:	4603      	mov	r3, r0
 8005176:	461a      	mov	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 f985 	bl	8005490 <RTC_Bcd2ToByte>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	789b      	ldrb	r3, [r3, #2]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 f97c 	bl	8005490 <RTC_Bcd2ToByte>
 8005198:	4603      	mov	r3, r0
 800519a:	461a      	mov	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051aa:	b590      	push	{r4, r7, lr}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	7f1b      	ldrb	r3, [r3, #28]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_RTC_SetDate+0x1c>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e071      	b.n	80052aa <HAL_RTC_SetDate+0x100>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2202      	movs	r2, #2
 80051d0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10e      	bne.n	80051f6 <HAL_RTC_SetDate+0x4c>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	f023 0310 	bic.w	r3, r3, #16
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	330a      	adds	r3, #10
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d11c      	bne.n	8005236 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f927 	bl	8005454 <RTC_ByteToBcd2>
 8005206:	4603      	mov	r3, r0
 8005208:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f920 	bl	8005454 <RTC_ByteToBcd2>
 8005214:	4603      	mov	r3, r0
 8005216:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005218:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	789b      	ldrb	r3, [r3, #2]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f918 	bl	8005454 <RTC_ByteToBcd2>
 8005224:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005226:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e00e      	b.n	8005254 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	78db      	ldrb	r3, [r3, #3]
 800523a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005242:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005248:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	22ca      	movs	r2, #202	@ 0xca
 800525a:	625a      	str	r2, [r3, #36]	@ 0x24
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2253      	movs	r2, #83	@ 0x53
 8005262:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f899 	bl	800539c <RTC_EnterInitMode>
 800526a:	4603      	mov	r3, r0
 800526c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800526e:	7cfb      	ldrb	r3, [r7, #19]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10c      	bne.n	800528e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800527e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005282:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f8c0 	bl	800540a <RTC_ExitInitMode>
 800528a:	4603      	mov	r3, r0
 800528c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800528e:	7cfb      	ldrb	r3, [r7, #19]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	22ff      	movs	r2, #255	@ 0xff
 80052a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]

  return status;
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd90      	pop	{r4, r7, pc}

080052b2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b086      	sub	sp, #24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80052cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80052d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	0b5b      	lsrs	r3, r3, #13
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11a      	bne.n	8005346 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	78db      	ldrb	r3, [r3, #3]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 f8bb 	bl	8005490 <RTC_Bcd2ToByte>
 800531a:	4603      	mov	r3, r0
 800531c:	461a      	mov	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f8b2 	bl	8005490 <RTC_Bcd2ToByte>
 800532c:	4603      	mov	r3, r0
 800532e:	461a      	mov	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	789b      	ldrb	r3, [r3, #2]
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f8a9 	bl	8005490 <RTC_Bcd2ToByte>
 800533e:	4603      	mov	r3, r0
 8005340:	461a      	mov	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0d      	ldr	r2, [pc, #52]	@ (8005398 <HAL_RTC_WaitForSynchro+0x48>)
 8005362:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005364:	f7fc ff58 	bl	8002218 <HAL_GetTick>
 8005368:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800536a:	e009      	b.n	8005380 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800536c:	f7fc ff54 	bl	8002218 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800537a:	d901      	bls.n	8005380 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e007      	b.n	8005390 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0ee      	beq.n	800536c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	00017f5f 	.word	0x00017f5f

0800539c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d122      	bne.n	8005400 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053ca:	f7fc ff25 	bl	8002218 <HAL_GetTick>
 80053ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80053d0:	e00c      	b.n	80053ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053d2:	f7fc ff21 	bl	8002218 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053e0:	d904      	bls.n	80053ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2204      	movs	r2, #4
 80053e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <RTC_EnterInitMode+0x64>
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d1e8      	bne.n	80053d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005424:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff ff8b 	bl	8005350 <HAL_RTC_WaitForSynchro>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d004      	beq.n	800544a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2204      	movs	r2, #4
 8005444:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005462:	e005      	b.n	8005470 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	3b0a      	subs	r3, #10
 800546e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	2b09      	cmp	r3, #9
 8005474:	d8f6      	bhi.n	8005464 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	b2da      	uxtb	r2, r3
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	4313      	orrs	r3, r2
 8005482:	b2db      	uxtb	r3, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	4413      	add	r3, r2
 80054be:	b2db      	uxtb	r3, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e049      	b.n	8005572 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f841 	bl	800557a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f000 f9c6 	bl	800589c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d001      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e040      	b.n	800562a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005638 <HAL_TIM_Base_Start_IT+0xa8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_TIM_Base_Start_IT+0x58>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d2:	d009      	beq.n	80055e8 <HAL_TIM_Base_Start_IT+0x58>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a18      	ldr	r2, [pc, #96]	@ (800563c <HAL_TIM_Base_Start_IT+0xac>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIM_Base_Start_IT+0x58>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a17      	ldr	r2, [pc, #92]	@ (8005640 <HAL_TIM_Base_Start_IT+0xb0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d115      	bne.n	8005614 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	4b15      	ldr	r3, [pc, #84]	@ (8005644 <HAL_TIM_Base_Start_IT+0xb4>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	d015      	beq.n	8005626 <HAL_TIM_Base_Start_IT+0x96>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005600:	d011      	beq.n	8005626 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005612:	e008      	b.n	8005626 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e000      	b.n	8005628 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005626:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40000400 	.word	0x40000400
 8005640:	40014000 	.word	0x40014000
 8005644:	00010007 	.word	0x00010007

08005648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d020      	beq.n	80056ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01b      	beq.n	80056ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0202 	mvn.w	r2, #2
 800567c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f8e4 	bl	8005860 <HAL_TIM_IC_CaptureCallback>
 8005698:	e005      	b.n	80056a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f8d6 	bl	800584c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f8e7 	bl	8005874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d020      	beq.n	80056f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01b      	beq.n	80056f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0204 	mvn.w	r2, #4
 80056c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f8be 	bl	8005860 <HAL_TIM_IC_CaptureCallback>
 80056e4:	e005      	b.n	80056f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8b0 	bl	800584c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f8c1 	bl	8005874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d020      	beq.n	8005744 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01b      	beq.n	8005744 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0208 	mvn.w	r2, #8
 8005714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2204      	movs	r2, #4
 800571a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f898 	bl	8005860 <HAL_TIM_IC_CaptureCallback>
 8005730:	e005      	b.n	800573e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f88a 	bl	800584c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f89b 	bl	8005874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b00      	cmp	r3, #0
 800574c:	d020      	beq.n	8005790 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01b      	beq.n	8005790 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0210 	mvn.w	r2, #16
 8005760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2208      	movs	r2, #8
 8005766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f872 	bl	8005860 <HAL_TIM_IC_CaptureCallback>
 800577c:	e005      	b.n	800578a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f864 	bl	800584c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f875 	bl	8005874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00c      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0201 	mvn.w	r2, #1
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fb fbd2 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8f0 	bl	80059b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00c      	beq.n	80057fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8e8 	bl	80059cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00c      	beq.n	8005820 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d007      	beq.n	8005820 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f834 	bl	8005888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00c      	beq.n	8005844 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0220 	mvn.w	r2, #32
 800583c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f8b0 	bl	80059a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a38      	ldr	r2, [pc, #224]	@ (8005990 <TIM_Base_SetConfig+0xf4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d007      	beq.n	80058c4 <TIM_Base_SetConfig+0x28>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ba:	d003      	beq.n	80058c4 <TIM_Base_SetConfig+0x28>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a35      	ldr	r2, [pc, #212]	@ (8005994 <TIM_Base_SetConfig+0xf8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d108      	bne.n	80058d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005990 <TIM_Base_SetConfig+0xf4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <TIM_Base_SetConfig+0x6a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e4:	d00f      	beq.n	8005906 <TIM_Base_SetConfig+0x6a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005994 <TIM_Base_SetConfig+0xf8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_Base_SetConfig+0x6a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a29      	ldr	r2, [pc, #164]	@ (8005998 <TIM_Base_SetConfig+0xfc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_Base_SetConfig+0x6a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a28      	ldr	r2, [pc, #160]	@ (800599c <TIM_Base_SetConfig+0x100>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_Base_SetConfig+0x6a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a27      	ldr	r2, [pc, #156]	@ (80059a0 <TIM_Base_SetConfig+0x104>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a14      	ldr	r2, [pc, #80]	@ (8005990 <TIM_Base_SetConfig+0xf4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00b      	beq.n	800595c <TIM_Base_SetConfig+0xc0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a14      	ldr	r2, [pc, #80]	@ (8005998 <TIM_Base_SetConfig+0xfc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d007      	beq.n	800595c <TIM_Base_SetConfig+0xc0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a13      	ldr	r2, [pc, #76]	@ (800599c <TIM_Base_SetConfig+0x100>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_Base_SetConfig+0xc0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a12      	ldr	r2, [pc, #72]	@ (80059a0 <TIM_Base_SetConfig+0x104>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d103      	bne.n	8005964 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b01      	cmp	r3, #1
 8005974:	d105      	bne.n	8005982 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f023 0201 	bic.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	611a      	str	r2, [r3, #16]
  }
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40000400 	.word	0x40000400
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400
 80059a0:	40014800 	.word	0x40014800

080059a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e040      	b.n	8005a74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fb fe44 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	@ 0x24
 8005a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0201 	bic.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fd32 	bl	8006490 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fbf9 	bl	8006224 <UART_SetConfig>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e01b      	b.n	8005a74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fdb1 	bl	80065d4 <UART_CheckIdleState>
 8005a72:	4603      	mov	r3, r0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	@ 0x28
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d177      	bne.n	8005b84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_UART_Transmit+0x24>
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e070      	b.n	8005b86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2221      	movs	r2, #33	@ 0x21
 8005ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab2:	f7fc fbb1 	bl	8002218 <HAL_GetTick>
 8005ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad0:	d108      	bne.n	8005ae4 <HAL_UART_Transmit+0x68>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	e003      	b.n	8005aec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005aec:	e02f      	b.n	8005b4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2200      	movs	r2, #0
 8005af6:	2180      	movs	r1, #128	@ 0x80
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fe13 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e03b      	b.n	8005b86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10b      	bne.n	8005b2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	881a      	ldrh	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b20:	b292      	uxth	r2, r2
 8005b22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	3302      	adds	r3, #2
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	e007      	b.n	8005b3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	781a      	ldrb	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1c9      	bne.n	8005aee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2200      	movs	r2, #0
 8005b62:	2140      	movs	r1, #64	@ 0x40
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fddd 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e005      	b.n	8005b86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b08a      	sub	sp, #40	@ 0x28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d132      	bne.n	8005c0c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_UART_Receive_IT+0x24>
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e02b      	b.n	8005c0e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d018      	beq.n	8005bfc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	623b      	str	r3, [r7, #32]
 8005bea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	69f9      	ldr	r1, [r7, #28]
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e6      	bne.n	8005bca <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bfc:	88fb      	ldrh	r3, [r7, #6]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fdfc 	bl	8006800 <UART_Start_Receive_IT>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3728      	adds	r7, #40	@ 0x28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b0ba      	sub	sp, #232	@ 0xe8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005c42:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005c46:	4013      	ands	r3, r2
 8005c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d115      	bne.n	8005c80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00f      	beq.n	8005c80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d009      	beq.n	8005c80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 82ab 	beq.w	80061cc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
      }
      return;
 8005c7e:	e2a5      	b.n	80061cc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8117 	beq.w	8005eb8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c9a:	4b85      	ldr	r3, [pc, #532]	@ (8005eb0 <HAL_UART_IRQHandler+0x298>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 810a 	beq.w	8005eb8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d011      	beq.n	8005cd4 <HAL_UART_IRQHandler+0xbc>
 8005cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cca:	f043 0201 	orr.w	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d011      	beq.n	8005d04 <HAL_UART_IRQHandler+0xec>
 8005ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cfa:	f043 0204 	orr.w	r2, r3, #4
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d011      	beq.n	8005d34 <HAL_UART_IRQHandler+0x11c>
 8005d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2204      	movs	r2, #4
 8005d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d2a:	f043 0202 	orr.w	r2, r3, #2
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d017      	beq.n	8005d70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d66:	f043 0208 	orr.w	r2, r3, #8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d012      	beq.n	8005da2 <HAL_UART_IRQHandler+0x18a>
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00c      	beq.n	8005da2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8211 	beq.w	80061d0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dea:	2b40      	cmp	r3, #64	@ 0x40
 8005dec:	d005      	beq.n	8005dfa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005df2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d04f      	beq.n	8005e9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fdc6 	bl	800698c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0a:	2b40      	cmp	r3, #64	@ 0x40
 8005e0c:	d141      	bne.n	8005e92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3308      	adds	r3, #8
 8005e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1d9      	bne.n	8005e0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d013      	beq.n	8005e8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e66:	4a13      	ldr	r2, [pc, #76]	@ (8005eb4 <HAL_UART_IRQHandler+0x29c>)
 8005e68:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fc fb22 	bl	80024b8 <HAL_DMA_Abort_IT>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d017      	beq.n	8005eaa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e84:	4610      	mov	r0, r2
 8005e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e88:	e00f      	b.n	8005eaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f9b4 	bl	80061f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e90:	e00b      	b.n	8005eaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9b0 	bl	80061f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e98:	e007      	b.n	8005eaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9ac 	bl	80061f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005ea8:	e192      	b.n	80061d0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eaa:	bf00      	nop
    return;
 8005eac:	e190      	b.n	80061d0 <HAL_UART_IRQHandler+0x5b8>
 8005eae:	bf00      	nop
 8005eb0:	04000120 	.word	0x04000120
 8005eb4:	08006a55 	.word	0x08006a55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	f040 814b 	bne.w	8006158 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8144 	beq.w	8006158 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 813d 	beq.w	8006158 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2210      	movs	r2, #16
 8005ee4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef0:	2b40      	cmp	r3, #64	@ 0x40
 8005ef2:	f040 80b5 	bne.w	8006060 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 8164 	beq.w	80061d4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f16:	429a      	cmp	r2, r3
 8005f18:	f080 815c 	bcs.w	80061d4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	f000 8086 	beq.w	800603e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f60:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1da      	bne.n	8005f32 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005fa0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005fa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005fa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005fb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e1      	bne.n	8005f7c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fdc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fde:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fe2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e3      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800600c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800600e:	f023 0310 	bic.w	r3, r3, #16
 8006012:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006020:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006022:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006026:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800602e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e4      	bne.n	8005ffe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006038:	4618      	mov	r0, r3
 800603a:	f7fc f9ff 	bl	800243c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006050:	b29b      	uxth	r3, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	b29b      	uxth	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f8d7 	bl	800620c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800605e:	e0b9      	b.n	80061d4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800606c:	b29b      	uxth	r3, r3
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80ab 	beq.w	80061d8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006082:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 80a6 	beq.w	80061d8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800609a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80060b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e4      	bne.n	800608c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3308      	adds	r3, #8
 80060c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	623b      	str	r3, [r7, #32]
   return(result);
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3308      	adds	r3, #8
 80060e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e3      	bne.n	80060c2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60fb      	str	r3, [r7, #12]
   return(result);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	617b      	str	r3, [r7, #20]
   return(result);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e4      	bne.n	800610e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800614a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f85b 	bl	800620c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006156:	e03f      	b.n	80061d8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00e      	beq.n	8006182 <HAL_UART_IRQHandler+0x56a>
 8006164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fe52 	bl	8006e24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006180:	e02d      	b.n	80061de <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00e      	beq.n	80061ac <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800618e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01c      	beq.n	80061dc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
    }
    return;
 80061aa:	e017      	b.n	80061dc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d012      	beq.n	80061de <HAL_UART_IRQHandler+0x5c6>
 80061b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00c      	beq.n	80061de <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fc5b 	bl	8006a80 <UART_EndTransmit_IT>
    return;
 80061ca:	e008      	b.n	80061de <HAL_UART_IRQHandler+0x5c6>
      return;
 80061cc:	bf00      	nop
 80061ce:	e006      	b.n	80061de <HAL_UART_IRQHandler+0x5c6>
    return;
 80061d0:	bf00      	nop
 80061d2:	e004      	b.n	80061de <HAL_UART_IRQHandler+0x5c6>
      return;
 80061d4:	bf00      	nop
 80061d6:	e002      	b.n	80061de <HAL_UART_IRQHandler+0x5c6>
      return;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <HAL_UART_IRQHandler+0x5c6>
    return;
 80061dc:	bf00      	nop
  }

}
 80061de:	37e8      	adds	r7, #232	@ 0xe8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b8a      	ldr	r3, [pc, #552]	@ (8006478 <UART_SetConfig+0x254>)
 8006250:	4013      	ands	r3, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6812      	ldr	r2, [r2, #0]
 8006256:	6979      	ldr	r1, [r7, #20]
 8006258:	430b      	orrs	r3, r1
 800625a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	430a      	orrs	r2, r1
 8006294:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a78      	ldr	r2, [pc, #480]	@ (800647c <UART_SetConfig+0x258>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d120      	bne.n	80062e2 <UART_SetConfig+0xbe>
 80062a0:	4b77      	ldr	r3, [pc, #476]	@ (8006480 <UART_SetConfig+0x25c>)
 80062a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d817      	bhi.n	80062dc <UART_SetConfig+0xb8>
 80062ac:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <UART_SetConfig+0x90>)
 80062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b2:	bf00      	nop
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	080062d1 	.word	0x080062d1
 80062bc:	080062d7 	.word	0x080062d7
 80062c0:	080062cb 	.word	0x080062cb
 80062c4:	2300      	movs	r3, #0
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e01d      	b.n	8006306 <UART_SetConfig+0xe2>
 80062ca:	2302      	movs	r3, #2
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e01a      	b.n	8006306 <UART_SetConfig+0xe2>
 80062d0:	2304      	movs	r3, #4
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e017      	b.n	8006306 <UART_SetConfig+0xe2>
 80062d6:	2308      	movs	r3, #8
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e014      	b.n	8006306 <UART_SetConfig+0xe2>
 80062dc:	2310      	movs	r3, #16
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e011      	b.n	8006306 <UART_SetConfig+0xe2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a67      	ldr	r2, [pc, #412]	@ (8006484 <UART_SetConfig+0x260>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d102      	bne.n	80062f2 <UART_SetConfig+0xce>
 80062ec:	2300      	movs	r3, #0
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e009      	b.n	8006306 <UART_SetConfig+0xe2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a64      	ldr	r2, [pc, #400]	@ (8006488 <UART_SetConfig+0x264>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d102      	bne.n	8006302 <UART_SetConfig+0xde>
 80062fc:	2300      	movs	r3, #0
 80062fe:	77fb      	strb	r3, [r7, #31]
 8006300:	e001      	b.n	8006306 <UART_SetConfig+0xe2>
 8006302:	2310      	movs	r3, #16
 8006304:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800630e:	d15a      	bne.n	80063c6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006310:	7ffb      	ldrb	r3, [r7, #31]
 8006312:	2b08      	cmp	r3, #8
 8006314:	d827      	bhi.n	8006366 <UART_SetConfig+0x142>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <UART_SetConfig+0xf8>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006341 	.word	0x08006341
 8006320:	08006349 	.word	0x08006349
 8006324:	08006351 	.word	0x08006351
 8006328:	08006367 	.word	0x08006367
 800632c:	08006357 	.word	0x08006357
 8006330:	08006367 	.word	0x08006367
 8006334:	08006367 	.word	0x08006367
 8006338:	08006367 	.word	0x08006367
 800633c:	0800635f 	.word	0x0800635f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006340:	f7fe fc1c 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8006344:	61b8      	str	r0, [r7, #24]
        break;
 8006346:	e013      	b.n	8006370 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006348:	f7fe fc3a 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 800634c:	61b8      	str	r0, [r7, #24]
        break;
 800634e:	e00f      	b.n	8006370 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006350:	4b4e      	ldr	r3, [pc, #312]	@ (800648c <UART_SetConfig+0x268>)
 8006352:	61bb      	str	r3, [r7, #24]
        break;
 8006354:	e00c      	b.n	8006370 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006356:	f7fe fbb1 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800635a:	61b8      	str	r0, [r7, #24]
        break;
 800635c:	e008      	b.n	8006370 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800635e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006362:	61bb      	str	r3, [r7, #24]
        break;
 8006364:	e004      	b.n	8006370 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	77bb      	strb	r3, [r7, #30]
        break;
 800636e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d074      	beq.n	8006460 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	005a      	lsls	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	441a      	add	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	fbb2 f3f3 	udiv	r3, r2, r3
 800638a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b0f      	cmp	r3, #15
 8006390:	d916      	bls.n	80063c0 <UART_SetConfig+0x19c>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006398:	d212      	bcs.n	80063c0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f023 030f 	bic.w	r3, r3, #15
 80063a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	89fb      	ldrh	r3, [r7, #14]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	89fa      	ldrh	r2, [r7, #14]
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	e04f      	b.n	8006460 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	77bb      	strb	r3, [r7, #30]
 80063c4:	e04c      	b.n	8006460 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063c6:	7ffb      	ldrb	r3, [r7, #31]
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d828      	bhi.n	800641e <UART_SetConfig+0x1fa>
 80063cc:	a201      	add	r2, pc, #4	@ (adr r2, 80063d4 <UART_SetConfig+0x1b0>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	080063f9 	.word	0x080063f9
 80063d8:	08006401 	.word	0x08006401
 80063dc:	08006409 	.word	0x08006409
 80063e0:	0800641f 	.word	0x0800641f
 80063e4:	0800640f 	.word	0x0800640f
 80063e8:	0800641f 	.word	0x0800641f
 80063ec:	0800641f 	.word	0x0800641f
 80063f0:	0800641f 	.word	0x0800641f
 80063f4:	08006417 	.word	0x08006417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f8:	f7fe fbc0 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80063fc:	61b8      	str	r0, [r7, #24]
        break;
 80063fe:	e013      	b.n	8006428 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006400:	f7fe fbde 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 8006404:	61b8      	str	r0, [r7, #24]
        break;
 8006406:	e00f      	b.n	8006428 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006408:	4b20      	ldr	r3, [pc, #128]	@ (800648c <UART_SetConfig+0x268>)
 800640a:	61bb      	str	r3, [r7, #24]
        break;
 800640c:	e00c      	b.n	8006428 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800640e:	f7fe fb55 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006412:	61b8      	str	r0, [r7, #24]
        break;
 8006414:	e008      	b.n	8006428 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800641a:	61bb      	str	r3, [r7, #24]
        break;
 800641c:	e004      	b.n	8006428 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	77bb      	strb	r3, [r7, #30]
        break;
 8006426:	bf00      	nop
    }

    if (pclk != 0U)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d018      	beq.n	8006460 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	085a      	lsrs	r2, r3, #1
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006440:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b0f      	cmp	r3, #15
 8006446:	d909      	bls.n	800645c <UART_SetConfig+0x238>
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800644e:	d205      	bcs.n	800645c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	b29a      	uxth	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	e001      	b.n	8006460 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800646c:	7fbb      	ldrb	r3, [r7, #30]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3720      	adds	r7, #32
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	efff69f3 	.word	0xefff69f3
 800647c:	40013800 	.word	0x40013800
 8006480:	40021000 	.word	0x40021000
 8006484:	40004400 	.word	0x40004400
 8006488:	40004800 	.word	0x40004800
 800648c:	007a1200 	.word	0x007a1200

08006490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01a      	beq.n	80065a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800658e:	d10a      	bne.n	80065a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b098      	sub	sp, #96	@ 0x60
 80065d8:	af02      	add	r7, sp, #8
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065e4:	f7fb fe18 	bl	8002218 <HAL_GetTick>
 80065e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d12e      	bne.n	8006656 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006600:	2200      	movs	r2, #0
 8006602:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f88c 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d021      	beq.n	8006656 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006626:	653b      	str	r3, [r7, #80]	@ 0x50
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006630:	647b      	str	r3, [r7, #68]	@ 0x44
 8006632:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800663e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e6      	bne.n	8006612 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e062      	b.n	800671c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b04      	cmp	r3, #4
 8006662:	d149      	bne.n	80066f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006664:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800666c:	2200      	movs	r2, #0
 800666e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f856 	bl	8006724 <UART_WaitOnFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d03c      	beq.n	80066f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	623b      	str	r3, [r7, #32]
   return(result);
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669c:	633b      	str	r3, [r7, #48]	@ 0x30
 800669e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e6      	bne.n	800667e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3308      	adds	r3, #8
 80066b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3308      	adds	r3, #8
 80066ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066d0:	61fa      	str	r2, [r7, #28]
 80066d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	69b9      	ldr	r1, [r7, #24]
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	617b      	str	r3, [r7, #20]
   return(result);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e5      	bne.n	80066b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e011      	b.n	800671c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3758      	adds	r7, #88	@ 0x58
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006734:	e04f      	b.n	80067d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d04b      	beq.n	80067d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7fb fd6b 	bl	8002218 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <UART_WaitOnFlagUntilTimeout+0x30>
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e04e      	b.n	80067f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b00      	cmp	r3, #0
 8006764:	d037      	beq.n	80067d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b80      	cmp	r3, #128	@ 0x80
 800676a:	d034      	beq.n	80067d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b40      	cmp	r3, #64	@ 0x40
 8006770:	d031      	beq.n	80067d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b08      	cmp	r3, #8
 800677e:	d110      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2208      	movs	r2, #8
 8006786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f8ff 	bl	800698c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2208      	movs	r2, #8
 8006792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e029      	b.n	80067f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067b0:	d111      	bne.n	80067d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f8e5 	bl	800698c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e00f      	b.n	80067f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4013      	ands	r3, r2
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	bf0c      	ite	eq
 80067e6:	2301      	moveq	r3, #1
 80067e8:	2300      	movne	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d0a0      	beq.n	8006736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006800:	b480      	push	{r7}
 8006802:	b097      	sub	sp, #92	@ 0x5c
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	88fa      	ldrh	r2, [r7, #6]
 8006820:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006832:	d10e      	bne.n	8006852 <UART_Start_Receive_IT+0x52>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <UART_Start_Receive_IT+0x48>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006842:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006846:	e02d      	b.n	80068a4 <UART_Start_Receive_IT+0xa4>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	22ff      	movs	r2, #255	@ 0xff
 800684c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006850:	e028      	b.n	80068a4 <UART_Start_Receive_IT+0xa4>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10d      	bne.n	8006876 <UART_Start_Receive_IT+0x76>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <UART_Start_Receive_IT+0x6c>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	22ff      	movs	r2, #255	@ 0xff
 8006866:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800686a:	e01b      	b.n	80068a4 <UART_Start_Receive_IT+0xa4>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	227f      	movs	r2, #127	@ 0x7f
 8006870:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006874:	e016      	b.n	80068a4 <UART_Start_Receive_IT+0xa4>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800687e:	d10d      	bne.n	800689c <UART_Start_Receive_IT+0x9c>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <UART_Start_Receive_IT+0x92>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	227f      	movs	r2, #127	@ 0x7f
 800688c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006890:	e008      	b.n	80068a4 <UART_Start_Receive_IT+0xa4>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	223f      	movs	r2, #63	@ 0x3f
 8006896:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800689a:	e003      	b.n	80068a4 <UART_Start_Receive_IT+0xa4>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2222      	movs	r2, #34	@ 0x22
 80068b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3308      	adds	r3, #8
 80068ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3308      	adds	r3, #8
 80068d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068d4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80068d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80068e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e5      	bne.n	80068b4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f0:	d107      	bne.n	8006902 <UART_Start_Receive_IT+0x102>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d103      	bne.n	8006902 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a21      	ldr	r2, [pc, #132]	@ (8006984 <UART_Start_Receive_IT+0x184>)
 80068fe:	669a      	str	r2, [r3, #104]	@ 0x68
 8006900:	e002      	b.n	8006908 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a20      	ldr	r2, [pc, #128]	@ (8006988 <UART_Start_Receive_IT+0x188>)
 8006906:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d019      	beq.n	8006944 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006930:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006934:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e6      	bne.n	8006910 <UART_Start_Receive_IT+0x110>
 8006942:	e018      	b.n	8006976 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	613b      	str	r3, [r7, #16]
   return(result);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f043 0320 	orr.w	r3, r3, #32
 8006958:	653b      	str	r3, [r7, #80]	@ 0x50
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006962:	623b      	str	r3, [r7, #32]
 8006964:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	69f9      	ldr	r1, [r7, #28]
 8006968:	6a3a      	ldr	r2, [r7, #32]
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e6      	bne.n	8006944 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	375c      	adds	r7, #92	@ 0x5c
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	08006c7d 	.word	0x08006c7d
 8006988:	08006ad5 	.word	0x08006ad5

0800698c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800698c:	b480      	push	{r7}
 800698e:	b095      	sub	sp, #84	@ 0x54
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80069b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e6      	bne.n	8006994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	f023 0301 	bic.w	r3, r3, #1
 80069dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d118      	bne.n	8006a34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f023 0310 	bic.w	r3, r3, #16
 8006a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6979      	ldr	r1, [r7, #20]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e6      	bne.n	8006a02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a48:	bf00      	nop
 8006a4a:	3754      	adds	r7, #84	@ 0x54
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff fbc0 	bl	80061f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6979      	ldr	r1, [r7, #20]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e6      	bne.n	8006a88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fb8c 	bl	80061e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006acc:	bf00      	nop
 8006ace:	3720      	adds	r7, #32
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b09c      	sub	sp, #112	@ 0x70
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ae2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aec:	2b22      	cmp	r3, #34	@ 0x22
 8006aee:	f040 80b9 	bne.w	8006c64 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006af8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006afc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b00:	b2d9      	uxtb	r1, r3
 8006b02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0c:	400a      	ands	r2, r1
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f040 809c 	bne.w	8006c74 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e6      	bne.n	8006b3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e5      	bne.n	8006b6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d018      	beq.n	8006bf6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e6      	bne.n	8006bc4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d12e      	bne.n	8006c5c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f023 0310 	bic.w	r3, r3, #16
 8006c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	69b9      	ldr	r1, [r7, #24]
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e6      	bne.n	8006c04 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f003 0310 	and.w	r3, r3, #16
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	d103      	bne.n	8006c4c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2210      	movs	r2, #16
 8006c4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff fad9 	bl	800620c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c5a:	e00b      	b.n	8006c74 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7f9 fc7f 	bl	8000560 <HAL_UART_RxCpltCallback>
}
 8006c62:	e007      	b.n	8006c74 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	619a      	str	r2, [r3, #24]
}
 8006c74:	bf00      	nop
 8006c76:	3770      	adds	r7, #112	@ 0x70
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b09c      	sub	sp, #112	@ 0x70
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c94:	2b22      	cmp	r3, #34	@ 0x22
 8006c96:	f040 80b9 	bne.w	8006e0c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ca0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006caa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006cae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cbe:	1c9a      	adds	r2, r3, #2
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 809c 	bne.w	8006e1c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d02:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e6      	bne.n	8006ce4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d36:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e5      	bne.n	8006d16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d018      	beq.n	8006d9e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e6      	bne.n	8006d6c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d12e      	bne.n	8006e04 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f023 0310 	bic.w	r3, r3, #16
 8006dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6979      	ldr	r1, [r7, #20]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e6      	bne.n	8006dac <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d103      	bne.n	8006df4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2210      	movs	r2, #16
 8006df2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff fa05 	bl	800620c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e02:	e00b      	b.n	8006e1c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7f9 fbab 	bl	8000560 <HAL_UART_RxCpltCallback>
}
 8006e0a:	e007      	b.n	8006e1c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0208 	orr.w	r2, r2, #8
 8006e1a:	619a      	str	r2, [r3, #24]
}
 8006e1c:	bf00      	nop
 8006e1e:	3770      	adds	r7, #112	@ 0x70
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e4a:	2b84      	cmp	r3, #132	@ 0x84
 8006e4c:	d005      	beq.n	8006e5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4413      	add	r3, r2
 8006e56:	3303      	adds	r3, #3
 8006e58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e6c:	f000 faf4 	bl	8007458 <vTaskStartScheduler>
  
  return osOK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e78:	b089      	sub	sp, #36	@ 0x24
 8006e7a:	af04      	add	r7, sp, #16
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d020      	beq.n	8006eca <osThreadCreate+0x54>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01c      	beq.n	8006eca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685c      	ldr	r4, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691e      	ldr	r6, [r3, #16]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff ffc8 	bl	8006e38 <makeFreeRtosPriority>
 8006ea8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006eb2:	9202      	str	r2, [sp, #8]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	9100      	str	r1, [sp, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	4632      	mov	r2, r6
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f000 f8ed 	bl	800709e <xTaskCreateStatic>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e01c      	b.n	8006f04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685c      	ldr	r4, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ed6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff ffaa 	bl	8006e38 <makeFreeRtosPriority>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	f107 030c 	add.w	r3, r7, #12
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	9200      	str	r2, [sp, #0]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	4632      	mov	r2, r6
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 f931 	bl	800715c <xTaskCreate>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d001      	beq.n	8006f04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f04:	68fb      	ldr	r3, [r7, #12]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <osDelay+0x16>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	e000      	b.n	8006f26 <osDelay+0x18>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fa60 	bl	80073ec <vTaskDelay>
  
  return osOK;
 8006f2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f103 0208 	add.w	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f103 0208 	add.w	r2, r3, #8
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f103 0208 	add.w	r2, r3, #8
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d103      	bne.n	8006ff8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e00c      	b.n	8007012 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e002      	b.n	8007006 <vListInsert+0x2e>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	429a      	cmp	r2, r3
 8007010:	d2f6      	bcs.n	8007000 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
}
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800704a:	b480      	push	{r7}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6892      	ldr	r2, [r2, #8]
 8007060:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	6852      	ldr	r2, [r2, #4]
 800706a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	429a      	cmp	r2, r3
 8007074:	d103      	bne.n	800707e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	1e5a      	subs	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b08e      	sub	sp, #56	@ 0x38
 80070a2:	af04      	add	r7, sp, #16
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	e7fd      	b.n	80070c6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	61fb      	str	r3, [r7, #28]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070e8:	23a0      	movs	r3, #160	@ 0xa0
 80070ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80070f0:	d00b      	beq.n	800710a <xTaskCreateStatic+0x6c>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	61bb      	str	r3, [r7, #24]
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop
 8007108:	e7fd      	b.n	8007106 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01e      	beq.n	800714e <xTaskCreateStatic+0xb0>
 8007110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007112:	2b00      	cmp	r3, #0
 8007114:	d01b      	beq.n	800714e <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800711e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	2202      	movs	r2, #2
 8007124:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007128:	2300      	movs	r3, #0
 800712a:	9303      	str	r3, [sp, #12]
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	9302      	str	r3, [sp, #8]
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f000 f851 	bl	80071e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007146:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007148:	f000 f8e6 	bl	8007318 <prvAddNewTaskToReadyList>
 800714c:	e001      	b.n	8007152 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007152:	697b      	ldr	r3, [r7, #20]
	}
 8007154:	4618      	mov	r0, r3
 8007156:	3728      	adds	r7, #40	@ 0x28
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08c      	sub	sp, #48	@ 0x30
 8007160:	af04      	add	r7, sp, #16
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4618      	mov	r0, r3
 8007172:	f000 ff11 	bl	8007f98 <pvPortMalloc>
 8007176:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00e      	beq.n	800719c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800717e:	20a0      	movs	r0, #160	@ 0xa0
 8007180:	f000 ff0a 	bl	8007f98 <pvPortMalloc>
 8007184:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	631a      	str	r2, [r3, #48]	@ 0x30
 8007192:	e005      	b.n	80071a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007194:	6978      	ldr	r0, [r7, #20]
 8007196:	f000 ffc7 	bl	8008128 <vPortFree>
 800719a:	e001      	b.n	80071a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d017      	beq.n	80071d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071ae:	88fa      	ldrh	r2, [r7, #6]
 80071b0:	2300      	movs	r3, #0
 80071b2:	9303      	str	r3, [sp, #12]
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	9302      	str	r3, [sp, #8]
 80071b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f80f 	bl	80071e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071ca:	69f8      	ldr	r0, [r7, #28]
 80071cc:	f000 f8a4 	bl	8007318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071d0:	2301      	movs	r3, #1
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	e002      	b.n	80071dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071dc:	69bb      	ldr	r3, [r7, #24]
	}
 80071de:	4618      	mov	r0, r3
 80071e0:	3720      	adds	r7, #32
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007200:	3b01      	subs	r3, #1
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	f023 0307 	bic.w	r3, r3, #7
 800720e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00b      	beq.n	8007232 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	617b      	str	r3, [r7, #20]
}
 800722c:	bf00      	nop
 800722e:	bf00      	nop
 8007230:	e7fd      	b.n	800722e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007232:	2300      	movs	r3, #0
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	e012      	b.n	800725e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4413      	add	r3, r2
 800723e:	7819      	ldrb	r1, [r3, #0]
 8007240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	3334      	adds	r3, #52	@ 0x34
 8007248:	460a      	mov	r2, r1
 800724a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d006      	beq.n	8007266 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	3301      	adds	r3, #1
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	2b0f      	cmp	r3, #15
 8007262:	d9e9      	bls.n	8007238 <prvInitialiseNewTask+0x50>
 8007264:	e000      	b.n	8007268 <prvInitialiseNewTask+0x80>
		{
			break;
 8007266:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	2b06      	cmp	r3, #6
 8007274:	d901      	bls.n	800727a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007276:	2306      	movs	r3, #6
 8007278:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800727e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007284:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007288:	2200      	movs	r2, #0
 800728a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728e:	3304      	adds	r3, #4
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff fe70 	bl	8006f76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	3318      	adds	r3, #24
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff fe6b 	bl	8006f76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	f1c3 0207 	rsb	r2, r3, #7
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	2200      	movs	r2, #0
 80072ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	334c      	adds	r3, #76	@ 0x4c
 80072ca:	224c      	movs	r2, #76	@ 0x4c
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 f990 	bl	80085f4 <memset>
 80072d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d6:	4a0d      	ldr	r2, [pc, #52]	@ (800730c <prvInitialiseNewTask+0x124>)
 80072d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007310 <prvInitialiseNewTask+0x128>)
 80072de:	655a      	str	r2, [r3, #84]	@ 0x54
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007314 <prvInitialiseNewTask+0x12c>)
 80072e4:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	68f9      	ldr	r1, [r7, #12]
 80072ea:	69b8      	ldr	r0, [r7, #24]
 80072ec:	f000 fc44 	bl	8007b78 <pxPortInitialiseStack>
 80072f0:	4602      	mov	r2, r0
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007302:	bf00      	nop
 8007304:	3720      	adds	r7, #32
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	2000264c 	.word	0x2000264c
 8007310:	200026b4 	.word	0x200026b4
 8007314:	2000271c 	.word	0x2000271c

08007318 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007320:	f000 fd5a 	bl	8007dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007324:	4b2a      	ldr	r3, [pc, #168]	@ (80073d0 <prvAddNewTaskToReadyList+0xb8>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	4a29      	ldr	r2, [pc, #164]	@ (80073d0 <prvAddNewTaskToReadyList+0xb8>)
 800732c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800732e:	4b29      	ldr	r3, [pc, #164]	@ (80073d4 <prvAddNewTaskToReadyList+0xbc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007336:	4a27      	ldr	r2, [pc, #156]	@ (80073d4 <prvAddNewTaskToReadyList+0xbc>)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800733c:	4b24      	ldr	r3, [pc, #144]	@ (80073d0 <prvAddNewTaskToReadyList+0xb8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d110      	bne.n	8007366 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007344:	f000 fae8 	bl	8007918 <prvInitialiseTaskLists>
 8007348:	e00d      	b.n	8007366 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800734a:	4b23      	ldr	r3, [pc, #140]	@ (80073d8 <prvAddNewTaskToReadyList+0xc0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007352:	4b20      	ldr	r3, [pc, #128]	@ (80073d4 <prvAddNewTaskToReadyList+0xbc>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	429a      	cmp	r2, r3
 800735e:	d802      	bhi.n	8007366 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007360:	4a1c      	ldr	r2, [pc, #112]	@ (80073d4 <prvAddNewTaskToReadyList+0xbc>)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007366:	4b1d      	ldr	r3, [pc, #116]	@ (80073dc <prvAddNewTaskToReadyList+0xc4>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	4a1b      	ldr	r2, [pc, #108]	@ (80073dc <prvAddNewTaskToReadyList+0xc4>)
 800736e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007374:	2201      	movs	r2, #1
 8007376:	409a      	lsls	r2, r3
 8007378:	4b19      	ldr	r3, [pc, #100]	@ (80073e0 <prvAddNewTaskToReadyList+0xc8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4313      	orrs	r3, r2
 800737e:	4a18      	ldr	r2, [pc, #96]	@ (80073e0 <prvAddNewTaskToReadyList+0xc8>)
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4a15      	ldr	r2, [pc, #84]	@ (80073e4 <prvAddNewTaskToReadyList+0xcc>)
 8007390:	441a      	add	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3304      	adds	r3, #4
 8007396:	4619      	mov	r1, r3
 8007398:	4610      	mov	r0, r2
 800739a:	f7ff fdf9 	bl	8006f90 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800739e:	f000 fd4d 	bl	8007e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073a2:	4b0d      	ldr	r3, [pc, #52]	@ (80073d8 <prvAddNewTaskToReadyList+0xc0>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00e      	beq.n	80073c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073aa:	4b0a      	ldr	r3, [pc, #40]	@ (80073d4 <prvAddNewTaskToReadyList+0xbc>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d207      	bcs.n	80073c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073b8:	4b0b      	ldr	r3, [pc, #44]	@ (80073e8 <prvAddNewTaskToReadyList+0xd0>)
 80073ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000e40 	.word	0x20000e40
 80073d4:	20000d40 	.word	0x20000d40
 80073d8:	20000e4c 	.word	0x20000e4c
 80073dc:	20000e5c 	.word	0x20000e5c
 80073e0:	20000e48 	.word	0x20000e48
 80073e4:	20000d44 	.word	0x20000d44
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d018      	beq.n	8007430 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073fe:	4b14      	ldr	r3, [pc, #80]	@ (8007450 <vTaskDelay+0x64>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00b      	beq.n	800741e <vTaskDelay+0x32>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60bb      	str	r3, [r7, #8]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800741e:	f000 f885 	bl	800752c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007422:	2100      	movs	r1, #0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb41 	bl	8007aac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800742a:	f000 f88d 	bl	8007548 <xTaskResumeAll>
 800742e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007436:	4b07      	ldr	r3, [pc, #28]	@ (8007454 <vTaskDelay+0x68>)
 8007438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000e68 	.word	0x20000e68
 8007454:	e000ed04 	.word	0xe000ed04

08007458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	@ 0x28
 800745c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007466:	463a      	mov	r2, r7
 8007468:	1d39      	adds	r1, r7, #4
 800746a:	f107 0308 	add.w	r3, r7, #8
 800746e:	4618      	mov	r0, r3
 8007470:	f7f8 ff06 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	9202      	str	r2, [sp, #8]
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	2300      	movs	r3, #0
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	2300      	movs	r3, #0
 8007484:	460a      	mov	r2, r1
 8007486:	4921      	ldr	r1, [pc, #132]	@ (800750c <vTaskStartScheduler+0xb4>)
 8007488:	4821      	ldr	r0, [pc, #132]	@ (8007510 <vTaskStartScheduler+0xb8>)
 800748a:	f7ff fe08 	bl	800709e <xTaskCreateStatic>
 800748e:	4603      	mov	r3, r0
 8007490:	4a20      	ldr	r2, [pc, #128]	@ (8007514 <vTaskStartScheduler+0xbc>)
 8007492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007494:	4b1f      	ldr	r3, [pc, #124]	@ (8007514 <vTaskStartScheduler+0xbc>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800749c:	2301      	movs	r3, #1
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	e001      	b.n	80074a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d11b      	bne.n	80074e4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	613b      	str	r3, [r7, #16]
}
 80074be:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074c0:	4b15      	ldr	r3, [pc, #84]	@ (8007518 <vTaskStartScheduler+0xc0>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	334c      	adds	r3, #76	@ 0x4c
 80074c6:	4a15      	ldr	r2, [pc, #84]	@ (800751c <vTaskStartScheduler+0xc4>)
 80074c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074ca:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <vTaskStartScheduler+0xc8>)
 80074cc:	f04f 32ff 	mov.w	r2, #4294967295
 80074d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074d2:	4b14      	ldr	r3, [pc, #80]	@ (8007524 <vTaskStartScheduler+0xcc>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80074d8:	4b13      	ldr	r3, [pc, #76]	@ (8007528 <vTaskStartScheduler+0xd0>)
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074de:	f000 fbd7 	bl	8007c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074e2:	e00f      	b.n	8007504 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ea:	d10b      	bne.n	8007504 <vTaskStartScheduler+0xac>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	60fb      	str	r3, [r7, #12]
}
 80074fe:	bf00      	nop
 8007500:	bf00      	nop
 8007502:	e7fd      	b.n	8007500 <vTaskStartScheduler+0xa8>
}
 8007504:	bf00      	nop
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	08009adc 	.word	0x08009adc
 8007510:	080078e9 	.word	0x080078e9
 8007514:	20000e64 	.word	0x20000e64
 8007518:	20000d40 	.word	0x20000d40
 800751c:	20000014 	.word	0x20000014
 8007520:	20000e60 	.word	0x20000e60
 8007524:	20000e4c 	.word	0x20000e4c
 8007528:	20000e44 	.word	0x20000e44

0800752c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007530:	4b04      	ldr	r3, [pc, #16]	@ (8007544 <vTaskSuspendAll+0x18>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	4a03      	ldr	r2, [pc, #12]	@ (8007544 <vTaskSuspendAll+0x18>)
 8007538:	6013      	str	r3, [r2, #0]
}
 800753a:	bf00      	nop
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	20000e68 	.word	0x20000e68

08007548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007552:	2300      	movs	r3, #0
 8007554:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007556:	4b42      	ldr	r3, [pc, #264]	@ (8007660 <xTaskResumeAll+0x118>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10b      	bne.n	8007576 <xTaskResumeAll+0x2e>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	603b      	str	r3, [r7, #0]
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	e7fd      	b.n	8007572 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007576:	f000 fc2f 	bl	8007dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800757a:	4b39      	ldr	r3, [pc, #228]	@ (8007660 <xTaskResumeAll+0x118>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	4a37      	ldr	r2, [pc, #220]	@ (8007660 <xTaskResumeAll+0x118>)
 8007582:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007584:	4b36      	ldr	r3, [pc, #216]	@ (8007660 <xTaskResumeAll+0x118>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d161      	bne.n	8007650 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800758c:	4b35      	ldr	r3, [pc, #212]	@ (8007664 <xTaskResumeAll+0x11c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d05d      	beq.n	8007650 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007594:	e02e      	b.n	80075f4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007596:	4b34      	ldr	r3, [pc, #208]	@ (8007668 <xTaskResumeAll+0x120>)
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3318      	adds	r3, #24
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff fd51 	bl	800704a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3304      	adds	r3, #4
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fd4c 	bl	800704a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	2201      	movs	r2, #1
 80075b8:	409a      	lsls	r2, r3
 80075ba:	4b2c      	ldr	r3, [pc, #176]	@ (800766c <xTaskResumeAll+0x124>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4313      	orrs	r3, r2
 80075c0:	4a2a      	ldr	r2, [pc, #168]	@ (800766c <xTaskResumeAll+0x124>)
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4a27      	ldr	r2, [pc, #156]	@ (8007670 <xTaskResumeAll+0x128>)
 80075d2:	441a      	add	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3304      	adds	r3, #4
 80075d8:	4619      	mov	r1, r3
 80075da:	4610      	mov	r0, r2
 80075dc:	f7ff fcd8 	bl	8006f90 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e4:	4b23      	ldr	r3, [pc, #140]	@ (8007674 <xTaskResumeAll+0x12c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d302      	bcc.n	80075f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075ee:	4b22      	ldr	r3, [pc, #136]	@ (8007678 <xTaskResumeAll+0x130>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007668 <xTaskResumeAll+0x120>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1cc      	bne.n	8007596 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007602:	f000 fa2d 	bl	8007a60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007606:	4b1d      	ldr	r3, [pc, #116]	@ (800767c <xTaskResumeAll+0x134>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d010      	beq.n	8007634 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007612:	f000 f847 	bl	80076a4 <xTaskIncrementTick>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800761c:	4b16      	ldr	r3, [pc, #88]	@ (8007678 <xTaskResumeAll+0x130>)
 800761e:	2201      	movs	r2, #1
 8007620:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3b01      	subs	r3, #1
 8007626:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f1      	bne.n	8007612 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800762e:	4b13      	ldr	r3, [pc, #76]	@ (800767c <xTaskResumeAll+0x134>)
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007634:	4b10      	ldr	r3, [pc, #64]	@ (8007678 <xTaskResumeAll+0x130>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d009      	beq.n	8007650 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800763c:	2301      	movs	r3, #1
 800763e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007640:	4b0f      	ldr	r3, [pc, #60]	@ (8007680 <xTaskResumeAll+0x138>)
 8007642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007650:	f000 fbf4 	bl	8007e3c <vPortExitCritical>

	return xAlreadyYielded;
 8007654:	68bb      	ldr	r3, [r7, #8]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000e68 	.word	0x20000e68
 8007664:	20000e40 	.word	0x20000e40
 8007668:	20000e00 	.word	0x20000e00
 800766c:	20000e48 	.word	0x20000e48
 8007670:	20000d44 	.word	0x20000d44
 8007674:	20000d40 	.word	0x20000d40
 8007678:	20000e54 	.word	0x20000e54
 800767c:	20000e50 	.word	0x20000e50
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800768a:	4b05      	ldr	r3, [pc, #20]	@ (80076a0 <xTaskGetTickCount+0x1c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007690:	687b      	ldr	r3, [r7, #4]
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	20000e44 	.word	0x20000e44

080076a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ae:	4b51      	ldr	r3, [pc, #324]	@ (80077f4 <xTaskIncrementTick+0x150>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 808e 	bne.w	80077d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076b8:	4b4f      	ldr	r3, [pc, #316]	@ (80077f8 <xTaskIncrementTick+0x154>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3301      	adds	r3, #1
 80076be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076c0:	4a4d      	ldr	r2, [pc, #308]	@ (80077f8 <xTaskIncrementTick+0x154>)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d121      	bne.n	8007710 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076cc:	4b4b      	ldr	r3, [pc, #300]	@ (80077fc <xTaskIncrementTick+0x158>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	603b      	str	r3, [r7, #0]
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	e7fd      	b.n	80076ea <xTaskIncrementTick+0x46>
 80076ee:	4b43      	ldr	r3, [pc, #268]	@ (80077fc <xTaskIncrementTick+0x158>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	4b42      	ldr	r3, [pc, #264]	@ (8007800 <xTaskIncrementTick+0x15c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a40      	ldr	r2, [pc, #256]	@ (80077fc <xTaskIncrementTick+0x158>)
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	4a40      	ldr	r2, [pc, #256]	@ (8007800 <xTaskIncrementTick+0x15c>)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	4b40      	ldr	r3, [pc, #256]	@ (8007804 <xTaskIncrementTick+0x160>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3301      	adds	r3, #1
 8007708:	4a3e      	ldr	r2, [pc, #248]	@ (8007804 <xTaskIncrementTick+0x160>)
 800770a:	6013      	str	r3, [r2, #0]
 800770c:	f000 f9a8 	bl	8007a60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007710:	4b3d      	ldr	r3, [pc, #244]	@ (8007808 <xTaskIncrementTick+0x164>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	429a      	cmp	r2, r3
 8007718:	d34d      	bcc.n	80077b6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800771a:	4b38      	ldr	r3, [pc, #224]	@ (80077fc <xTaskIncrementTick+0x158>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <xTaskIncrementTick+0x84>
 8007724:	2301      	movs	r3, #1
 8007726:	e000      	b.n	800772a <xTaskIncrementTick+0x86>
 8007728:	2300      	movs	r3, #0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d004      	beq.n	8007738 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800772e:	4b36      	ldr	r3, [pc, #216]	@ (8007808 <xTaskIncrementTick+0x164>)
 8007730:	f04f 32ff 	mov.w	r2, #4294967295
 8007734:	601a      	str	r2, [r3, #0]
					break;
 8007736:	e03e      	b.n	80077b6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007738:	4b30      	ldr	r3, [pc, #192]	@ (80077fc <xTaskIncrementTick+0x158>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	429a      	cmp	r2, r3
 800774e:	d203      	bcs.n	8007758 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007750:	4a2d      	ldr	r2, [pc, #180]	@ (8007808 <xTaskIncrementTick+0x164>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6013      	str	r3, [r2, #0]
						break;
 8007756:	e02e      	b.n	80077b6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3304      	adds	r3, #4
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fc74 	bl	800704a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3318      	adds	r3, #24
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fc6b 	bl	800704a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	2201      	movs	r2, #1
 800777a:	409a      	lsls	r2, r3
 800777c:	4b23      	ldr	r3, [pc, #140]	@ (800780c <xTaskIncrementTick+0x168>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4313      	orrs	r3, r2
 8007782:	4a22      	ldr	r2, [pc, #136]	@ (800780c <xTaskIncrementTick+0x168>)
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4a1f      	ldr	r2, [pc, #124]	@ (8007810 <xTaskIncrementTick+0x16c>)
 8007794:	441a      	add	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	3304      	adds	r3, #4
 800779a:	4619      	mov	r1, r3
 800779c:	4610      	mov	r0, r2
 800779e:	f7ff fbf7 	bl	8006f90 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007814 <xTaskIncrementTick+0x170>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d3b4      	bcc.n	800771a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077b4:	e7b1      	b.n	800771a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077b6:	4b17      	ldr	r3, [pc, #92]	@ (8007814 <xTaskIncrementTick+0x170>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077bc:	4914      	ldr	r1, [pc, #80]	@ (8007810 <xTaskIncrementTick+0x16c>)
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d907      	bls.n	80077de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80077ce:	2301      	movs	r3, #1
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e004      	b.n	80077de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80077d4:	4b10      	ldr	r3, [pc, #64]	@ (8007818 <xTaskIncrementTick+0x174>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3301      	adds	r3, #1
 80077da:	4a0f      	ldr	r2, [pc, #60]	@ (8007818 <xTaskIncrementTick+0x174>)
 80077dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80077de:	4b0f      	ldr	r3, [pc, #60]	@ (800781c <xTaskIncrementTick+0x178>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80077e6:	2301      	movs	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80077ea:	697b      	ldr	r3, [r7, #20]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20000e68 	.word	0x20000e68
 80077f8:	20000e44 	.word	0x20000e44
 80077fc:	20000df8 	.word	0x20000df8
 8007800:	20000dfc 	.word	0x20000dfc
 8007804:	20000e58 	.word	0x20000e58
 8007808:	20000e60 	.word	0x20000e60
 800780c:	20000e48 	.word	0x20000e48
 8007810:	20000d44 	.word	0x20000d44
 8007814:	20000d40 	.word	0x20000d40
 8007818:	20000e50 	.word	0x20000e50
 800781c:	20000e54 	.word	0x20000e54

08007820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007826:	4b2a      	ldr	r3, [pc, #168]	@ (80078d0 <vTaskSwitchContext+0xb0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800782e:	4b29      	ldr	r3, [pc, #164]	@ (80078d4 <vTaskSwitchContext+0xb4>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007834:	e045      	b.n	80078c2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007836:	4b27      	ldr	r3, [pc, #156]	@ (80078d4 <vTaskSwitchContext+0xb4>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800783c:	4b26      	ldr	r3, [pc, #152]	@ (80078d8 <vTaskSwitchContext+0xb8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	fab3 f383 	clz	r3, r3
 8007848:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	f1c3 031f 	rsb	r3, r3, #31
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	4922      	ldr	r1, [pc, #136]	@ (80078dc <vTaskSwitchContext+0xbc>)
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10b      	bne.n	800787e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	607b      	str	r3, [r7, #4]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <vTaskSwitchContext+0x5a>
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4a14      	ldr	r2, [pc, #80]	@ (80078dc <vTaskSwitchContext+0xbc>)
 800788a:	4413      	add	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	605a      	str	r2, [r3, #4]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	3308      	adds	r3, #8
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d104      	bne.n	80078ae <vTaskSwitchContext+0x8e>
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	605a      	str	r2, [r3, #4]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	4a0a      	ldr	r2, [pc, #40]	@ (80078e0 <vTaskSwitchContext+0xc0>)
 80078b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078b8:	4b09      	ldr	r3, [pc, #36]	@ (80078e0 <vTaskSwitchContext+0xc0>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	334c      	adds	r3, #76	@ 0x4c
 80078be:	4a09      	ldr	r2, [pc, #36]	@ (80078e4 <vTaskSwitchContext+0xc4>)
 80078c0:	6013      	str	r3, [r2, #0]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000e68 	.word	0x20000e68
 80078d4:	20000e54 	.word	0x20000e54
 80078d8:	20000e48 	.word	0x20000e48
 80078dc:	20000d44 	.word	0x20000d44
 80078e0:	20000d40 	.word	0x20000d40
 80078e4:	20000014 	.word	0x20000014

080078e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078f0:	f000 f852 	bl	8007998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078f4:	4b06      	ldr	r3, [pc, #24]	@ (8007910 <prvIdleTask+0x28>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d9f9      	bls.n	80078f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078fc:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <prvIdleTask+0x2c>)
 80078fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800790c:	e7f0      	b.n	80078f0 <prvIdleTask+0x8>
 800790e:	bf00      	nop
 8007910:	20000d44 	.word	0x20000d44
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800791e:	2300      	movs	r3, #0
 8007920:	607b      	str	r3, [r7, #4]
 8007922:	e00c      	b.n	800793e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4a12      	ldr	r2, [pc, #72]	@ (8007978 <prvInitialiseTaskLists+0x60>)
 8007930:	4413      	add	r3, r2
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff faff 	bl	8006f36 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3301      	adds	r3, #1
 800793c:	607b      	str	r3, [r7, #4]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b06      	cmp	r3, #6
 8007942:	d9ef      	bls.n	8007924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007944:	480d      	ldr	r0, [pc, #52]	@ (800797c <prvInitialiseTaskLists+0x64>)
 8007946:	f7ff faf6 	bl	8006f36 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800794a:	480d      	ldr	r0, [pc, #52]	@ (8007980 <prvInitialiseTaskLists+0x68>)
 800794c:	f7ff faf3 	bl	8006f36 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007950:	480c      	ldr	r0, [pc, #48]	@ (8007984 <prvInitialiseTaskLists+0x6c>)
 8007952:	f7ff faf0 	bl	8006f36 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007956:	480c      	ldr	r0, [pc, #48]	@ (8007988 <prvInitialiseTaskLists+0x70>)
 8007958:	f7ff faed 	bl	8006f36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800795c:	480b      	ldr	r0, [pc, #44]	@ (800798c <prvInitialiseTaskLists+0x74>)
 800795e:	f7ff faea 	bl	8006f36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007962:	4b0b      	ldr	r3, [pc, #44]	@ (8007990 <prvInitialiseTaskLists+0x78>)
 8007964:	4a05      	ldr	r2, [pc, #20]	@ (800797c <prvInitialiseTaskLists+0x64>)
 8007966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007968:	4b0a      	ldr	r3, [pc, #40]	@ (8007994 <prvInitialiseTaskLists+0x7c>)
 800796a:	4a05      	ldr	r2, [pc, #20]	@ (8007980 <prvInitialiseTaskLists+0x68>)
 800796c:	601a      	str	r2, [r3, #0]
}
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000d44 	.word	0x20000d44
 800797c:	20000dd0 	.word	0x20000dd0
 8007980:	20000de4 	.word	0x20000de4
 8007984:	20000e00 	.word	0x20000e00
 8007988:	20000e14 	.word	0x20000e14
 800798c:	20000e2c 	.word	0x20000e2c
 8007990:	20000df8 	.word	0x20000df8
 8007994:	20000dfc 	.word	0x20000dfc

08007998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800799e:	e019      	b.n	80079d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079a0:	f000 fa1a 	bl	8007dd8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80079a4:	4b10      	ldr	r3, [pc, #64]	@ (80079e8 <prvCheckTasksWaitingTermination+0x50>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fb4a 	bl	800704a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079b6:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <prvCheckTasksWaitingTermination+0x54>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4a0b      	ldr	r2, [pc, #44]	@ (80079ec <prvCheckTasksWaitingTermination+0x54>)
 80079be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079c0:	4b0b      	ldr	r3, [pc, #44]	@ (80079f0 <prvCheckTasksWaitingTermination+0x58>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	4a0a      	ldr	r2, [pc, #40]	@ (80079f0 <prvCheckTasksWaitingTermination+0x58>)
 80079c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079ca:	f000 fa37 	bl	8007e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f810 	bl	80079f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079d4:	4b06      	ldr	r3, [pc, #24]	@ (80079f0 <prvCheckTasksWaitingTermination+0x58>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e1      	bne.n	80079a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000e14 	.word	0x20000e14
 80079ec:	20000e40 	.word	0x20000e40
 80079f0:	20000e28 	.word	0x20000e28

080079f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	334c      	adds	r3, #76	@ 0x4c
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fe11 	bl	8008628 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d108      	bne.n	8007a22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fb87 	bl	8008128 <vPortFree>
				vPortFree( pxTCB );
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fb84 	bl	8008128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a20:	e019      	b.n	8007a56 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d103      	bne.n	8007a34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fb7b 	bl	8008128 <vPortFree>
	}
 8007a32:	e010      	b.n	8007a56 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d00b      	beq.n	8007a56 <prvDeleteTCB+0x62>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60fb      	str	r3, [r7, #12]
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	e7fd      	b.n	8007a52 <prvDeleteTCB+0x5e>
	}
 8007a56:	bf00      	nop
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a66:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa4 <prvResetNextTaskUnblockTime+0x44>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <prvResetNextTaskUnblockTime+0x14>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e000      	b.n	8007a76 <prvResetNextTaskUnblockTime+0x16>
 8007a74:	2300      	movs	r3, #0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa8 <prvResetNextTaskUnblockTime+0x48>)
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a80:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a82:	e008      	b.n	8007a96 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a84:	4b07      	ldr	r3, [pc, #28]	@ (8007aa4 <prvResetNextTaskUnblockTime+0x44>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	4a05      	ldr	r2, [pc, #20]	@ (8007aa8 <prvResetNextTaskUnblockTime+0x48>)
 8007a94:	6013      	str	r3, [r2, #0]
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000df8 	.word	0x20000df8
 8007aa8:	20000e60 	.word	0x20000e60

08007aac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ab6:	4b29      	ldr	r3, [pc, #164]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007abc:	4b28      	ldr	r3, [pc, #160]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff fac1 	bl	800704a <uxListRemove>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10b      	bne.n	8007ae6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007ace:	4b24      	ldr	r3, [pc, #144]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	43da      	mvns	r2, r3
 8007adc:	4b21      	ldr	r3, [pc, #132]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	4a20      	ldr	r2, [pc, #128]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ae4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aec:	d10a      	bne.n	8007b04 <prvAddCurrentTaskToDelayedList+0x58>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007af4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3304      	adds	r3, #4
 8007afa:	4619      	mov	r1, r3
 8007afc:	481a      	ldr	r0, [pc, #104]	@ (8007b68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007afe:	f7ff fa47 	bl	8006f90 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b02:	e026      	b.n	8007b52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4413      	add	r3, r2
 8007b0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b0c:	4b14      	ldr	r3, [pc, #80]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d209      	bcs.n	8007b30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b1c:	4b13      	ldr	r3, [pc, #76]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	4b0f      	ldr	r3, [pc, #60]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3304      	adds	r3, #4
 8007b26:	4619      	mov	r1, r3
 8007b28:	4610      	mov	r0, r2
 8007b2a:	f7ff fa55 	bl	8006fd8 <vListInsert>
}
 8007b2e:	e010      	b.n	8007b52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b30:	4b0f      	ldr	r3, [pc, #60]	@ (8007b70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	4b0a      	ldr	r3, [pc, #40]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f7ff fa4b 	bl	8006fd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b42:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d202      	bcs.n	8007b52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b4c:	4a09      	ldr	r2, [pc, #36]	@ (8007b74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	6013      	str	r3, [r2, #0]
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000e44 	.word	0x20000e44
 8007b60:	20000d40 	.word	0x20000d40
 8007b64:	20000e48 	.word	0x20000e48
 8007b68:	20000e2c 	.word	0x20000e2c
 8007b6c:	20000dfc 	.word	0x20000dfc
 8007b70:	20000df8 	.word	0x20000df8
 8007b74:	20000e60 	.word	0x20000e60

08007b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3b04      	subs	r3, #4
 8007b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3b04      	subs	r3, #4
 8007b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f023 0201 	bic.w	r2, r3, #1
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3b04      	subs	r3, #4
 8007ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8007bdc <pxPortInitialiseStack+0x64>)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3b14      	subs	r3, #20
 8007bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3b04      	subs	r3, #4
 8007bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f06f 0202 	mvn.w	r2, #2
 8007bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3b20      	subs	r3, #32
 8007bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bce:	68fb      	ldr	r3, [r7, #12]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	08007be1 	.word	0x08007be1

08007be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bea:	4b13      	ldr	r3, [pc, #76]	@ (8007c38 <prvTaskExitError+0x58>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf2:	d00b      	beq.n	8007c0c <prvTaskExitError+0x2c>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	60fb      	str	r3, [r7, #12]
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	e7fd      	b.n	8007c08 <prvTaskExitError+0x28>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	60bb      	str	r3, [r7, #8]
}
 8007c1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c20:	bf00      	nop
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0fc      	beq.n	8007c22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c28:	bf00      	nop
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20000010 	.word	0x20000010
 8007c3c:	00000000 	.word	0x00000000

08007c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c40:	4b07      	ldr	r3, [pc, #28]	@ (8007c60 <pxCurrentTCBConst2>)
 8007c42:	6819      	ldr	r1, [r3, #0]
 8007c44:	6808      	ldr	r0, [r1, #0]
 8007c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4a:	f380 8809 	msr	PSP, r0
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f04f 0000 	mov.w	r0, #0
 8007c56:	f380 8811 	msr	BASEPRI, r0
 8007c5a:	4770      	bx	lr
 8007c5c:	f3af 8000 	nop.w

08007c60 <pxCurrentTCBConst2>:
 8007c60:	20000d40 	.word	0x20000d40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop

08007c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c68:	4808      	ldr	r0, [pc, #32]	@ (8007c8c <prvPortStartFirstTask+0x24>)
 8007c6a:	6800      	ldr	r0, [r0, #0]
 8007c6c:	6800      	ldr	r0, [r0, #0]
 8007c6e:	f380 8808 	msr	MSP, r0
 8007c72:	f04f 0000 	mov.w	r0, #0
 8007c76:	f380 8814 	msr	CONTROL, r0
 8007c7a:	b662      	cpsie	i
 8007c7c:	b661      	cpsie	f
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	df00      	svc	0
 8007c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c8a:	bf00      	nop
 8007c8c:	e000ed08 	.word	0xe000ed08

08007c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c96:	4b47      	ldr	r3, [pc, #284]	@ (8007db4 <xPortStartScheduler+0x124>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a47      	ldr	r2, [pc, #284]	@ (8007db8 <xPortStartScheduler+0x128>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d10b      	bne.n	8007cb8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	613b      	str	r3, [r7, #16]
}
 8007cb2:	bf00      	nop
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8007db4 <xPortStartScheduler+0x124>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8007dbc <xPortStartScheduler+0x12c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d10b      	bne.n	8007cda <xPortStartScheduler+0x4a>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	60fb      	str	r3, [r7, #12]
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop
 8007cd8:	e7fd      	b.n	8007cd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cda:	4b39      	ldr	r3, [pc, #228]	@ (8007dc0 <xPortStartScheduler+0x130>)
 8007cdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	22ff      	movs	r2, #255	@ 0xff
 8007cea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	4b31      	ldr	r3, [pc, #196]	@ (8007dc4 <xPortStartScheduler+0x134>)
 8007d00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d02:	4b31      	ldr	r3, [pc, #196]	@ (8007dc8 <xPortStartScheduler+0x138>)
 8007d04:	2207      	movs	r2, #7
 8007d06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d08:	e009      	b.n	8007d1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8007dc8 <xPortStartScheduler+0x138>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	4a2d      	ldr	r2, [pc, #180]	@ (8007dc8 <xPortStartScheduler+0x138>)
 8007d12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d26:	2b80      	cmp	r3, #128	@ 0x80
 8007d28:	d0ef      	beq.n	8007d0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d2a:	4b27      	ldr	r3, [pc, #156]	@ (8007dc8 <xPortStartScheduler+0x138>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f1c3 0307 	rsb	r3, r3, #7
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d00b      	beq.n	8007d4e <xPortStartScheduler+0xbe>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	60bb      	str	r3, [r7, #8]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007dc8 <xPortStartScheduler+0x138>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc8 <xPortStartScheduler+0x138>)
 8007d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d58:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc8 <xPortStartScheduler+0x138>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d60:	4a19      	ldr	r2, [pc, #100]	@ (8007dc8 <xPortStartScheduler+0x138>)
 8007d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d6c:	4b17      	ldr	r3, [pc, #92]	@ (8007dcc <xPortStartScheduler+0x13c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a16      	ldr	r2, [pc, #88]	@ (8007dcc <xPortStartScheduler+0x13c>)
 8007d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d78:	4b14      	ldr	r3, [pc, #80]	@ (8007dcc <xPortStartScheduler+0x13c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a13      	ldr	r2, [pc, #76]	@ (8007dcc <xPortStartScheduler+0x13c>)
 8007d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d84:	f000 f8da 	bl	8007f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d88:	4b11      	ldr	r3, [pc, #68]	@ (8007dd0 <xPortStartScheduler+0x140>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d8e:	f000 f8f9 	bl	8007f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d92:	4b10      	ldr	r3, [pc, #64]	@ (8007dd4 <xPortStartScheduler+0x144>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a0f      	ldr	r2, [pc, #60]	@ (8007dd4 <xPortStartScheduler+0x144>)
 8007d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d9e:	f7ff ff63 	bl	8007c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007da2:	f7ff fd3d 	bl	8007820 <vTaskSwitchContext>
	prvTaskExitError();
 8007da6:	f7ff ff1b 	bl	8007be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	e000ed00 	.word	0xe000ed00
 8007db8:	410fc271 	.word	0x410fc271
 8007dbc:	410fc270 	.word	0x410fc270
 8007dc0:	e000e400 	.word	0xe000e400
 8007dc4:	20000e6c 	.word	0x20000e6c
 8007dc8:	20000e70 	.word	0x20000e70
 8007dcc:	e000ed20 	.word	0xe000ed20
 8007dd0:	20000010 	.word	0x20000010
 8007dd4:	e000ef34 	.word	0xe000ef34

08007dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	607b      	str	r3, [r7, #4]
}
 8007df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007df2:	4b10      	ldr	r3, [pc, #64]	@ (8007e34 <vPortEnterCritical+0x5c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3301      	adds	r3, #1
 8007df8:	4a0e      	ldr	r2, [pc, #56]	@ (8007e34 <vPortEnterCritical+0x5c>)
 8007dfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8007e34 <vPortEnterCritical+0x5c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d110      	bne.n	8007e26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e04:	4b0c      	ldr	r3, [pc, #48]	@ (8007e38 <vPortEnterCritical+0x60>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00b      	beq.n	8007e26 <vPortEnterCritical+0x4e>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	603b      	str	r3, [r7, #0]
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	e7fd      	b.n	8007e22 <vPortEnterCritical+0x4a>
	}
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000010 	.word	0x20000010
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e42:	4b12      	ldr	r3, [pc, #72]	@ (8007e8c <vPortExitCritical+0x50>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10b      	bne.n	8007e62 <vPortExitCritical+0x26>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	607b      	str	r3, [r7, #4]
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	e7fd      	b.n	8007e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e62:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <vPortExitCritical+0x50>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	4a08      	ldr	r2, [pc, #32]	@ (8007e8c <vPortExitCritical+0x50>)
 8007e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e6c:	4b07      	ldr	r3, [pc, #28]	@ (8007e8c <vPortExitCritical+0x50>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d105      	bne.n	8007e80 <vPortExitCritical+0x44>
 8007e74:	2300      	movs	r3, #0
 8007e76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	20000010 	.word	0x20000010

08007e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e90:	f3ef 8009 	mrs	r0, PSP
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4b15      	ldr	r3, [pc, #84]	@ (8007ef0 <pxCurrentTCBConst>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	f01e 0f10 	tst.w	lr, #16
 8007ea0:	bf08      	it	eq
 8007ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eaa:	6010      	str	r0, [r2, #0]
 8007eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007eb4:	f380 8811 	msr	BASEPRI, r0
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f7ff fcae 	bl	8007820 <vTaskSwitchContext>
 8007ec4:	f04f 0000 	mov.w	r0, #0
 8007ec8:	f380 8811 	msr	BASEPRI, r0
 8007ecc:	bc09      	pop	{r0, r3}
 8007ece:	6819      	ldr	r1, [r3, #0]
 8007ed0:	6808      	ldr	r0, [r1, #0]
 8007ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed6:	f01e 0f10 	tst.w	lr, #16
 8007eda:	bf08      	it	eq
 8007edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ee0:	f380 8809 	msr	PSP, r0
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w

08007ef0 <pxCurrentTCBConst>:
 8007ef0:	20000d40 	.word	0x20000d40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop

08007ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	607b      	str	r3, [r7, #4]
}
 8007f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f12:	f7ff fbc7 	bl	80076a4 <xTaskIncrementTick>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f1c:	4b06      	ldr	r3, [pc, #24]	@ (8007f38 <SysTick_Handler+0x40>)
 8007f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	2300      	movs	r3, #0
 8007f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	f383 8811 	msr	BASEPRI, r3
}
 8007f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	e000ed04 	.word	0xe000ed04

08007f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f40:	4b0b      	ldr	r3, [pc, #44]	@ (8007f70 <vPortSetupTimerInterrupt+0x34>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f46:	4b0b      	ldr	r3, [pc, #44]	@ (8007f74 <vPortSetupTimerInterrupt+0x38>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f78 <vPortSetupTimerInterrupt+0x3c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a0a      	ldr	r2, [pc, #40]	@ (8007f7c <vPortSetupTimerInterrupt+0x40>)
 8007f52:	fba2 2303 	umull	r2, r3, r2, r3
 8007f56:	099b      	lsrs	r3, r3, #6
 8007f58:	4a09      	ldr	r2, [pc, #36]	@ (8007f80 <vPortSetupTimerInterrupt+0x44>)
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f5e:	4b04      	ldr	r3, [pc, #16]	@ (8007f70 <vPortSetupTimerInterrupt+0x34>)
 8007f60:	2207      	movs	r2, #7
 8007f62:	601a      	str	r2, [r3, #0]
}
 8007f64:	bf00      	nop
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	e000e010 	.word	0xe000e010
 8007f74:	e000e018 	.word	0xe000e018
 8007f78:	20000004 	.word	0x20000004
 8007f7c:	10624dd3 	.word	0x10624dd3
 8007f80:	e000e014 	.word	0xe000e014

08007f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f94 <vPortEnableVFP+0x10>
 8007f88:	6801      	ldr	r1, [r0, #0]
 8007f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f8e:	6001      	str	r1, [r0, #0]
 8007f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f92:	bf00      	nop
 8007f94:	e000ed88 	.word	0xe000ed88

08007f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	@ 0x28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fa4:	f7ff fac2 	bl	800752c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8008114 <pvPortMalloc+0x17c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fb0:	f000 f916 	bl	80081e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fb4:	4b58      	ldr	r3, [pc, #352]	@ (8008118 <pvPortMalloc+0x180>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f040 8090 	bne.w	80080e2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01e      	beq.n	8008006 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007fc8:	2208      	movs	r2, #8
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d015      	beq.n	8008006 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f023 0307 	bic.w	r3, r3, #7
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <pvPortMalloc+0x6e>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	617b      	str	r3, [r7, #20]
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	e7fd      	b.n	8008002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d06a      	beq.n	80080e2 <pvPortMalloc+0x14a>
 800800c:	4b43      	ldr	r3, [pc, #268]	@ (800811c <pvPortMalloc+0x184>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	429a      	cmp	r2, r3
 8008014:	d865      	bhi.n	80080e2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008016:	4b42      	ldr	r3, [pc, #264]	@ (8008120 <pvPortMalloc+0x188>)
 8008018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800801a:	4b41      	ldr	r3, [pc, #260]	@ (8008120 <pvPortMalloc+0x188>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008020:	e004      	b.n	800802c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d903      	bls.n	800803e <pvPortMalloc+0xa6>
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1f1      	bne.n	8008022 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800803e:	4b35      	ldr	r3, [pc, #212]	@ (8008114 <pvPortMalloc+0x17c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008044:	429a      	cmp	r2, r3
 8008046:	d04c      	beq.n	80080e2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2208      	movs	r2, #8
 800804e:	4413      	add	r3, r2
 8008050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	1ad2      	subs	r2, r2, r3
 8008062:	2308      	movs	r3, #8
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	429a      	cmp	r2, r3
 8008068:	d920      	bls.n	80080ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800806a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4413      	add	r3, r2
 8008070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <pvPortMalloc+0xfc>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	613b      	str	r3, [r7, #16]
}
 800808e:	bf00      	nop
 8008090:	bf00      	nop
 8008092:	e7fd      	b.n	8008090 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	1ad2      	subs	r2, r2, r3
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080a6:	69b8      	ldr	r0, [r7, #24]
 80080a8:	f000 f8fc 	bl	80082a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080ac:	4b1b      	ldr	r3, [pc, #108]	@ (800811c <pvPortMalloc+0x184>)
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	4a19      	ldr	r2, [pc, #100]	@ (800811c <pvPortMalloc+0x184>)
 80080b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080ba:	4b18      	ldr	r3, [pc, #96]	@ (800811c <pvPortMalloc+0x184>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	4b19      	ldr	r3, [pc, #100]	@ (8008124 <pvPortMalloc+0x18c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d203      	bcs.n	80080ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080c6:	4b15      	ldr	r3, [pc, #84]	@ (800811c <pvPortMalloc+0x184>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a16      	ldr	r2, [pc, #88]	@ (8008124 <pvPortMalloc+0x18c>)
 80080cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	4b11      	ldr	r3, [pc, #68]	@ (8008118 <pvPortMalloc+0x180>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080e2:	f7ff fa31 	bl	8007548 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <pvPortMalloc+0x170>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	60fb      	str	r3, [r7, #12]
}
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	e7fd      	b.n	8008104 <pvPortMalloc+0x16c>
	return pvReturn;
 8008108:	69fb      	ldr	r3, [r7, #28]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3728      	adds	r7, #40	@ 0x28
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20002634 	.word	0x20002634
 8008118:	20002640 	.word	0x20002640
 800811c:	20002638 	.word	0x20002638
 8008120:	2000262c 	.word	0x2000262c
 8008124:	2000263c 	.word	0x2000263c

08008128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d04a      	beq.n	80081d0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800813a:	2308      	movs	r3, #8
 800813c:	425b      	negs	r3, r3
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4413      	add	r3, r2
 8008142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	4b22      	ldr	r3, [pc, #136]	@ (80081d8 <vPortFree+0xb0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4013      	ands	r3, r2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10b      	bne.n	800816e <vPortFree+0x46>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	60fb      	str	r3, [r7, #12]
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	e7fd      	b.n	800816a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00b      	beq.n	800818e <vPortFree+0x66>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60bb      	str	r3, [r7, #8]
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	4b11      	ldr	r3, [pc, #68]	@ (80081d8 <vPortFree+0xb0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4013      	ands	r3, r2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d019      	beq.n	80081d0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d115      	bne.n	80081d0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	4b0b      	ldr	r3, [pc, #44]	@ (80081d8 <vPortFree+0xb0>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	43db      	mvns	r3, r3
 80081ae:	401a      	ands	r2, r3
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081b4:	f7ff f9ba 	bl	800752c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	4b07      	ldr	r3, [pc, #28]	@ (80081dc <vPortFree+0xb4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4413      	add	r3, r2
 80081c2:	4a06      	ldr	r2, [pc, #24]	@ (80081dc <vPortFree+0xb4>)
 80081c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081c6:	6938      	ldr	r0, [r7, #16]
 80081c8:	f000 f86c 	bl	80082a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80081cc:	f7ff f9bc 	bl	8007548 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081d0:	bf00      	nop
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	20002640 	.word	0x20002640
 80081dc:	20002638 	.word	0x20002638

080081e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081e6:	f241 73b8 	movw	r3, #6072	@ 0x17b8
 80081ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081ec:	4b27      	ldr	r3, [pc, #156]	@ (800828c <prvHeapInit+0xac>)
 80081ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00c      	beq.n	8008214 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3307      	adds	r3, #7
 80081fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0307 	bic.w	r3, r3, #7
 8008206:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	4a1f      	ldr	r2, [pc, #124]	@ (800828c <prvHeapInit+0xac>)
 8008210:	4413      	add	r3, r2
 8008212:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008218:	4a1d      	ldr	r2, [pc, #116]	@ (8008290 <prvHeapInit+0xb0>)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800821e:	4b1c      	ldr	r3, [pc, #112]	@ (8008290 <prvHeapInit+0xb0>)
 8008220:	2200      	movs	r2, #0
 8008222:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800822c:	2208      	movs	r2, #8
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0307 	bic.w	r3, r3, #7
 800823a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4a15      	ldr	r2, [pc, #84]	@ (8008294 <prvHeapInit+0xb4>)
 8008240:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008242:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <prvHeapInit+0xb4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2200      	movs	r2, #0
 8008248:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800824a:	4b12      	ldr	r3, [pc, #72]	@ (8008294 <prvHeapInit+0xb4>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	1ad2      	subs	r2, r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008260:	4b0c      	ldr	r3, [pc, #48]	@ (8008294 <prvHeapInit+0xb4>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	4a0a      	ldr	r2, [pc, #40]	@ (8008298 <prvHeapInit+0xb8>)
 800826e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	4a09      	ldr	r2, [pc, #36]	@ (800829c <prvHeapInit+0xbc>)
 8008276:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008278:	4b09      	ldr	r3, [pc, #36]	@ (80082a0 <prvHeapInit+0xc0>)
 800827a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800827e:	601a      	str	r2, [r3, #0]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	20000e74 	.word	0x20000e74
 8008290:	2000262c 	.word	0x2000262c
 8008294:	20002634 	.word	0x20002634
 8008298:	2000263c 	.word	0x2000263c
 800829c:	20002638 	.word	0x20002638
 80082a0:	20002640 	.word	0x20002640

080082a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082ac:	4b28      	ldr	r3, [pc, #160]	@ (8008350 <prvInsertBlockIntoFreeList+0xac>)
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	e002      	b.n	80082b8 <prvInsertBlockIntoFreeList+0x14>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d8f7      	bhi.n	80082b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	4413      	add	r3, r2
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d108      	bne.n	80082e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	441a      	add	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	441a      	add	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d118      	bne.n	800832c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	4b15      	ldr	r3, [pc, #84]	@ (8008354 <prvInsertBlockIntoFreeList+0xb0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d00d      	beq.n	8008322 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	441a      	add	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	e008      	b.n	8008334 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008322:	4b0c      	ldr	r3, [pc, #48]	@ (8008354 <prvInsertBlockIntoFreeList+0xb0>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	e003      	b.n	8008334 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	429a      	cmp	r2, r3
 800833a:	d002      	beq.n	8008342 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008342:	bf00      	nop
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	2000262c 	.word	0x2000262c
 8008354:	20002634 	.word	0x20002634

08008358 <sbrk_aligned>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	4e0f      	ldr	r6, [pc, #60]	@ (8008398 <sbrk_aligned+0x40>)
 800835c:	460c      	mov	r4, r1
 800835e:	6831      	ldr	r1, [r6, #0]
 8008360:	4605      	mov	r5, r0
 8008362:	b911      	cbnz	r1, 800836a <sbrk_aligned+0x12>
 8008364:	f000 f9b6 	bl	80086d4 <_sbrk_r>
 8008368:	6030      	str	r0, [r6, #0]
 800836a:	4621      	mov	r1, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f000 f9b1 	bl	80086d4 <_sbrk_r>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	d103      	bne.n	800837e <sbrk_aligned+0x26>
 8008376:	f04f 34ff 	mov.w	r4, #4294967295
 800837a:	4620      	mov	r0, r4
 800837c:	bd70      	pop	{r4, r5, r6, pc}
 800837e:	1cc4      	adds	r4, r0, #3
 8008380:	f024 0403 	bic.w	r4, r4, #3
 8008384:	42a0      	cmp	r0, r4
 8008386:	d0f8      	beq.n	800837a <sbrk_aligned+0x22>
 8008388:	1a21      	subs	r1, r4, r0
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f9a2 	bl	80086d4 <_sbrk_r>
 8008390:	3001      	adds	r0, #1
 8008392:	d1f2      	bne.n	800837a <sbrk_aligned+0x22>
 8008394:	e7ef      	b.n	8008376 <sbrk_aligned+0x1e>
 8008396:	bf00      	nop
 8008398:	20002644 	.word	0x20002644

0800839c <_malloc_r>:
 800839c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a0:	1ccd      	adds	r5, r1, #3
 80083a2:	f025 0503 	bic.w	r5, r5, #3
 80083a6:	3508      	adds	r5, #8
 80083a8:	2d0c      	cmp	r5, #12
 80083aa:	bf38      	it	cc
 80083ac:	250c      	movcc	r5, #12
 80083ae:	2d00      	cmp	r5, #0
 80083b0:	4606      	mov	r6, r0
 80083b2:	db01      	blt.n	80083b8 <_malloc_r+0x1c>
 80083b4:	42a9      	cmp	r1, r5
 80083b6:	d904      	bls.n	80083c2 <_malloc_r+0x26>
 80083b8:	230c      	movs	r3, #12
 80083ba:	6033      	str	r3, [r6, #0]
 80083bc:	2000      	movs	r0, #0
 80083be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008498 <_malloc_r+0xfc>
 80083c6:	f000 f869 	bl	800849c <__malloc_lock>
 80083ca:	f8d8 3000 	ldr.w	r3, [r8]
 80083ce:	461c      	mov	r4, r3
 80083d0:	bb44      	cbnz	r4, 8008424 <_malloc_r+0x88>
 80083d2:	4629      	mov	r1, r5
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7ff ffbf 	bl	8008358 <sbrk_aligned>
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	4604      	mov	r4, r0
 80083de:	d158      	bne.n	8008492 <_malloc_r+0xf6>
 80083e0:	f8d8 4000 	ldr.w	r4, [r8]
 80083e4:	4627      	mov	r7, r4
 80083e6:	2f00      	cmp	r7, #0
 80083e8:	d143      	bne.n	8008472 <_malloc_r+0xd6>
 80083ea:	2c00      	cmp	r4, #0
 80083ec:	d04b      	beq.n	8008486 <_malloc_r+0xea>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	4639      	mov	r1, r7
 80083f2:	4630      	mov	r0, r6
 80083f4:	eb04 0903 	add.w	r9, r4, r3
 80083f8:	f000 f96c 	bl	80086d4 <_sbrk_r>
 80083fc:	4581      	cmp	r9, r0
 80083fe:	d142      	bne.n	8008486 <_malloc_r+0xea>
 8008400:	6821      	ldr	r1, [r4, #0]
 8008402:	1a6d      	subs	r5, r5, r1
 8008404:	4629      	mov	r1, r5
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ffa6 	bl	8008358 <sbrk_aligned>
 800840c:	3001      	adds	r0, #1
 800840e:	d03a      	beq.n	8008486 <_malloc_r+0xea>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	442b      	add	r3, r5
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	f8d8 3000 	ldr.w	r3, [r8]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	bb62      	cbnz	r2, 8008478 <_malloc_r+0xdc>
 800841e:	f8c8 7000 	str.w	r7, [r8]
 8008422:	e00f      	b.n	8008444 <_malloc_r+0xa8>
 8008424:	6822      	ldr	r2, [r4, #0]
 8008426:	1b52      	subs	r2, r2, r5
 8008428:	d420      	bmi.n	800846c <_malloc_r+0xd0>
 800842a:	2a0b      	cmp	r2, #11
 800842c:	d917      	bls.n	800845e <_malloc_r+0xc2>
 800842e:	1961      	adds	r1, r4, r5
 8008430:	42a3      	cmp	r3, r4
 8008432:	6025      	str	r5, [r4, #0]
 8008434:	bf18      	it	ne
 8008436:	6059      	strne	r1, [r3, #4]
 8008438:	6863      	ldr	r3, [r4, #4]
 800843a:	bf08      	it	eq
 800843c:	f8c8 1000 	streq.w	r1, [r8]
 8008440:	5162      	str	r2, [r4, r5]
 8008442:	604b      	str	r3, [r1, #4]
 8008444:	4630      	mov	r0, r6
 8008446:	f000 f82f 	bl	80084a8 <__malloc_unlock>
 800844a:	f104 000b 	add.w	r0, r4, #11
 800844e:	1d23      	adds	r3, r4, #4
 8008450:	f020 0007 	bic.w	r0, r0, #7
 8008454:	1ac2      	subs	r2, r0, r3
 8008456:	bf1c      	itt	ne
 8008458:	1a1b      	subne	r3, r3, r0
 800845a:	50a3      	strne	r3, [r4, r2]
 800845c:	e7af      	b.n	80083be <_malloc_r+0x22>
 800845e:	6862      	ldr	r2, [r4, #4]
 8008460:	42a3      	cmp	r3, r4
 8008462:	bf0c      	ite	eq
 8008464:	f8c8 2000 	streq.w	r2, [r8]
 8008468:	605a      	strne	r2, [r3, #4]
 800846a:	e7eb      	b.n	8008444 <_malloc_r+0xa8>
 800846c:	4623      	mov	r3, r4
 800846e:	6864      	ldr	r4, [r4, #4]
 8008470:	e7ae      	b.n	80083d0 <_malloc_r+0x34>
 8008472:	463c      	mov	r4, r7
 8008474:	687f      	ldr	r7, [r7, #4]
 8008476:	e7b6      	b.n	80083e6 <_malloc_r+0x4a>
 8008478:	461a      	mov	r2, r3
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	42a3      	cmp	r3, r4
 800847e:	d1fb      	bne.n	8008478 <_malloc_r+0xdc>
 8008480:	2300      	movs	r3, #0
 8008482:	6053      	str	r3, [r2, #4]
 8008484:	e7de      	b.n	8008444 <_malloc_r+0xa8>
 8008486:	230c      	movs	r3, #12
 8008488:	6033      	str	r3, [r6, #0]
 800848a:	4630      	mov	r0, r6
 800848c:	f000 f80c 	bl	80084a8 <__malloc_unlock>
 8008490:	e794      	b.n	80083bc <_malloc_r+0x20>
 8008492:	6005      	str	r5, [r0, #0]
 8008494:	e7d6      	b.n	8008444 <_malloc_r+0xa8>
 8008496:	bf00      	nop
 8008498:	20002648 	.word	0x20002648

0800849c <__malloc_lock>:
 800849c:	4801      	ldr	r0, [pc, #4]	@ (80084a4 <__malloc_lock+0x8>)
 800849e:	f000 b953 	b.w	8008748 <__retarget_lock_acquire_recursive>
 80084a2:	bf00      	nop
 80084a4:	20002788 	.word	0x20002788

080084a8 <__malloc_unlock>:
 80084a8:	4801      	ldr	r0, [pc, #4]	@ (80084b0 <__malloc_unlock+0x8>)
 80084aa:	f000 b94e 	b.w	800874a <__retarget_lock_release_recursive>
 80084ae:	bf00      	nop
 80084b0:	20002788 	.word	0x20002788

080084b4 <siprintf>:
 80084b4:	b40e      	push	{r1, r2, r3}
 80084b6:	b500      	push	{lr}
 80084b8:	b09c      	sub	sp, #112	@ 0x70
 80084ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80084bc:	9002      	str	r0, [sp, #8]
 80084be:	9006      	str	r0, [sp, #24]
 80084c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80084c4:	4809      	ldr	r0, [pc, #36]	@ (80084ec <siprintf+0x38>)
 80084c6:	9107      	str	r1, [sp, #28]
 80084c8:	9104      	str	r1, [sp, #16]
 80084ca:	4909      	ldr	r1, [pc, #36]	@ (80084f0 <siprintf+0x3c>)
 80084cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d0:	9105      	str	r1, [sp, #20]
 80084d2:	6800      	ldr	r0, [r0, #0]
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	a902      	add	r1, sp, #8
 80084d8:	f000 f9ec 	bl	80088b4 <_svfiprintf_r>
 80084dc:	9b02      	ldr	r3, [sp, #8]
 80084de:	2200      	movs	r2, #0
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	b01c      	add	sp, #112	@ 0x70
 80084e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084e8:	b003      	add	sp, #12
 80084ea:	4770      	bx	lr
 80084ec:	20000014 	.word	0x20000014
 80084f0:	ffff0208 	.word	0xffff0208

080084f4 <siscanf>:
 80084f4:	b40e      	push	{r1, r2, r3}
 80084f6:	b530      	push	{r4, r5, lr}
 80084f8:	b09c      	sub	sp, #112	@ 0x70
 80084fa:	ac1f      	add	r4, sp, #124	@ 0x7c
 80084fc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008500:	f854 5b04 	ldr.w	r5, [r4], #4
 8008504:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008508:	9002      	str	r0, [sp, #8]
 800850a:	9006      	str	r0, [sp, #24]
 800850c:	f7f7 fe60 	bl	80001d0 <strlen>
 8008510:	4b0b      	ldr	r3, [pc, #44]	@ (8008540 <siscanf+0x4c>)
 8008512:	9003      	str	r0, [sp, #12]
 8008514:	9007      	str	r0, [sp, #28]
 8008516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008518:	480a      	ldr	r0, [pc, #40]	@ (8008544 <siscanf+0x50>)
 800851a:	9401      	str	r4, [sp, #4]
 800851c:	2300      	movs	r3, #0
 800851e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008520:	9314      	str	r3, [sp, #80]	@ 0x50
 8008522:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008526:	f8ad 3016 	strh.w	r3, [sp, #22]
 800852a:	462a      	mov	r2, r5
 800852c:	4623      	mov	r3, r4
 800852e:	a902      	add	r1, sp, #8
 8008530:	6800      	ldr	r0, [r0, #0]
 8008532:	f000 fb13 	bl	8008b5c <__ssvfiscanf_r>
 8008536:	b01c      	add	sp, #112	@ 0x70
 8008538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800853c:	b003      	add	sp, #12
 800853e:	4770      	bx	lr
 8008540:	08008549 	.word	0x08008549
 8008544:	20000014 	.word	0x20000014

08008548 <__seofread>:
 8008548:	2000      	movs	r0, #0
 800854a:	4770      	bx	lr

0800854c <_vsniprintf_r>:
 800854c:	b530      	push	{r4, r5, lr}
 800854e:	4614      	mov	r4, r2
 8008550:	2c00      	cmp	r4, #0
 8008552:	b09b      	sub	sp, #108	@ 0x6c
 8008554:	4605      	mov	r5, r0
 8008556:	461a      	mov	r2, r3
 8008558:	da05      	bge.n	8008566 <_vsniprintf_r+0x1a>
 800855a:	238b      	movs	r3, #139	@ 0x8b
 800855c:	6003      	str	r3, [r0, #0]
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
 8008562:	b01b      	add	sp, #108	@ 0x6c
 8008564:	bd30      	pop	{r4, r5, pc}
 8008566:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800856a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800856e:	bf14      	ite	ne
 8008570:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008574:	4623      	moveq	r3, r4
 8008576:	9302      	str	r3, [sp, #8]
 8008578:	9305      	str	r3, [sp, #20]
 800857a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800857e:	9100      	str	r1, [sp, #0]
 8008580:	9104      	str	r1, [sp, #16]
 8008582:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008586:	4669      	mov	r1, sp
 8008588:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800858a:	f000 f993 	bl	80088b4 <_svfiprintf_r>
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	bfbc      	itt	lt
 8008592:	238b      	movlt	r3, #139	@ 0x8b
 8008594:	602b      	strlt	r3, [r5, #0]
 8008596:	2c00      	cmp	r4, #0
 8008598:	d0e3      	beq.n	8008562 <_vsniprintf_r+0x16>
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
 80085a0:	e7df      	b.n	8008562 <_vsniprintf_r+0x16>
	...

080085a4 <vsniprintf>:
 80085a4:	b507      	push	{r0, r1, r2, lr}
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	4613      	mov	r3, r2
 80085aa:	460a      	mov	r2, r1
 80085ac:	4601      	mov	r1, r0
 80085ae:	4803      	ldr	r0, [pc, #12]	@ (80085bc <vsniprintf+0x18>)
 80085b0:	6800      	ldr	r0, [r0, #0]
 80085b2:	f7ff ffcb 	bl	800854c <_vsniprintf_r>
 80085b6:	b003      	add	sp, #12
 80085b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80085bc:	20000014 	.word	0x20000014

080085c0 <memmove>:
 80085c0:	4288      	cmp	r0, r1
 80085c2:	b510      	push	{r4, lr}
 80085c4:	eb01 0402 	add.w	r4, r1, r2
 80085c8:	d902      	bls.n	80085d0 <memmove+0x10>
 80085ca:	4284      	cmp	r4, r0
 80085cc:	4623      	mov	r3, r4
 80085ce:	d807      	bhi.n	80085e0 <memmove+0x20>
 80085d0:	1e43      	subs	r3, r0, #1
 80085d2:	42a1      	cmp	r1, r4
 80085d4:	d008      	beq.n	80085e8 <memmove+0x28>
 80085d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085de:	e7f8      	b.n	80085d2 <memmove+0x12>
 80085e0:	4402      	add	r2, r0
 80085e2:	4601      	mov	r1, r0
 80085e4:	428a      	cmp	r2, r1
 80085e6:	d100      	bne.n	80085ea <memmove+0x2a>
 80085e8:	bd10      	pop	{r4, pc}
 80085ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085f2:	e7f7      	b.n	80085e4 <memmove+0x24>

080085f4 <memset>:
 80085f4:	4402      	add	r2, r0
 80085f6:	4603      	mov	r3, r0
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d100      	bne.n	80085fe <memset+0xa>
 80085fc:	4770      	bx	lr
 80085fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008602:	e7f9      	b.n	80085f8 <memset+0x4>

08008604 <strncmp>:
 8008604:	b510      	push	{r4, lr}
 8008606:	b16a      	cbz	r2, 8008624 <strncmp+0x20>
 8008608:	3901      	subs	r1, #1
 800860a:	1884      	adds	r4, r0, r2
 800860c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008610:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008614:	429a      	cmp	r2, r3
 8008616:	d103      	bne.n	8008620 <strncmp+0x1c>
 8008618:	42a0      	cmp	r0, r4
 800861a:	d001      	beq.n	8008620 <strncmp+0x1c>
 800861c:	2a00      	cmp	r2, #0
 800861e:	d1f5      	bne.n	800860c <strncmp+0x8>
 8008620:	1ad0      	subs	r0, r2, r3
 8008622:	bd10      	pop	{r4, pc}
 8008624:	4610      	mov	r0, r2
 8008626:	e7fc      	b.n	8008622 <strncmp+0x1e>

08008628 <_reclaim_reent>:
 8008628:	4b29      	ldr	r3, [pc, #164]	@ (80086d0 <_reclaim_reent+0xa8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4283      	cmp	r3, r0
 800862e:	b570      	push	{r4, r5, r6, lr}
 8008630:	4604      	mov	r4, r0
 8008632:	d04b      	beq.n	80086cc <_reclaim_reent+0xa4>
 8008634:	69c3      	ldr	r3, [r0, #28]
 8008636:	b1ab      	cbz	r3, 8008664 <_reclaim_reent+0x3c>
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	b16b      	cbz	r3, 8008658 <_reclaim_reent+0x30>
 800863c:	2500      	movs	r5, #0
 800863e:	69e3      	ldr	r3, [r4, #28]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	5959      	ldr	r1, [r3, r5]
 8008644:	2900      	cmp	r1, #0
 8008646:	d13b      	bne.n	80086c0 <_reclaim_reent+0x98>
 8008648:	3504      	adds	r5, #4
 800864a:	2d80      	cmp	r5, #128	@ 0x80
 800864c:	d1f7      	bne.n	800863e <_reclaim_reent+0x16>
 800864e:	69e3      	ldr	r3, [r4, #28]
 8008650:	4620      	mov	r0, r4
 8008652:	68d9      	ldr	r1, [r3, #12]
 8008654:	f000 f888 	bl	8008768 <_free_r>
 8008658:	69e3      	ldr	r3, [r4, #28]
 800865a:	6819      	ldr	r1, [r3, #0]
 800865c:	b111      	cbz	r1, 8008664 <_reclaim_reent+0x3c>
 800865e:	4620      	mov	r0, r4
 8008660:	f000 f882 	bl	8008768 <_free_r>
 8008664:	6961      	ldr	r1, [r4, #20]
 8008666:	b111      	cbz	r1, 800866e <_reclaim_reent+0x46>
 8008668:	4620      	mov	r0, r4
 800866a:	f000 f87d 	bl	8008768 <_free_r>
 800866e:	69e1      	ldr	r1, [r4, #28]
 8008670:	b111      	cbz	r1, 8008678 <_reclaim_reent+0x50>
 8008672:	4620      	mov	r0, r4
 8008674:	f000 f878 	bl	8008768 <_free_r>
 8008678:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800867a:	b111      	cbz	r1, 8008682 <_reclaim_reent+0x5a>
 800867c:	4620      	mov	r0, r4
 800867e:	f000 f873 	bl	8008768 <_free_r>
 8008682:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008684:	b111      	cbz	r1, 800868c <_reclaim_reent+0x64>
 8008686:	4620      	mov	r0, r4
 8008688:	f000 f86e 	bl	8008768 <_free_r>
 800868c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800868e:	b111      	cbz	r1, 8008696 <_reclaim_reent+0x6e>
 8008690:	4620      	mov	r0, r4
 8008692:	f000 f869 	bl	8008768 <_free_r>
 8008696:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008698:	b111      	cbz	r1, 80086a0 <_reclaim_reent+0x78>
 800869a:	4620      	mov	r0, r4
 800869c:	f000 f864 	bl	8008768 <_free_r>
 80086a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80086a2:	b111      	cbz	r1, 80086aa <_reclaim_reent+0x82>
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 f85f 	bl	8008768 <_free_r>
 80086aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80086ac:	b111      	cbz	r1, 80086b4 <_reclaim_reent+0x8c>
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 f85a 	bl	8008768 <_free_r>
 80086b4:	6a23      	ldr	r3, [r4, #32]
 80086b6:	b14b      	cbz	r3, 80086cc <_reclaim_reent+0xa4>
 80086b8:	4620      	mov	r0, r4
 80086ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086be:	4718      	bx	r3
 80086c0:	680e      	ldr	r6, [r1, #0]
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 f850 	bl	8008768 <_free_r>
 80086c8:	4631      	mov	r1, r6
 80086ca:	e7bb      	b.n	8008644 <_reclaim_reent+0x1c>
 80086cc:	bd70      	pop	{r4, r5, r6, pc}
 80086ce:	bf00      	nop
 80086d0:	20000014 	.word	0x20000014

080086d4 <_sbrk_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d06      	ldr	r5, [pc, #24]	@ (80086f0 <_sbrk_r+0x1c>)
 80086d8:	2300      	movs	r3, #0
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	f7f8 ff2e 	bl	8001540 <_sbrk>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_sbrk_r+0x1a>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_sbrk_r+0x1a>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20002784 	.word	0x20002784

080086f4 <__errno>:
 80086f4:	4b01      	ldr	r3, [pc, #4]	@ (80086fc <__errno+0x8>)
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	20000014 	.word	0x20000014

08008700 <__libc_init_array>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	4d0d      	ldr	r5, [pc, #52]	@ (8008738 <__libc_init_array+0x38>)
 8008704:	4c0d      	ldr	r4, [pc, #52]	@ (800873c <__libc_init_array+0x3c>)
 8008706:	1b64      	subs	r4, r4, r5
 8008708:	10a4      	asrs	r4, r4, #2
 800870a:	2600      	movs	r6, #0
 800870c:	42a6      	cmp	r6, r4
 800870e:	d109      	bne.n	8008724 <__libc_init_array+0x24>
 8008710:	4d0b      	ldr	r5, [pc, #44]	@ (8008740 <__libc_init_array+0x40>)
 8008712:	4c0c      	ldr	r4, [pc, #48]	@ (8008744 <__libc_init_array+0x44>)
 8008714:	f001 f808 	bl	8009728 <_init>
 8008718:	1b64      	subs	r4, r4, r5
 800871a:	10a4      	asrs	r4, r4, #2
 800871c:	2600      	movs	r6, #0
 800871e:	42a6      	cmp	r6, r4
 8008720:	d105      	bne.n	800872e <__libc_init_array+0x2e>
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	f855 3b04 	ldr.w	r3, [r5], #4
 8008728:	4798      	blx	r3
 800872a:	3601      	adds	r6, #1
 800872c:	e7ee      	b.n	800870c <__libc_init_array+0xc>
 800872e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008732:	4798      	blx	r3
 8008734:	3601      	adds	r6, #1
 8008736:	e7f2      	b.n	800871e <__libc_init_array+0x1e>
 8008738:	0800a27c 	.word	0x0800a27c
 800873c:	0800a27c 	.word	0x0800a27c
 8008740:	0800a27c 	.word	0x0800a27c
 8008744:	0800a280 	.word	0x0800a280

08008748 <__retarget_lock_acquire_recursive>:
 8008748:	4770      	bx	lr

0800874a <__retarget_lock_release_recursive>:
 800874a:	4770      	bx	lr

0800874c <memcpy>:
 800874c:	440a      	add	r2, r1
 800874e:	4291      	cmp	r1, r2
 8008750:	f100 33ff 	add.w	r3, r0, #4294967295
 8008754:	d100      	bne.n	8008758 <memcpy+0xc>
 8008756:	4770      	bx	lr
 8008758:	b510      	push	{r4, lr}
 800875a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800875e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008762:	4291      	cmp	r1, r2
 8008764:	d1f9      	bne.n	800875a <memcpy+0xe>
 8008766:	bd10      	pop	{r4, pc}

08008768 <_free_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4605      	mov	r5, r0
 800876c:	2900      	cmp	r1, #0
 800876e:	d041      	beq.n	80087f4 <_free_r+0x8c>
 8008770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008774:	1f0c      	subs	r4, r1, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	bfb8      	it	lt
 800877a:	18e4      	addlt	r4, r4, r3
 800877c:	f7ff fe8e 	bl	800849c <__malloc_lock>
 8008780:	4a1d      	ldr	r2, [pc, #116]	@ (80087f8 <_free_r+0x90>)
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	b933      	cbnz	r3, 8008794 <_free_r+0x2c>
 8008786:	6063      	str	r3, [r4, #4]
 8008788:	6014      	str	r4, [r2, #0]
 800878a:	4628      	mov	r0, r5
 800878c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008790:	f7ff be8a 	b.w	80084a8 <__malloc_unlock>
 8008794:	42a3      	cmp	r3, r4
 8008796:	d908      	bls.n	80087aa <_free_r+0x42>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	1821      	adds	r1, r4, r0
 800879c:	428b      	cmp	r3, r1
 800879e:	bf01      	itttt	eq
 80087a0:	6819      	ldreq	r1, [r3, #0]
 80087a2:	685b      	ldreq	r3, [r3, #4]
 80087a4:	1809      	addeq	r1, r1, r0
 80087a6:	6021      	streq	r1, [r4, #0]
 80087a8:	e7ed      	b.n	8008786 <_free_r+0x1e>
 80087aa:	461a      	mov	r2, r3
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	b10b      	cbz	r3, 80087b4 <_free_r+0x4c>
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	d9fa      	bls.n	80087aa <_free_r+0x42>
 80087b4:	6811      	ldr	r1, [r2, #0]
 80087b6:	1850      	adds	r0, r2, r1
 80087b8:	42a0      	cmp	r0, r4
 80087ba:	d10b      	bne.n	80087d4 <_free_r+0x6c>
 80087bc:	6820      	ldr	r0, [r4, #0]
 80087be:	4401      	add	r1, r0
 80087c0:	1850      	adds	r0, r2, r1
 80087c2:	4283      	cmp	r3, r0
 80087c4:	6011      	str	r1, [r2, #0]
 80087c6:	d1e0      	bne.n	800878a <_free_r+0x22>
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	6053      	str	r3, [r2, #4]
 80087ce:	4408      	add	r0, r1
 80087d0:	6010      	str	r0, [r2, #0]
 80087d2:	e7da      	b.n	800878a <_free_r+0x22>
 80087d4:	d902      	bls.n	80087dc <_free_r+0x74>
 80087d6:	230c      	movs	r3, #12
 80087d8:	602b      	str	r3, [r5, #0]
 80087da:	e7d6      	b.n	800878a <_free_r+0x22>
 80087dc:	6820      	ldr	r0, [r4, #0]
 80087de:	1821      	adds	r1, r4, r0
 80087e0:	428b      	cmp	r3, r1
 80087e2:	bf04      	itt	eq
 80087e4:	6819      	ldreq	r1, [r3, #0]
 80087e6:	685b      	ldreq	r3, [r3, #4]
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	bf04      	itt	eq
 80087ec:	1809      	addeq	r1, r1, r0
 80087ee:	6021      	streq	r1, [r4, #0]
 80087f0:	6054      	str	r4, [r2, #4]
 80087f2:	e7ca      	b.n	800878a <_free_r+0x22>
 80087f4:	bd38      	pop	{r3, r4, r5, pc}
 80087f6:	bf00      	nop
 80087f8:	20002648 	.word	0x20002648

080087fc <__ssputs_r>:
 80087fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008800:	688e      	ldr	r6, [r1, #8]
 8008802:	461f      	mov	r7, r3
 8008804:	42be      	cmp	r6, r7
 8008806:	680b      	ldr	r3, [r1, #0]
 8008808:	4682      	mov	sl, r0
 800880a:	460c      	mov	r4, r1
 800880c:	4690      	mov	r8, r2
 800880e:	d82d      	bhi.n	800886c <__ssputs_r+0x70>
 8008810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008814:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008818:	d026      	beq.n	8008868 <__ssputs_r+0x6c>
 800881a:	6965      	ldr	r5, [r4, #20]
 800881c:	6909      	ldr	r1, [r1, #16]
 800881e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008822:	eba3 0901 	sub.w	r9, r3, r1
 8008826:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800882a:	1c7b      	adds	r3, r7, #1
 800882c:	444b      	add	r3, r9
 800882e:	106d      	asrs	r5, r5, #1
 8008830:	429d      	cmp	r5, r3
 8008832:	bf38      	it	cc
 8008834:	461d      	movcc	r5, r3
 8008836:	0553      	lsls	r3, r2, #21
 8008838:	d527      	bpl.n	800888a <__ssputs_r+0x8e>
 800883a:	4629      	mov	r1, r5
 800883c:	f7ff fdae 	bl	800839c <_malloc_r>
 8008840:	4606      	mov	r6, r0
 8008842:	b360      	cbz	r0, 800889e <__ssputs_r+0xa2>
 8008844:	6921      	ldr	r1, [r4, #16]
 8008846:	464a      	mov	r2, r9
 8008848:	f7ff ff80 	bl	800874c <memcpy>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	6126      	str	r6, [r4, #16]
 800885a:	6165      	str	r5, [r4, #20]
 800885c:	444e      	add	r6, r9
 800885e:	eba5 0509 	sub.w	r5, r5, r9
 8008862:	6026      	str	r6, [r4, #0]
 8008864:	60a5      	str	r5, [r4, #8]
 8008866:	463e      	mov	r6, r7
 8008868:	42be      	cmp	r6, r7
 800886a:	d900      	bls.n	800886e <__ssputs_r+0x72>
 800886c:	463e      	mov	r6, r7
 800886e:	6820      	ldr	r0, [r4, #0]
 8008870:	4632      	mov	r2, r6
 8008872:	4641      	mov	r1, r8
 8008874:	f7ff fea4 	bl	80085c0 <memmove>
 8008878:	68a3      	ldr	r3, [r4, #8]
 800887a:	1b9b      	subs	r3, r3, r6
 800887c:	60a3      	str	r3, [r4, #8]
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	4433      	add	r3, r6
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	2000      	movs	r0, #0
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	462a      	mov	r2, r5
 800888c:	f000 fe29 	bl	80094e2 <_realloc_r>
 8008890:	4606      	mov	r6, r0
 8008892:	2800      	cmp	r0, #0
 8008894:	d1e0      	bne.n	8008858 <__ssputs_r+0x5c>
 8008896:	6921      	ldr	r1, [r4, #16]
 8008898:	4650      	mov	r0, sl
 800889a:	f7ff ff65 	bl	8008768 <_free_r>
 800889e:	230c      	movs	r3, #12
 80088a0:	f8ca 3000 	str.w	r3, [sl]
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	e7e9      	b.n	8008886 <__ssputs_r+0x8a>
	...

080088b4 <_svfiprintf_r>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	4698      	mov	r8, r3
 80088ba:	898b      	ldrh	r3, [r1, #12]
 80088bc:	061b      	lsls	r3, r3, #24
 80088be:	b09d      	sub	sp, #116	@ 0x74
 80088c0:	4607      	mov	r7, r0
 80088c2:	460d      	mov	r5, r1
 80088c4:	4614      	mov	r4, r2
 80088c6:	d510      	bpl.n	80088ea <_svfiprintf_r+0x36>
 80088c8:	690b      	ldr	r3, [r1, #16]
 80088ca:	b973      	cbnz	r3, 80088ea <_svfiprintf_r+0x36>
 80088cc:	2140      	movs	r1, #64	@ 0x40
 80088ce:	f7ff fd65 	bl	800839c <_malloc_r>
 80088d2:	6028      	str	r0, [r5, #0]
 80088d4:	6128      	str	r0, [r5, #16]
 80088d6:	b930      	cbnz	r0, 80088e6 <_svfiprintf_r+0x32>
 80088d8:	230c      	movs	r3, #12
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	b01d      	add	sp, #116	@ 0x74
 80088e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e6:	2340      	movs	r3, #64	@ 0x40
 80088e8:	616b      	str	r3, [r5, #20]
 80088ea:	2300      	movs	r3, #0
 80088ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ee:	2320      	movs	r3, #32
 80088f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088f8:	2330      	movs	r3, #48	@ 0x30
 80088fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a98 <_svfiprintf_r+0x1e4>
 80088fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008902:	f04f 0901 	mov.w	r9, #1
 8008906:	4623      	mov	r3, r4
 8008908:	469a      	mov	sl, r3
 800890a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800890e:	b10a      	cbz	r2, 8008914 <_svfiprintf_r+0x60>
 8008910:	2a25      	cmp	r2, #37	@ 0x25
 8008912:	d1f9      	bne.n	8008908 <_svfiprintf_r+0x54>
 8008914:	ebba 0b04 	subs.w	fp, sl, r4
 8008918:	d00b      	beq.n	8008932 <_svfiprintf_r+0x7e>
 800891a:	465b      	mov	r3, fp
 800891c:	4622      	mov	r2, r4
 800891e:	4629      	mov	r1, r5
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff ff6b 	bl	80087fc <__ssputs_r>
 8008926:	3001      	adds	r0, #1
 8008928:	f000 80a7 	beq.w	8008a7a <_svfiprintf_r+0x1c6>
 800892c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800892e:	445a      	add	r2, fp
 8008930:	9209      	str	r2, [sp, #36]	@ 0x24
 8008932:	f89a 3000 	ldrb.w	r3, [sl]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 809f 	beq.w	8008a7a <_svfiprintf_r+0x1c6>
 800893c:	2300      	movs	r3, #0
 800893e:	f04f 32ff 	mov.w	r2, #4294967295
 8008942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008946:	f10a 0a01 	add.w	sl, sl, #1
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	9307      	str	r3, [sp, #28]
 800894e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008952:	931a      	str	r3, [sp, #104]	@ 0x68
 8008954:	4654      	mov	r4, sl
 8008956:	2205      	movs	r2, #5
 8008958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800895c:	484e      	ldr	r0, [pc, #312]	@ (8008a98 <_svfiprintf_r+0x1e4>)
 800895e:	f7f7 fc3f 	bl	80001e0 <memchr>
 8008962:	9a04      	ldr	r2, [sp, #16]
 8008964:	b9d8      	cbnz	r0, 800899e <_svfiprintf_r+0xea>
 8008966:	06d0      	lsls	r0, r2, #27
 8008968:	bf44      	itt	mi
 800896a:	2320      	movmi	r3, #32
 800896c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008970:	0711      	lsls	r1, r2, #28
 8008972:	bf44      	itt	mi
 8008974:	232b      	movmi	r3, #43	@ 0x2b
 8008976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800897a:	f89a 3000 	ldrb.w	r3, [sl]
 800897e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008980:	d015      	beq.n	80089ae <_svfiprintf_r+0xfa>
 8008982:	9a07      	ldr	r2, [sp, #28]
 8008984:	4654      	mov	r4, sl
 8008986:	2000      	movs	r0, #0
 8008988:	f04f 0c0a 	mov.w	ip, #10
 800898c:	4621      	mov	r1, r4
 800898e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008992:	3b30      	subs	r3, #48	@ 0x30
 8008994:	2b09      	cmp	r3, #9
 8008996:	d94b      	bls.n	8008a30 <_svfiprintf_r+0x17c>
 8008998:	b1b0      	cbz	r0, 80089c8 <_svfiprintf_r+0x114>
 800899a:	9207      	str	r2, [sp, #28]
 800899c:	e014      	b.n	80089c8 <_svfiprintf_r+0x114>
 800899e:	eba0 0308 	sub.w	r3, r0, r8
 80089a2:	fa09 f303 	lsl.w	r3, r9, r3
 80089a6:	4313      	orrs	r3, r2
 80089a8:	9304      	str	r3, [sp, #16]
 80089aa:	46a2      	mov	sl, r4
 80089ac:	e7d2      	b.n	8008954 <_svfiprintf_r+0xa0>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	1d19      	adds	r1, r3, #4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	9103      	str	r1, [sp, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bfbb      	ittet	lt
 80089ba:	425b      	neglt	r3, r3
 80089bc:	f042 0202 	orrlt.w	r2, r2, #2
 80089c0:	9307      	strge	r3, [sp, #28]
 80089c2:	9307      	strlt	r3, [sp, #28]
 80089c4:	bfb8      	it	lt
 80089c6:	9204      	strlt	r2, [sp, #16]
 80089c8:	7823      	ldrb	r3, [r4, #0]
 80089ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80089cc:	d10a      	bne.n	80089e4 <_svfiprintf_r+0x130>
 80089ce:	7863      	ldrb	r3, [r4, #1]
 80089d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80089d2:	d132      	bne.n	8008a3a <_svfiprintf_r+0x186>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	1d1a      	adds	r2, r3, #4
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	9203      	str	r2, [sp, #12]
 80089dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089e0:	3402      	adds	r4, #2
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008aa8 <_svfiprintf_r+0x1f4>
 80089e8:	7821      	ldrb	r1, [r4, #0]
 80089ea:	2203      	movs	r2, #3
 80089ec:	4650      	mov	r0, sl
 80089ee:	f7f7 fbf7 	bl	80001e0 <memchr>
 80089f2:	b138      	cbz	r0, 8008a04 <_svfiprintf_r+0x150>
 80089f4:	9b04      	ldr	r3, [sp, #16]
 80089f6:	eba0 000a 	sub.w	r0, r0, sl
 80089fa:	2240      	movs	r2, #64	@ 0x40
 80089fc:	4082      	lsls	r2, r0
 80089fe:	4313      	orrs	r3, r2
 8008a00:	3401      	adds	r4, #1
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a08:	4824      	ldr	r0, [pc, #144]	@ (8008a9c <_svfiprintf_r+0x1e8>)
 8008a0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a0e:	2206      	movs	r2, #6
 8008a10:	f7f7 fbe6 	bl	80001e0 <memchr>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d036      	beq.n	8008a86 <_svfiprintf_r+0x1d2>
 8008a18:	4b21      	ldr	r3, [pc, #132]	@ (8008aa0 <_svfiprintf_r+0x1ec>)
 8008a1a:	bb1b      	cbnz	r3, 8008a64 <_svfiprintf_r+0x1b0>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	3307      	adds	r3, #7
 8008a20:	f023 0307 	bic.w	r3, r3, #7
 8008a24:	3308      	adds	r3, #8
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a2a:	4433      	add	r3, r6
 8008a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a2e:	e76a      	b.n	8008906 <_svfiprintf_r+0x52>
 8008a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a34:	460c      	mov	r4, r1
 8008a36:	2001      	movs	r0, #1
 8008a38:	e7a8      	b.n	800898c <_svfiprintf_r+0xd8>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	3401      	adds	r4, #1
 8008a3e:	9305      	str	r3, [sp, #20]
 8008a40:	4619      	mov	r1, r3
 8008a42:	f04f 0c0a 	mov.w	ip, #10
 8008a46:	4620      	mov	r0, r4
 8008a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a4c:	3a30      	subs	r2, #48	@ 0x30
 8008a4e:	2a09      	cmp	r2, #9
 8008a50:	d903      	bls.n	8008a5a <_svfiprintf_r+0x1a6>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0c6      	beq.n	80089e4 <_svfiprintf_r+0x130>
 8008a56:	9105      	str	r1, [sp, #20]
 8008a58:	e7c4      	b.n	80089e4 <_svfiprintf_r+0x130>
 8008a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a5e:	4604      	mov	r4, r0
 8008a60:	2301      	movs	r3, #1
 8008a62:	e7f0      	b.n	8008a46 <_svfiprintf_r+0x192>
 8008a64:	ab03      	add	r3, sp, #12
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	462a      	mov	r2, r5
 8008a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa4 <_svfiprintf_r+0x1f0>)
 8008a6c:	a904      	add	r1, sp, #16
 8008a6e:	4638      	mov	r0, r7
 8008a70:	f3af 8000 	nop.w
 8008a74:	1c42      	adds	r2, r0, #1
 8008a76:	4606      	mov	r6, r0
 8008a78:	d1d6      	bne.n	8008a28 <_svfiprintf_r+0x174>
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	065b      	lsls	r3, r3, #25
 8008a7e:	f53f af2d 	bmi.w	80088dc <_svfiprintf_r+0x28>
 8008a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a84:	e72c      	b.n	80088e0 <_svfiprintf_r+0x2c>
 8008a86:	ab03      	add	r3, sp, #12
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	462a      	mov	r2, r5
 8008a8c:	4b05      	ldr	r3, [pc, #20]	@ (8008aa4 <_svfiprintf_r+0x1f0>)
 8008a8e:	a904      	add	r1, sp, #16
 8008a90:	4638      	mov	r0, r7
 8008a92:	f000 fa45 	bl	8008f20 <_printf_i>
 8008a96:	e7ed      	b.n	8008a74 <_svfiprintf_r+0x1c0>
 8008a98:	0800a124 	.word	0x0800a124
 8008a9c:	0800a12e 	.word	0x0800a12e
 8008aa0:	00000000 	.word	0x00000000
 8008aa4:	080087fd 	.word	0x080087fd
 8008aa8:	0800a12a 	.word	0x0800a12a

08008aac <_sungetc_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	1c4b      	adds	r3, r1, #1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	d103      	bne.n	8008abc <_sungetc_r+0x10>
 8008ab4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ab8:	4628      	mov	r0, r5
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	8993      	ldrh	r3, [r2, #12]
 8008abe:	f023 0320 	bic.w	r3, r3, #32
 8008ac2:	8193      	strh	r3, [r2, #12]
 8008ac4:	6853      	ldr	r3, [r2, #4]
 8008ac6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008ac8:	b2cd      	uxtb	r5, r1
 8008aca:	b18a      	cbz	r2, 8008af0 <_sungetc_r+0x44>
 8008acc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	dd08      	ble.n	8008ae4 <_sungetc_r+0x38>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	1e5a      	subs	r2, r3, #1
 8008ad6:	6022      	str	r2, [r4, #0]
 8008ad8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008adc:	6863      	ldr	r3, [r4, #4]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	6063      	str	r3, [r4, #4]
 8008ae2:	e7e9      	b.n	8008ab8 <_sungetc_r+0xc>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f000 fcc2 	bl	800946e <__submore>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d0f1      	beq.n	8008ad2 <_sungetc_r+0x26>
 8008aee:	e7e1      	b.n	8008ab4 <_sungetc_r+0x8>
 8008af0:	6921      	ldr	r1, [r4, #16]
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	b141      	cbz	r1, 8008b08 <_sungetc_r+0x5c>
 8008af6:	4291      	cmp	r1, r2
 8008af8:	d206      	bcs.n	8008b08 <_sungetc_r+0x5c>
 8008afa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008afe:	42a9      	cmp	r1, r5
 8008b00:	d102      	bne.n	8008b08 <_sungetc_r+0x5c>
 8008b02:	3a01      	subs	r2, #1
 8008b04:	6022      	str	r2, [r4, #0]
 8008b06:	e7ea      	b.n	8008ade <_sungetc_r+0x32>
 8008b08:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b10:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b12:	2303      	movs	r3, #3
 8008b14:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008b16:	4623      	mov	r3, r4
 8008b18:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e7de      	b.n	8008ae0 <_sungetc_r+0x34>

08008b22 <__ssrefill_r>:
 8008b22:	b510      	push	{r4, lr}
 8008b24:	460c      	mov	r4, r1
 8008b26:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008b28:	b169      	cbz	r1, 8008b46 <__ssrefill_r+0x24>
 8008b2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	d001      	beq.n	8008b36 <__ssrefill_r+0x14>
 8008b32:	f7ff fe19 	bl	8008768 <_free_r>
 8008b36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b38:	6063      	str	r3, [r4, #4]
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	6360      	str	r0, [r4, #52]	@ 0x34
 8008b3e:	b113      	cbz	r3, 8008b46 <__ssrefill_r+0x24>
 8008b40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	6063      	str	r3, [r4, #4]
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f043 0320 	orr.w	r3, r3, #32
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5a:	e7f3      	b.n	8008b44 <__ssrefill_r+0x22>

08008b5c <__ssvfiscanf_r>:
 8008b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	460c      	mov	r4, r1
 8008b62:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008b66:	2100      	movs	r1, #0
 8008b68:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008b6c:	49a5      	ldr	r1, [pc, #660]	@ (8008e04 <__ssvfiscanf_r+0x2a8>)
 8008b6e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008b70:	f10d 0804 	add.w	r8, sp, #4
 8008b74:	49a4      	ldr	r1, [pc, #656]	@ (8008e08 <__ssvfiscanf_r+0x2ac>)
 8008b76:	4fa5      	ldr	r7, [pc, #660]	@ (8008e0c <__ssvfiscanf_r+0x2b0>)
 8008b78:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	7813      	ldrb	r3, [r2, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 8158 	beq.w	8008e3a <__ssvfiscanf_r+0x2de>
 8008b8a:	5cf9      	ldrb	r1, [r7, r3]
 8008b8c:	f011 0108 	ands.w	r1, r1, #8
 8008b90:	f102 0501 	add.w	r5, r2, #1
 8008b94:	d019      	beq.n	8008bca <__ssvfiscanf_r+0x6e>
 8008b96:	6863      	ldr	r3, [r4, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dd0f      	ble.n	8008bbc <__ssvfiscanf_r+0x60>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	781a      	ldrb	r2, [r3, #0]
 8008ba0:	5cba      	ldrb	r2, [r7, r2]
 8008ba2:	0712      	lsls	r2, r2, #28
 8008ba4:	d401      	bmi.n	8008baa <__ssvfiscanf_r+0x4e>
 8008ba6:	462a      	mov	r2, r5
 8008ba8:	e7eb      	b.n	8008b82 <__ssvfiscanf_r+0x26>
 8008baa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008bac:	3201      	adds	r2, #1
 8008bae:	9245      	str	r2, [sp, #276]	@ 0x114
 8008bb0:	6862      	ldr	r2, [r4, #4]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	3a01      	subs	r2, #1
 8008bb6:	6062      	str	r2, [r4, #4]
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	e7ec      	b.n	8008b96 <__ssvfiscanf_r+0x3a>
 8008bbc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	4798      	blx	r3
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d0e9      	beq.n	8008b9c <__ssvfiscanf_r+0x40>
 8008bc8:	e7ed      	b.n	8008ba6 <__ssvfiscanf_r+0x4a>
 8008bca:	2b25      	cmp	r3, #37	@ 0x25
 8008bcc:	d012      	beq.n	8008bf4 <__ssvfiscanf_r+0x98>
 8008bce:	4699      	mov	r9, r3
 8008bd0:	6863      	ldr	r3, [r4, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f340 8093 	ble.w	8008cfe <__ssvfiscanf_r+0x1a2>
 8008bd8:	6822      	ldr	r2, [r4, #0]
 8008bda:	7813      	ldrb	r3, [r2, #0]
 8008bdc:	454b      	cmp	r3, r9
 8008bde:	f040 812c 	bne.w	8008e3a <__ssvfiscanf_r+0x2de>
 8008be2:	6863      	ldr	r3, [r4, #4]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	6063      	str	r3, [r4, #4]
 8008be8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008bea:	3201      	adds	r2, #1
 8008bec:	3301      	adds	r3, #1
 8008bee:	6022      	str	r2, [r4, #0]
 8008bf0:	9345      	str	r3, [sp, #276]	@ 0x114
 8008bf2:	e7d8      	b.n	8008ba6 <__ssvfiscanf_r+0x4a>
 8008bf4:	9141      	str	r1, [sp, #260]	@ 0x104
 8008bf6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008bf8:	7853      	ldrb	r3, [r2, #1]
 8008bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bfc:	bf02      	ittt	eq
 8008bfe:	2310      	moveq	r3, #16
 8008c00:	1c95      	addeq	r5, r2, #2
 8008c02:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008c04:	220a      	movs	r2, #10
 8008c06:	46a9      	mov	r9, r5
 8008c08:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008c0c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008c10:	2b09      	cmp	r3, #9
 8008c12:	d91e      	bls.n	8008c52 <__ssvfiscanf_r+0xf6>
 8008c14:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008e10 <__ssvfiscanf_r+0x2b4>
 8008c18:	2203      	movs	r2, #3
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	f7f7 fae0 	bl	80001e0 <memchr>
 8008c20:	b138      	cbz	r0, 8008c32 <__ssvfiscanf_r+0xd6>
 8008c22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008c24:	eba0 000a 	sub.w	r0, r0, sl
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4083      	lsls	r3, r0
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008c30:	464d      	mov	r5, r9
 8008c32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c36:	2b78      	cmp	r3, #120	@ 0x78
 8008c38:	d806      	bhi.n	8008c48 <__ssvfiscanf_r+0xec>
 8008c3a:	2b57      	cmp	r3, #87	@ 0x57
 8008c3c:	d810      	bhi.n	8008c60 <__ssvfiscanf_r+0x104>
 8008c3e:	2b25      	cmp	r3, #37	@ 0x25
 8008c40:	d0c5      	beq.n	8008bce <__ssvfiscanf_r+0x72>
 8008c42:	d857      	bhi.n	8008cf4 <__ssvfiscanf_r+0x198>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d065      	beq.n	8008d14 <__ssvfiscanf_r+0x1b8>
 8008c48:	2303      	movs	r3, #3
 8008c4a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008c4c:	230a      	movs	r3, #10
 8008c4e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008c50:	e078      	b.n	8008d44 <__ssvfiscanf_r+0x1e8>
 8008c52:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008c54:	fb02 1103 	mla	r1, r2, r3, r1
 8008c58:	3930      	subs	r1, #48	@ 0x30
 8008c5a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008c5c:	464d      	mov	r5, r9
 8008c5e:	e7d2      	b.n	8008c06 <__ssvfiscanf_r+0xaa>
 8008c60:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008c64:	2a20      	cmp	r2, #32
 8008c66:	d8ef      	bhi.n	8008c48 <__ssvfiscanf_r+0xec>
 8008c68:	a101      	add	r1, pc, #4	@ (adr r1, 8008c70 <__ssvfiscanf_r+0x114>)
 8008c6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008d23 	.word	0x08008d23
 8008c74:	08008c49 	.word	0x08008c49
 8008c78:	08008c49 	.word	0x08008c49
 8008c7c:	08008d7d 	.word	0x08008d7d
 8008c80:	08008c49 	.word	0x08008c49
 8008c84:	08008c49 	.word	0x08008c49
 8008c88:	08008c49 	.word	0x08008c49
 8008c8c:	08008c49 	.word	0x08008c49
 8008c90:	08008c49 	.word	0x08008c49
 8008c94:	08008c49 	.word	0x08008c49
 8008c98:	08008c49 	.word	0x08008c49
 8008c9c:	08008d93 	.word	0x08008d93
 8008ca0:	08008d79 	.word	0x08008d79
 8008ca4:	08008cfb 	.word	0x08008cfb
 8008ca8:	08008cfb 	.word	0x08008cfb
 8008cac:	08008cfb 	.word	0x08008cfb
 8008cb0:	08008c49 	.word	0x08008c49
 8008cb4:	08008d35 	.word	0x08008d35
 8008cb8:	08008c49 	.word	0x08008c49
 8008cbc:	08008c49 	.word	0x08008c49
 8008cc0:	08008c49 	.word	0x08008c49
 8008cc4:	08008c49 	.word	0x08008c49
 8008cc8:	08008da3 	.word	0x08008da3
 8008ccc:	08008d3d 	.word	0x08008d3d
 8008cd0:	08008d1b 	.word	0x08008d1b
 8008cd4:	08008c49 	.word	0x08008c49
 8008cd8:	08008c49 	.word	0x08008c49
 8008cdc:	08008d9f 	.word	0x08008d9f
 8008ce0:	08008c49 	.word	0x08008c49
 8008ce4:	08008d79 	.word	0x08008d79
 8008ce8:	08008c49 	.word	0x08008c49
 8008cec:	08008c49 	.word	0x08008c49
 8008cf0:	08008d23 	.word	0x08008d23
 8008cf4:	3b45      	subs	r3, #69	@ 0x45
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d8a6      	bhi.n	8008c48 <__ssvfiscanf_r+0xec>
 8008cfa:	2305      	movs	r3, #5
 8008cfc:	e021      	b.n	8008d42 <__ssvfiscanf_r+0x1e6>
 8008cfe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008d00:	4621      	mov	r1, r4
 8008d02:	4630      	mov	r0, r6
 8008d04:	4798      	blx	r3
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f43f af66 	beq.w	8008bd8 <__ssvfiscanf_r+0x7c>
 8008d0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f040 808b 	bne.w	8008e2a <__ssvfiscanf_r+0x2ce>
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	e08b      	b.n	8008e32 <__ssvfiscanf_r+0x2d6>
 8008d1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008d1c:	f042 0220 	orr.w	r2, r2, #32
 8008d20:	9241      	str	r2, [sp, #260]	@ 0x104
 8008d22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d28:	9241      	str	r2, [sp, #260]	@ 0x104
 8008d2a:	2210      	movs	r2, #16
 8008d2c:	2b6e      	cmp	r3, #110	@ 0x6e
 8008d2e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008d30:	d902      	bls.n	8008d38 <__ssvfiscanf_r+0x1dc>
 8008d32:	e005      	b.n	8008d40 <__ssvfiscanf_r+0x1e4>
 8008d34:	2300      	movs	r3, #0
 8008d36:	9342      	str	r3, [sp, #264]	@ 0x108
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e002      	b.n	8008d42 <__ssvfiscanf_r+0x1e6>
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008d40:	2304      	movs	r3, #4
 8008d42:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008d44:	6863      	ldr	r3, [r4, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	dd39      	ble.n	8008dbe <__ssvfiscanf_r+0x262>
 8008d4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008d4c:	0659      	lsls	r1, r3, #25
 8008d4e:	d404      	bmi.n	8008d5a <__ssvfiscanf_r+0x1fe>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	781a      	ldrb	r2, [r3, #0]
 8008d54:	5cba      	ldrb	r2, [r7, r2]
 8008d56:	0712      	lsls	r2, r2, #28
 8008d58:	d438      	bmi.n	8008dcc <__ssvfiscanf_r+0x270>
 8008d5a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	dc47      	bgt.n	8008df0 <__ssvfiscanf_r+0x294>
 8008d60:	466b      	mov	r3, sp
 8008d62:	4622      	mov	r2, r4
 8008d64:	a941      	add	r1, sp, #260	@ 0x104
 8008d66:	4630      	mov	r0, r6
 8008d68:	f000 f9fa 	bl	8009160 <_scanf_chars>
 8008d6c:	2801      	cmp	r0, #1
 8008d6e:	d064      	beq.n	8008e3a <__ssvfiscanf_r+0x2de>
 8008d70:	2802      	cmp	r0, #2
 8008d72:	f47f af18 	bne.w	8008ba6 <__ssvfiscanf_r+0x4a>
 8008d76:	e7c9      	b.n	8008d0c <__ssvfiscanf_r+0x1b0>
 8008d78:	220a      	movs	r2, #10
 8008d7a:	e7d7      	b.n	8008d2c <__ssvfiscanf_r+0x1d0>
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4640      	mov	r0, r8
 8008d80:	f000 fb3c 	bl	80093fc <__sccl>
 8008d84:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d8a:	9341      	str	r3, [sp, #260]	@ 0x104
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e7d7      	b.n	8008d42 <__ssvfiscanf_r+0x1e6>
 8008d92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d98:	9341      	str	r3, [sp, #260]	@ 0x104
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e7d1      	b.n	8008d42 <__ssvfiscanf_r+0x1e6>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e7cf      	b.n	8008d42 <__ssvfiscanf_r+0x1e6>
 8008da2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008da4:	06c3      	lsls	r3, r0, #27
 8008da6:	f53f aefe 	bmi.w	8008ba6 <__ssvfiscanf_r+0x4a>
 8008daa:	9b00      	ldr	r3, [sp, #0]
 8008dac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008dae:	1d19      	adds	r1, r3, #4
 8008db0:	9100      	str	r1, [sp, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	07c0      	lsls	r0, r0, #31
 8008db6:	bf4c      	ite	mi
 8008db8:	801a      	strhmi	r2, [r3, #0]
 8008dba:	601a      	strpl	r2, [r3, #0]
 8008dbc:	e6f3      	b.n	8008ba6 <__ssvfiscanf_r+0x4a>
 8008dbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	4798      	blx	r3
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d0bf      	beq.n	8008d4a <__ssvfiscanf_r+0x1ee>
 8008dca:	e79f      	b.n	8008d0c <__ssvfiscanf_r+0x1b0>
 8008dcc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008dce:	3201      	adds	r2, #1
 8008dd0:	9245      	str	r2, [sp, #276]	@ 0x114
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	3a01      	subs	r2, #1
 8008dd6:	2a00      	cmp	r2, #0
 8008dd8:	6062      	str	r2, [r4, #4]
 8008dda:	dd02      	ble.n	8008de2 <__ssvfiscanf_r+0x286>
 8008ddc:	3301      	adds	r3, #1
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	e7b6      	b.n	8008d50 <__ssvfiscanf_r+0x1f4>
 8008de2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008de4:	4621      	mov	r1, r4
 8008de6:	4630      	mov	r0, r6
 8008de8:	4798      	blx	r3
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d0b0      	beq.n	8008d50 <__ssvfiscanf_r+0x1f4>
 8008dee:	e78d      	b.n	8008d0c <__ssvfiscanf_r+0x1b0>
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	dc0f      	bgt.n	8008e14 <__ssvfiscanf_r+0x2b8>
 8008df4:	466b      	mov	r3, sp
 8008df6:	4622      	mov	r2, r4
 8008df8:	a941      	add	r1, sp, #260	@ 0x104
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f000 fa0a 	bl	8009214 <_scanf_i>
 8008e00:	e7b4      	b.n	8008d6c <__ssvfiscanf_r+0x210>
 8008e02:	bf00      	nop
 8008e04:	08008aad 	.word	0x08008aad
 8008e08:	08008b23 	.word	0x08008b23
 8008e0c:	0800a173 	.word	0x0800a173
 8008e10:	0800a12a 	.word	0x0800a12a
 8008e14:	4b0a      	ldr	r3, [pc, #40]	@ (8008e40 <__ssvfiscanf_r+0x2e4>)
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f43f aec5 	beq.w	8008ba6 <__ssvfiscanf_r+0x4a>
 8008e1c:	466b      	mov	r3, sp
 8008e1e:	4622      	mov	r2, r4
 8008e20:	a941      	add	r1, sp, #260	@ 0x104
 8008e22:	4630      	mov	r0, r6
 8008e24:	f3af 8000 	nop.w
 8008e28:	e7a0      	b.n	8008d6c <__ssvfiscanf_r+0x210>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	065b      	lsls	r3, r3, #25
 8008e2e:	f53f af71 	bmi.w	8008d14 <__ssvfiscanf_r+0x1b8>
 8008e32:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008e3c:	e7f9      	b.n	8008e32 <__ssvfiscanf_r+0x2d6>
 8008e3e:	bf00      	nop
 8008e40:	00000000 	.word	0x00000000

08008e44 <_printf_common>:
 8008e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e48:	4616      	mov	r6, r2
 8008e4a:	4698      	mov	r8, r3
 8008e4c:	688a      	ldr	r2, [r1, #8]
 8008e4e:	690b      	ldr	r3, [r1, #16]
 8008e50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e54:	4293      	cmp	r3, r2
 8008e56:	bfb8      	it	lt
 8008e58:	4613      	movlt	r3, r2
 8008e5a:	6033      	str	r3, [r6, #0]
 8008e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e60:	4607      	mov	r7, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	b10a      	cbz	r2, 8008e6a <_printf_common+0x26>
 8008e66:	3301      	adds	r3, #1
 8008e68:	6033      	str	r3, [r6, #0]
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	0699      	lsls	r1, r3, #26
 8008e6e:	bf42      	ittt	mi
 8008e70:	6833      	ldrmi	r3, [r6, #0]
 8008e72:	3302      	addmi	r3, #2
 8008e74:	6033      	strmi	r3, [r6, #0]
 8008e76:	6825      	ldr	r5, [r4, #0]
 8008e78:	f015 0506 	ands.w	r5, r5, #6
 8008e7c:	d106      	bne.n	8008e8c <_printf_common+0x48>
 8008e7e:	f104 0a19 	add.w	sl, r4, #25
 8008e82:	68e3      	ldr	r3, [r4, #12]
 8008e84:	6832      	ldr	r2, [r6, #0]
 8008e86:	1a9b      	subs	r3, r3, r2
 8008e88:	42ab      	cmp	r3, r5
 8008e8a:	dc26      	bgt.n	8008eda <_printf_common+0x96>
 8008e8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e90:	6822      	ldr	r2, [r4, #0]
 8008e92:	3b00      	subs	r3, #0
 8008e94:	bf18      	it	ne
 8008e96:	2301      	movne	r3, #1
 8008e98:	0692      	lsls	r2, r2, #26
 8008e9a:	d42b      	bmi.n	8008ef4 <_printf_common+0xb0>
 8008e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ea0:	4641      	mov	r1, r8
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	47c8      	blx	r9
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d01e      	beq.n	8008ee8 <_printf_common+0xa4>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	6922      	ldr	r2, [r4, #16]
 8008eae:	f003 0306 	and.w	r3, r3, #6
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	bf02      	ittt	eq
 8008eb6:	68e5      	ldreq	r5, [r4, #12]
 8008eb8:	6833      	ldreq	r3, [r6, #0]
 8008eba:	1aed      	subeq	r5, r5, r3
 8008ebc:	68a3      	ldr	r3, [r4, #8]
 8008ebe:	bf0c      	ite	eq
 8008ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ec4:	2500      	movne	r5, #0
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	bfc4      	itt	gt
 8008eca:	1a9b      	subgt	r3, r3, r2
 8008ecc:	18ed      	addgt	r5, r5, r3
 8008ece:	2600      	movs	r6, #0
 8008ed0:	341a      	adds	r4, #26
 8008ed2:	42b5      	cmp	r5, r6
 8008ed4:	d11a      	bne.n	8008f0c <_printf_common+0xc8>
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	e008      	b.n	8008eec <_printf_common+0xa8>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4652      	mov	r2, sl
 8008ede:	4641      	mov	r1, r8
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	47c8      	blx	r9
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d103      	bne.n	8008ef0 <_printf_common+0xac>
 8008ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef0:	3501      	adds	r5, #1
 8008ef2:	e7c6      	b.n	8008e82 <_printf_common+0x3e>
 8008ef4:	18e1      	adds	r1, r4, r3
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	2030      	movs	r0, #48	@ 0x30
 8008efa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008efe:	4422      	add	r2, r4
 8008f00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f08:	3302      	adds	r3, #2
 8008f0a:	e7c7      	b.n	8008e9c <_printf_common+0x58>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	4622      	mov	r2, r4
 8008f10:	4641      	mov	r1, r8
 8008f12:	4638      	mov	r0, r7
 8008f14:	47c8      	blx	r9
 8008f16:	3001      	adds	r0, #1
 8008f18:	d0e6      	beq.n	8008ee8 <_printf_common+0xa4>
 8008f1a:	3601      	adds	r6, #1
 8008f1c:	e7d9      	b.n	8008ed2 <_printf_common+0x8e>
	...

08008f20 <_printf_i>:
 8008f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f24:	7e0f      	ldrb	r7, [r1, #24]
 8008f26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f28:	2f78      	cmp	r7, #120	@ 0x78
 8008f2a:	4691      	mov	r9, r2
 8008f2c:	4680      	mov	r8, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	469a      	mov	sl, r3
 8008f32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f36:	d807      	bhi.n	8008f48 <_printf_i+0x28>
 8008f38:	2f62      	cmp	r7, #98	@ 0x62
 8008f3a:	d80a      	bhi.n	8008f52 <_printf_i+0x32>
 8008f3c:	2f00      	cmp	r7, #0
 8008f3e:	f000 80d2 	beq.w	80090e6 <_printf_i+0x1c6>
 8008f42:	2f58      	cmp	r7, #88	@ 0x58
 8008f44:	f000 80b9 	beq.w	80090ba <_printf_i+0x19a>
 8008f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f50:	e03a      	b.n	8008fc8 <_printf_i+0xa8>
 8008f52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f56:	2b15      	cmp	r3, #21
 8008f58:	d8f6      	bhi.n	8008f48 <_printf_i+0x28>
 8008f5a:	a101      	add	r1, pc, #4	@ (adr r1, 8008f60 <_printf_i+0x40>)
 8008f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f60:	08008fb9 	.word	0x08008fb9
 8008f64:	08008fcd 	.word	0x08008fcd
 8008f68:	08008f49 	.word	0x08008f49
 8008f6c:	08008f49 	.word	0x08008f49
 8008f70:	08008f49 	.word	0x08008f49
 8008f74:	08008f49 	.word	0x08008f49
 8008f78:	08008fcd 	.word	0x08008fcd
 8008f7c:	08008f49 	.word	0x08008f49
 8008f80:	08008f49 	.word	0x08008f49
 8008f84:	08008f49 	.word	0x08008f49
 8008f88:	08008f49 	.word	0x08008f49
 8008f8c:	080090cd 	.word	0x080090cd
 8008f90:	08008ff7 	.word	0x08008ff7
 8008f94:	08009087 	.word	0x08009087
 8008f98:	08008f49 	.word	0x08008f49
 8008f9c:	08008f49 	.word	0x08008f49
 8008fa0:	080090ef 	.word	0x080090ef
 8008fa4:	08008f49 	.word	0x08008f49
 8008fa8:	08008ff7 	.word	0x08008ff7
 8008fac:	08008f49 	.word	0x08008f49
 8008fb0:	08008f49 	.word	0x08008f49
 8008fb4:	0800908f 	.word	0x0800908f
 8008fb8:	6833      	ldr	r3, [r6, #0]
 8008fba:	1d1a      	adds	r2, r3, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6032      	str	r2, [r6, #0]
 8008fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e09d      	b.n	8009108 <_printf_i+0x1e8>
 8008fcc:	6833      	ldr	r3, [r6, #0]
 8008fce:	6820      	ldr	r0, [r4, #0]
 8008fd0:	1d19      	adds	r1, r3, #4
 8008fd2:	6031      	str	r1, [r6, #0]
 8008fd4:	0606      	lsls	r6, r0, #24
 8008fd6:	d501      	bpl.n	8008fdc <_printf_i+0xbc>
 8008fd8:	681d      	ldr	r5, [r3, #0]
 8008fda:	e003      	b.n	8008fe4 <_printf_i+0xc4>
 8008fdc:	0645      	lsls	r5, r0, #25
 8008fde:	d5fb      	bpl.n	8008fd8 <_printf_i+0xb8>
 8008fe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	da03      	bge.n	8008ff0 <_printf_i+0xd0>
 8008fe8:	232d      	movs	r3, #45	@ 0x2d
 8008fea:	426d      	negs	r5, r5
 8008fec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ff0:	4859      	ldr	r0, [pc, #356]	@ (8009158 <_printf_i+0x238>)
 8008ff2:	230a      	movs	r3, #10
 8008ff4:	e011      	b.n	800901a <_printf_i+0xfa>
 8008ff6:	6821      	ldr	r1, [r4, #0]
 8008ff8:	6833      	ldr	r3, [r6, #0]
 8008ffa:	0608      	lsls	r0, r1, #24
 8008ffc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009000:	d402      	bmi.n	8009008 <_printf_i+0xe8>
 8009002:	0649      	lsls	r1, r1, #25
 8009004:	bf48      	it	mi
 8009006:	b2ad      	uxthmi	r5, r5
 8009008:	2f6f      	cmp	r7, #111	@ 0x6f
 800900a:	4853      	ldr	r0, [pc, #332]	@ (8009158 <_printf_i+0x238>)
 800900c:	6033      	str	r3, [r6, #0]
 800900e:	bf14      	ite	ne
 8009010:	230a      	movne	r3, #10
 8009012:	2308      	moveq	r3, #8
 8009014:	2100      	movs	r1, #0
 8009016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800901a:	6866      	ldr	r6, [r4, #4]
 800901c:	60a6      	str	r6, [r4, #8]
 800901e:	2e00      	cmp	r6, #0
 8009020:	bfa2      	ittt	ge
 8009022:	6821      	ldrge	r1, [r4, #0]
 8009024:	f021 0104 	bicge.w	r1, r1, #4
 8009028:	6021      	strge	r1, [r4, #0]
 800902a:	b90d      	cbnz	r5, 8009030 <_printf_i+0x110>
 800902c:	2e00      	cmp	r6, #0
 800902e:	d04b      	beq.n	80090c8 <_printf_i+0x1a8>
 8009030:	4616      	mov	r6, r2
 8009032:	fbb5 f1f3 	udiv	r1, r5, r3
 8009036:	fb03 5711 	mls	r7, r3, r1, r5
 800903a:	5dc7      	ldrb	r7, [r0, r7]
 800903c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009040:	462f      	mov	r7, r5
 8009042:	42bb      	cmp	r3, r7
 8009044:	460d      	mov	r5, r1
 8009046:	d9f4      	bls.n	8009032 <_printf_i+0x112>
 8009048:	2b08      	cmp	r3, #8
 800904a:	d10b      	bne.n	8009064 <_printf_i+0x144>
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	07df      	lsls	r7, r3, #31
 8009050:	d508      	bpl.n	8009064 <_printf_i+0x144>
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	6861      	ldr	r1, [r4, #4]
 8009056:	4299      	cmp	r1, r3
 8009058:	bfde      	ittt	le
 800905a:	2330      	movle	r3, #48	@ 0x30
 800905c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009060:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009064:	1b92      	subs	r2, r2, r6
 8009066:	6122      	str	r2, [r4, #16]
 8009068:	f8cd a000 	str.w	sl, [sp]
 800906c:	464b      	mov	r3, r9
 800906e:	aa03      	add	r2, sp, #12
 8009070:	4621      	mov	r1, r4
 8009072:	4640      	mov	r0, r8
 8009074:	f7ff fee6 	bl	8008e44 <_printf_common>
 8009078:	3001      	adds	r0, #1
 800907a:	d14a      	bne.n	8009112 <_printf_i+0x1f2>
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	b004      	add	sp, #16
 8009082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	f043 0320 	orr.w	r3, r3, #32
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	4833      	ldr	r0, [pc, #204]	@ (800915c <_printf_i+0x23c>)
 8009090:	2778      	movs	r7, #120	@ 0x78
 8009092:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	6831      	ldr	r1, [r6, #0]
 800909a:	061f      	lsls	r7, r3, #24
 800909c:	f851 5b04 	ldr.w	r5, [r1], #4
 80090a0:	d402      	bmi.n	80090a8 <_printf_i+0x188>
 80090a2:	065f      	lsls	r7, r3, #25
 80090a4:	bf48      	it	mi
 80090a6:	b2ad      	uxthmi	r5, r5
 80090a8:	6031      	str	r1, [r6, #0]
 80090aa:	07d9      	lsls	r1, r3, #31
 80090ac:	bf44      	itt	mi
 80090ae:	f043 0320 	orrmi.w	r3, r3, #32
 80090b2:	6023      	strmi	r3, [r4, #0]
 80090b4:	b11d      	cbz	r5, 80090be <_printf_i+0x19e>
 80090b6:	2310      	movs	r3, #16
 80090b8:	e7ac      	b.n	8009014 <_printf_i+0xf4>
 80090ba:	4827      	ldr	r0, [pc, #156]	@ (8009158 <_printf_i+0x238>)
 80090bc:	e7e9      	b.n	8009092 <_printf_i+0x172>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	f023 0320 	bic.w	r3, r3, #32
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	e7f6      	b.n	80090b6 <_printf_i+0x196>
 80090c8:	4616      	mov	r6, r2
 80090ca:	e7bd      	b.n	8009048 <_printf_i+0x128>
 80090cc:	6833      	ldr	r3, [r6, #0]
 80090ce:	6825      	ldr	r5, [r4, #0]
 80090d0:	6961      	ldr	r1, [r4, #20]
 80090d2:	1d18      	adds	r0, r3, #4
 80090d4:	6030      	str	r0, [r6, #0]
 80090d6:	062e      	lsls	r6, r5, #24
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	d501      	bpl.n	80090e0 <_printf_i+0x1c0>
 80090dc:	6019      	str	r1, [r3, #0]
 80090de:	e002      	b.n	80090e6 <_printf_i+0x1c6>
 80090e0:	0668      	lsls	r0, r5, #25
 80090e2:	d5fb      	bpl.n	80090dc <_printf_i+0x1bc>
 80090e4:	8019      	strh	r1, [r3, #0]
 80090e6:	2300      	movs	r3, #0
 80090e8:	6123      	str	r3, [r4, #16]
 80090ea:	4616      	mov	r6, r2
 80090ec:	e7bc      	b.n	8009068 <_printf_i+0x148>
 80090ee:	6833      	ldr	r3, [r6, #0]
 80090f0:	1d1a      	adds	r2, r3, #4
 80090f2:	6032      	str	r2, [r6, #0]
 80090f4:	681e      	ldr	r6, [r3, #0]
 80090f6:	6862      	ldr	r2, [r4, #4]
 80090f8:	2100      	movs	r1, #0
 80090fa:	4630      	mov	r0, r6
 80090fc:	f7f7 f870 	bl	80001e0 <memchr>
 8009100:	b108      	cbz	r0, 8009106 <_printf_i+0x1e6>
 8009102:	1b80      	subs	r0, r0, r6
 8009104:	6060      	str	r0, [r4, #4]
 8009106:	6863      	ldr	r3, [r4, #4]
 8009108:	6123      	str	r3, [r4, #16]
 800910a:	2300      	movs	r3, #0
 800910c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009110:	e7aa      	b.n	8009068 <_printf_i+0x148>
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	4632      	mov	r2, r6
 8009116:	4649      	mov	r1, r9
 8009118:	4640      	mov	r0, r8
 800911a:	47d0      	blx	sl
 800911c:	3001      	adds	r0, #1
 800911e:	d0ad      	beq.n	800907c <_printf_i+0x15c>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	079b      	lsls	r3, r3, #30
 8009124:	d413      	bmi.n	800914e <_printf_i+0x22e>
 8009126:	68e0      	ldr	r0, [r4, #12]
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	4298      	cmp	r0, r3
 800912c:	bfb8      	it	lt
 800912e:	4618      	movlt	r0, r3
 8009130:	e7a6      	b.n	8009080 <_printf_i+0x160>
 8009132:	2301      	movs	r3, #1
 8009134:	4632      	mov	r2, r6
 8009136:	4649      	mov	r1, r9
 8009138:	4640      	mov	r0, r8
 800913a:	47d0      	blx	sl
 800913c:	3001      	adds	r0, #1
 800913e:	d09d      	beq.n	800907c <_printf_i+0x15c>
 8009140:	3501      	adds	r5, #1
 8009142:	68e3      	ldr	r3, [r4, #12]
 8009144:	9903      	ldr	r1, [sp, #12]
 8009146:	1a5b      	subs	r3, r3, r1
 8009148:	42ab      	cmp	r3, r5
 800914a:	dcf2      	bgt.n	8009132 <_printf_i+0x212>
 800914c:	e7eb      	b.n	8009126 <_printf_i+0x206>
 800914e:	2500      	movs	r5, #0
 8009150:	f104 0619 	add.w	r6, r4, #25
 8009154:	e7f5      	b.n	8009142 <_printf_i+0x222>
 8009156:	bf00      	nop
 8009158:	0800a135 	.word	0x0800a135
 800915c:	0800a146 	.word	0x0800a146

08009160 <_scanf_chars>:
 8009160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009164:	4615      	mov	r5, r2
 8009166:	688a      	ldr	r2, [r1, #8]
 8009168:	4680      	mov	r8, r0
 800916a:	460c      	mov	r4, r1
 800916c:	b932      	cbnz	r2, 800917c <_scanf_chars+0x1c>
 800916e:	698a      	ldr	r2, [r1, #24]
 8009170:	2a00      	cmp	r2, #0
 8009172:	bf14      	ite	ne
 8009174:	f04f 32ff 	movne.w	r2, #4294967295
 8009178:	2201      	moveq	r2, #1
 800917a:	608a      	str	r2, [r1, #8]
 800917c:	6822      	ldr	r2, [r4, #0]
 800917e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009210 <_scanf_chars+0xb0>
 8009182:	06d1      	lsls	r1, r2, #27
 8009184:	bf5f      	itttt	pl
 8009186:	681a      	ldrpl	r2, [r3, #0]
 8009188:	1d11      	addpl	r1, r2, #4
 800918a:	6019      	strpl	r1, [r3, #0]
 800918c:	6816      	ldrpl	r6, [r2, #0]
 800918e:	2700      	movs	r7, #0
 8009190:	69a0      	ldr	r0, [r4, #24]
 8009192:	b188      	cbz	r0, 80091b8 <_scanf_chars+0x58>
 8009194:	2801      	cmp	r0, #1
 8009196:	d107      	bne.n	80091a8 <_scanf_chars+0x48>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	6963      	ldr	r3, [r4, #20]
 800919e:	5c9b      	ldrb	r3, [r3, r2]
 80091a0:	b953      	cbnz	r3, 80091b8 <_scanf_chars+0x58>
 80091a2:	2f00      	cmp	r7, #0
 80091a4:	d031      	beq.n	800920a <_scanf_chars+0xaa>
 80091a6:	e022      	b.n	80091ee <_scanf_chars+0x8e>
 80091a8:	2802      	cmp	r0, #2
 80091aa:	d120      	bne.n	80091ee <_scanf_chars+0x8e>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80091b4:	071b      	lsls	r3, r3, #28
 80091b6:	d41a      	bmi.n	80091ee <_scanf_chars+0x8e>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	06da      	lsls	r2, r3, #27
 80091bc:	bf5e      	ittt	pl
 80091be:	682b      	ldrpl	r3, [r5, #0]
 80091c0:	781b      	ldrbpl	r3, [r3, #0]
 80091c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80091c6:	682a      	ldr	r2, [r5, #0]
 80091c8:	686b      	ldr	r3, [r5, #4]
 80091ca:	3201      	adds	r2, #1
 80091cc:	602a      	str	r2, [r5, #0]
 80091ce:	68a2      	ldr	r2, [r4, #8]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	3a01      	subs	r2, #1
 80091d4:	606b      	str	r3, [r5, #4]
 80091d6:	3701      	adds	r7, #1
 80091d8:	60a2      	str	r2, [r4, #8]
 80091da:	b142      	cbz	r2, 80091ee <_scanf_chars+0x8e>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dcd7      	bgt.n	8009190 <_scanf_chars+0x30>
 80091e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80091e4:	4629      	mov	r1, r5
 80091e6:	4640      	mov	r0, r8
 80091e8:	4798      	blx	r3
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d0d0      	beq.n	8009190 <_scanf_chars+0x30>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	f013 0310 	ands.w	r3, r3, #16
 80091f4:	d105      	bne.n	8009202 <_scanf_chars+0xa2>
 80091f6:	68e2      	ldr	r2, [r4, #12]
 80091f8:	3201      	adds	r2, #1
 80091fa:	60e2      	str	r2, [r4, #12]
 80091fc:	69a2      	ldr	r2, [r4, #24]
 80091fe:	b102      	cbz	r2, 8009202 <_scanf_chars+0xa2>
 8009200:	7033      	strb	r3, [r6, #0]
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	443b      	add	r3, r7
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	2000      	movs	r0, #0
 800920a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920e:	bf00      	nop
 8009210:	0800a173 	.word	0x0800a173

08009214 <_scanf_i>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	4698      	mov	r8, r3
 800921a:	4b74      	ldr	r3, [pc, #464]	@ (80093ec <_scanf_i+0x1d8>)
 800921c:	460c      	mov	r4, r1
 800921e:	4682      	mov	sl, r0
 8009220:	4616      	mov	r6, r2
 8009222:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009226:	b087      	sub	sp, #28
 8009228:	ab03      	add	r3, sp, #12
 800922a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800922e:	4b70      	ldr	r3, [pc, #448]	@ (80093f0 <_scanf_i+0x1dc>)
 8009230:	69a1      	ldr	r1, [r4, #24]
 8009232:	4a70      	ldr	r2, [pc, #448]	@ (80093f4 <_scanf_i+0x1e0>)
 8009234:	2903      	cmp	r1, #3
 8009236:	bf08      	it	eq
 8009238:	461a      	moveq	r2, r3
 800923a:	68a3      	ldr	r3, [r4, #8]
 800923c:	9201      	str	r2, [sp, #4]
 800923e:	1e5a      	subs	r2, r3, #1
 8009240:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009244:	bf88      	it	hi
 8009246:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800924a:	4627      	mov	r7, r4
 800924c:	bf82      	ittt	hi
 800924e:	eb03 0905 	addhi.w	r9, r3, r5
 8009252:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009256:	60a3      	strhi	r3, [r4, #8]
 8009258:	f857 3b1c 	ldr.w	r3, [r7], #28
 800925c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009260:	bf98      	it	ls
 8009262:	f04f 0900 	movls.w	r9, #0
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	463d      	mov	r5, r7
 800926a:	f04f 0b00 	mov.w	fp, #0
 800926e:	6831      	ldr	r1, [r6, #0]
 8009270:	ab03      	add	r3, sp, #12
 8009272:	7809      	ldrb	r1, [r1, #0]
 8009274:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009278:	2202      	movs	r2, #2
 800927a:	f7f6 ffb1 	bl	80001e0 <memchr>
 800927e:	b328      	cbz	r0, 80092cc <_scanf_i+0xb8>
 8009280:	f1bb 0f01 	cmp.w	fp, #1
 8009284:	d159      	bne.n	800933a <_scanf_i+0x126>
 8009286:	6862      	ldr	r2, [r4, #4]
 8009288:	b92a      	cbnz	r2, 8009296 <_scanf_i+0x82>
 800928a:	6822      	ldr	r2, [r4, #0]
 800928c:	2108      	movs	r1, #8
 800928e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009292:	6061      	str	r1, [r4, #4]
 8009294:	6022      	str	r2, [r4, #0]
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800929c:	6022      	str	r2, [r4, #0]
 800929e:	68a2      	ldr	r2, [r4, #8]
 80092a0:	1e51      	subs	r1, r2, #1
 80092a2:	60a1      	str	r1, [r4, #8]
 80092a4:	b192      	cbz	r2, 80092cc <_scanf_i+0xb8>
 80092a6:	6832      	ldr	r2, [r6, #0]
 80092a8:	1c51      	adds	r1, r2, #1
 80092aa:	6031      	str	r1, [r6, #0]
 80092ac:	7812      	ldrb	r2, [r2, #0]
 80092ae:	f805 2b01 	strb.w	r2, [r5], #1
 80092b2:	6872      	ldr	r2, [r6, #4]
 80092b4:	3a01      	subs	r2, #1
 80092b6:	2a00      	cmp	r2, #0
 80092b8:	6072      	str	r2, [r6, #4]
 80092ba:	dc07      	bgt.n	80092cc <_scanf_i+0xb8>
 80092bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80092c0:	4631      	mov	r1, r6
 80092c2:	4650      	mov	r0, sl
 80092c4:	4790      	blx	r2
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f040 8085 	bne.w	80093d6 <_scanf_i+0x1c2>
 80092cc:	f10b 0b01 	add.w	fp, fp, #1
 80092d0:	f1bb 0f03 	cmp.w	fp, #3
 80092d4:	d1cb      	bne.n	800926e <_scanf_i+0x5a>
 80092d6:	6863      	ldr	r3, [r4, #4]
 80092d8:	b90b      	cbnz	r3, 80092de <_scanf_i+0xca>
 80092da:	230a      	movs	r3, #10
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	6863      	ldr	r3, [r4, #4]
 80092e0:	4945      	ldr	r1, [pc, #276]	@ (80093f8 <_scanf_i+0x1e4>)
 80092e2:	6960      	ldr	r0, [r4, #20]
 80092e4:	1ac9      	subs	r1, r1, r3
 80092e6:	f000 f889 	bl	80093fc <__sccl>
 80092ea:	f04f 0b00 	mov.w	fp, #0
 80092ee:	68a3      	ldr	r3, [r4, #8]
 80092f0:	6822      	ldr	r2, [r4, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d03d      	beq.n	8009372 <_scanf_i+0x15e>
 80092f6:	6831      	ldr	r1, [r6, #0]
 80092f8:	6960      	ldr	r0, [r4, #20]
 80092fa:	f891 c000 	ldrb.w	ip, [r1]
 80092fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009302:	2800      	cmp	r0, #0
 8009304:	d035      	beq.n	8009372 <_scanf_i+0x15e>
 8009306:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800930a:	d124      	bne.n	8009356 <_scanf_i+0x142>
 800930c:	0510      	lsls	r0, r2, #20
 800930e:	d522      	bpl.n	8009356 <_scanf_i+0x142>
 8009310:	f10b 0b01 	add.w	fp, fp, #1
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	d003      	beq.n	8009322 <_scanf_i+0x10e>
 800931a:	3301      	adds	r3, #1
 800931c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009320:	60a3      	str	r3, [r4, #8]
 8009322:	6873      	ldr	r3, [r6, #4]
 8009324:	3b01      	subs	r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	6073      	str	r3, [r6, #4]
 800932a:	dd1b      	ble.n	8009364 <_scanf_i+0x150>
 800932c:	6833      	ldr	r3, [r6, #0]
 800932e:	3301      	adds	r3, #1
 8009330:	6033      	str	r3, [r6, #0]
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	3b01      	subs	r3, #1
 8009336:	60a3      	str	r3, [r4, #8]
 8009338:	e7d9      	b.n	80092ee <_scanf_i+0xda>
 800933a:	f1bb 0f02 	cmp.w	fp, #2
 800933e:	d1ae      	bne.n	800929e <_scanf_i+0x8a>
 8009340:	6822      	ldr	r2, [r4, #0]
 8009342:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009346:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800934a:	d1bf      	bne.n	80092cc <_scanf_i+0xb8>
 800934c:	2110      	movs	r1, #16
 800934e:	6061      	str	r1, [r4, #4]
 8009350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009354:	e7a2      	b.n	800929c <_scanf_i+0x88>
 8009356:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800935a:	6022      	str	r2, [r4, #0]
 800935c:	780b      	ldrb	r3, [r1, #0]
 800935e:	f805 3b01 	strb.w	r3, [r5], #1
 8009362:	e7de      	b.n	8009322 <_scanf_i+0x10e>
 8009364:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009368:	4631      	mov	r1, r6
 800936a:	4650      	mov	r0, sl
 800936c:	4798      	blx	r3
 800936e:	2800      	cmp	r0, #0
 8009370:	d0df      	beq.n	8009332 <_scanf_i+0x11e>
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	05d9      	lsls	r1, r3, #23
 8009376:	d50d      	bpl.n	8009394 <_scanf_i+0x180>
 8009378:	42bd      	cmp	r5, r7
 800937a:	d909      	bls.n	8009390 <_scanf_i+0x17c>
 800937c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009380:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009384:	4632      	mov	r2, r6
 8009386:	4650      	mov	r0, sl
 8009388:	4798      	blx	r3
 800938a:	f105 39ff 	add.w	r9, r5, #4294967295
 800938e:	464d      	mov	r5, r9
 8009390:	42bd      	cmp	r5, r7
 8009392:	d028      	beq.n	80093e6 <_scanf_i+0x1d2>
 8009394:	6822      	ldr	r2, [r4, #0]
 8009396:	f012 0210 	ands.w	r2, r2, #16
 800939a:	d113      	bne.n	80093c4 <_scanf_i+0x1b0>
 800939c:	702a      	strb	r2, [r5, #0]
 800939e:	6863      	ldr	r3, [r4, #4]
 80093a0:	9e01      	ldr	r6, [sp, #4]
 80093a2:	4639      	mov	r1, r7
 80093a4:	4650      	mov	r0, sl
 80093a6:	47b0      	blx	r6
 80093a8:	f8d8 3000 	ldr.w	r3, [r8]
 80093ac:	6821      	ldr	r1, [r4, #0]
 80093ae:	1d1a      	adds	r2, r3, #4
 80093b0:	f8c8 2000 	str.w	r2, [r8]
 80093b4:	f011 0f20 	tst.w	r1, #32
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	d00f      	beq.n	80093dc <_scanf_i+0x1c8>
 80093bc:	6018      	str	r0, [r3, #0]
 80093be:	68e3      	ldr	r3, [r4, #12]
 80093c0:	3301      	adds	r3, #1
 80093c2:	60e3      	str	r3, [r4, #12]
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	1bed      	subs	r5, r5, r7
 80093c8:	445d      	add	r5, fp
 80093ca:	442b      	add	r3, r5
 80093cc:	6123      	str	r3, [r4, #16]
 80093ce:	2000      	movs	r0, #0
 80093d0:	b007      	add	sp, #28
 80093d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d6:	f04f 0b00 	mov.w	fp, #0
 80093da:	e7ca      	b.n	8009372 <_scanf_i+0x15e>
 80093dc:	07ca      	lsls	r2, r1, #31
 80093de:	bf4c      	ite	mi
 80093e0:	8018      	strhmi	r0, [r3, #0]
 80093e2:	6018      	strpl	r0, [r3, #0]
 80093e4:	e7eb      	b.n	80093be <_scanf_i+0x1aa>
 80093e6:	2001      	movs	r0, #1
 80093e8:	e7f2      	b.n	80093d0 <_scanf_i+0x1bc>
 80093ea:	bf00      	nop
 80093ec:	08009ae4 	.word	0x08009ae4
 80093f0:	08009635 	.word	0x08009635
 80093f4:	08009715 	.word	0x08009715
 80093f8:	0800a167 	.word	0x0800a167

080093fc <__sccl>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	780b      	ldrb	r3, [r1, #0]
 8009400:	4604      	mov	r4, r0
 8009402:	2b5e      	cmp	r3, #94	@ 0x5e
 8009404:	bf0b      	itete	eq
 8009406:	784b      	ldrbeq	r3, [r1, #1]
 8009408:	1c4a      	addne	r2, r1, #1
 800940a:	1c8a      	addeq	r2, r1, #2
 800940c:	2100      	movne	r1, #0
 800940e:	bf08      	it	eq
 8009410:	2101      	moveq	r1, #1
 8009412:	3801      	subs	r0, #1
 8009414:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009418:	f800 1f01 	strb.w	r1, [r0, #1]!
 800941c:	42a8      	cmp	r0, r5
 800941e:	d1fb      	bne.n	8009418 <__sccl+0x1c>
 8009420:	b90b      	cbnz	r3, 8009426 <__sccl+0x2a>
 8009422:	1e50      	subs	r0, r2, #1
 8009424:	bd70      	pop	{r4, r5, r6, pc}
 8009426:	f081 0101 	eor.w	r1, r1, #1
 800942a:	54e1      	strb	r1, [r4, r3]
 800942c:	4610      	mov	r0, r2
 800942e:	4602      	mov	r2, r0
 8009430:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009434:	2d2d      	cmp	r5, #45	@ 0x2d
 8009436:	d005      	beq.n	8009444 <__sccl+0x48>
 8009438:	2d5d      	cmp	r5, #93	@ 0x5d
 800943a:	d016      	beq.n	800946a <__sccl+0x6e>
 800943c:	2d00      	cmp	r5, #0
 800943e:	d0f1      	beq.n	8009424 <__sccl+0x28>
 8009440:	462b      	mov	r3, r5
 8009442:	e7f2      	b.n	800942a <__sccl+0x2e>
 8009444:	7846      	ldrb	r6, [r0, #1]
 8009446:	2e5d      	cmp	r6, #93	@ 0x5d
 8009448:	d0fa      	beq.n	8009440 <__sccl+0x44>
 800944a:	42b3      	cmp	r3, r6
 800944c:	dcf8      	bgt.n	8009440 <__sccl+0x44>
 800944e:	3002      	adds	r0, #2
 8009450:	461a      	mov	r2, r3
 8009452:	3201      	adds	r2, #1
 8009454:	4296      	cmp	r6, r2
 8009456:	54a1      	strb	r1, [r4, r2]
 8009458:	dcfb      	bgt.n	8009452 <__sccl+0x56>
 800945a:	1af2      	subs	r2, r6, r3
 800945c:	3a01      	subs	r2, #1
 800945e:	1c5d      	adds	r5, r3, #1
 8009460:	42b3      	cmp	r3, r6
 8009462:	bfa8      	it	ge
 8009464:	2200      	movge	r2, #0
 8009466:	18ab      	adds	r3, r5, r2
 8009468:	e7e1      	b.n	800942e <__sccl+0x32>
 800946a:	4610      	mov	r0, r2
 800946c:	e7da      	b.n	8009424 <__sccl+0x28>

0800946e <__submore>:
 800946e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009472:	460c      	mov	r4, r1
 8009474:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009476:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800947a:	4299      	cmp	r1, r3
 800947c:	d11d      	bne.n	80094ba <__submore+0x4c>
 800947e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009482:	f7fe ff8b 	bl	800839c <_malloc_r>
 8009486:	b918      	cbnz	r0, 8009490 <__submore+0x22>
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009494:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009496:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800949a:	6360      	str	r0, [r4, #52]	@ 0x34
 800949c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80094a0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80094a4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80094a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80094ac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80094b0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80094b4:	6020      	str	r0, [r4, #0]
 80094b6:	2000      	movs	r0, #0
 80094b8:	e7e8      	b.n	800948c <__submore+0x1e>
 80094ba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80094bc:	0077      	lsls	r7, r6, #1
 80094be:	463a      	mov	r2, r7
 80094c0:	f000 f80f 	bl	80094e2 <_realloc_r>
 80094c4:	4605      	mov	r5, r0
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d0de      	beq.n	8009488 <__submore+0x1a>
 80094ca:	eb00 0806 	add.w	r8, r0, r6
 80094ce:	4601      	mov	r1, r0
 80094d0:	4632      	mov	r2, r6
 80094d2:	4640      	mov	r0, r8
 80094d4:	f7ff f93a 	bl	800874c <memcpy>
 80094d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80094dc:	f8c4 8000 	str.w	r8, [r4]
 80094e0:	e7e9      	b.n	80094b6 <__submore+0x48>

080094e2 <_realloc_r>:
 80094e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	4680      	mov	r8, r0
 80094e8:	4615      	mov	r5, r2
 80094ea:	460c      	mov	r4, r1
 80094ec:	b921      	cbnz	r1, 80094f8 <_realloc_r+0x16>
 80094ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f2:	4611      	mov	r1, r2
 80094f4:	f7fe bf52 	b.w	800839c <_malloc_r>
 80094f8:	b92a      	cbnz	r2, 8009506 <_realloc_r+0x24>
 80094fa:	f7ff f935 	bl	8008768 <_free_r>
 80094fe:	2400      	movs	r4, #0
 8009500:	4620      	mov	r0, r4
 8009502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009506:	f000 f907 	bl	8009718 <_malloc_usable_size_r>
 800950a:	4285      	cmp	r5, r0
 800950c:	4606      	mov	r6, r0
 800950e:	d802      	bhi.n	8009516 <_realloc_r+0x34>
 8009510:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009514:	d8f4      	bhi.n	8009500 <_realloc_r+0x1e>
 8009516:	4629      	mov	r1, r5
 8009518:	4640      	mov	r0, r8
 800951a:	f7fe ff3f 	bl	800839c <_malloc_r>
 800951e:	4607      	mov	r7, r0
 8009520:	2800      	cmp	r0, #0
 8009522:	d0ec      	beq.n	80094fe <_realloc_r+0x1c>
 8009524:	42b5      	cmp	r5, r6
 8009526:	462a      	mov	r2, r5
 8009528:	4621      	mov	r1, r4
 800952a:	bf28      	it	cs
 800952c:	4632      	movcs	r2, r6
 800952e:	f7ff f90d 	bl	800874c <memcpy>
 8009532:	4621      	mov	r1, r4
 8009534:	4640      	mov	r0, r8
 8009536:	f7ff f917 	bl	8008768 <_free_r>
 800953a:	463c      	mov	r4, r7
 800953c:	e7e0      	b.n	8009500 <_realloc_r+0x1e>
	...

08009540 <_strtol_l.constprop.0>:
 8009540:	2b24      	cmp	r3, #36	@ 0x24
 8009542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009546:	4686      	mov	lr, r0
 8009548:	4690      	mov	r8, r2
 800954a:	d801      	bhi.n	8009550 <_strtol_l.constprop.0+0x10>
 800954c:	2b01      	cmp	r3, #1
 800954e:	d106      	bne.n	800955e <_strtol_l.constprop.0+0x1e>
 8009550:	f7ff f8d0 	bl	80086f4 <__errno>
 8009554:	2316      	movs	r3, #22
 8009556:	6003      	str	r3, [r0, #0]
 8009558:	2000      	movs	r0, #0
 800955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955e:	4834      	ldr	r0, [pc, #208]	@ (8009630 <_strtol_l.constprop.0+0xf0>)
 8009560:	460d      	mov	r5, r1
 8009562:	462a      	mov	r2, r5
 8009564:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009568:	5d06      	ldrb	r6, [r0, r4]
 800956a:	f016 0608 	ands.w	r6, r6, #8
 800956e:	d1f8      	bne.n	8009562 <_strtol_l.constprop.0+0x22>
 8009570:	2c2d      	cmp	r4, #45	@ 0x2d
 8009572:	d12d      	bne.n	80095d0 <_strtol_l.constprop.0+0x90>
 8009574:	782c      	ldrb	r4, [r5, #0]
 8009576:	2601      	movs	r6, #1
 8009578:	1c95      	adds	r5, r2, #2
 800957a:	f033 0210 	bics.w	r2, r3, #16
 800957e:	d109      	bne.n	8009594 <_strtol_l.constprop.0+0x54>
 8009580:	2c30      	cmp	r4, #48	@ 0x30
 8009582:	d12a      	bne.n	80095da <_strtol_l.constprop.0+0x9a>
 8009584:	782a      	ldrb	r2, [r5, #0]
 8009586:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800958a:	2a58      	cmp	r2, #88	@ 0x58
 800958c:	d125      	bne.n	80095da <_strtol_l.constprop.0+0x9a>
 800958e:	786c      	ldrb	r4, [r5, #1]
 8009590:	2310      	movs	r3, #16
 8009592:	3502      	adds	r5, #2
 8009594:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009598:	f10c 3cff 	add.w	ip, ip, #4294967295
 800959c:	2200      	movs	r2, #0
 800959e:	fbbc f9f3 	udiv	r9, ip, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	fb03 ca19 	mls	sl, r3, r9, ip
 80095a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80095ac:	2f09      	cmp	r7, #9
 80095ae:	d81b      	bhi.n	80095e8 <_strtol_l.constprop.0+0xa8>
 80095b0:	463c      	mov	r4, r7
 80095b2:	42a3      	cmp	r3, r4
 80095b4:	dd27      	ble.n	8009606 <_strtol_l.constprop.0+0xc6>
 80095b6:	1c57      	adds	r7, r2, #1
 80095b8:	d007      	beq.n	80095ca <_strtol_l.constprop.0+0x8a>
 80095ba:	4581      	cmp	r9, r0
 80095bc:	d320      	bcc.n	8009600 <_strtol_l.constprop.0+0xc0>
 80095be:	d101      	bne.n	80095c4 <_strtol_l.constprop.0+0x84>
 80095c0:	45a2      	cmp	sl, r4
 80095c2:	db1d      	blt.n	8009600 <_strtol_l.constprop.0+0xc0>
 80095c4:	fb00 4003 	mla	r0, r0, r3, r4
 80095c8:	2201      	movs	r2, #1
 80095ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ce:	e7eb      	b.n	80095a8 <_strtol_l.constprop.0+0x68>
 80095d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80095d2:	bf04      	itt	eq
 80095d4:	782c      	ldrbeq	r4, [r5, #0]
 80095d6:	1c95      	addeq	r5, r2, #2
 80095d8:	e7cf      	b.n	800957a <_strtol_l.constprop.0+0x3a>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1da      	bne.n	8009594 <_strtol_l.constprop.0+0x54>
 80095de:	2c30      	cmp	r4, #48	@ 0x30
 80095e0:	bf0c      	ite	eq
 80095e2:	2308      	moveq	r3, #8
 80095e4:	230a      	movne	r3, #10
 80095e6:	e7d5      	b.n	8009594 <_strtol_l.constprop.0+0x54>
 80095e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80095ec:	2f19      	cmp	r7, #25
 80095ee:	d801      	bhi.n	80095f4 <_strtol_l.constprop.0+0xb4>
 80095f0:	3c37      	subs	r4, #55	@ 0x37
 80095f2:	e7de      	b.n	80095b2 <_strtol_l.constprop.0+0x72>
 80095f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80095f8:	2f19      	cmp	r7, #25
 80095fa:	d804      	bhi.n	8009606 <_strtol_l.constprop.0+0xc6>
 80095fc:	3c57      	subs	r4, #87	@ 0x57
 80095fe:	e7d8      	b.n	80095b2 <_strtol_l.constprop.0+0x72>
 8009600:	f04f 32ff 	mov.w	r2, #4294967295
 8009604:	e7e1      	b.n	80095ca <_strtol_l.constprop.0+0x8a>
 8009606:	1c53      	adds	r3, r2, #1
 8009608:	d108      	bne.n	800961c <_strtol_l.constprop.0+0xdc>
 800960a:	2322      	movs	r3, #34	@ 0x22
 800960c:	f8ce 3000 	str.w	r3, [lr]
 8009610:	4660      	mov	r0, ip
 8009612:	f1b8 0f00 	cmp.w	r8, #0
 8009616:	d0a0      	beq.n	800955a <_strtol_l.constprop.0+0x1a>
 8009618:	1e69      	subs	r1, r5, #1
 800961a:	e006      	b.n	800962a <_strtol_l.constprop.0+0xea>
 800961c:	b106      	cbz	r6, 8009620 <_strtol_l.constprop.0+0xe0>
 800961e:	4240      	negs	r0, r0
 8009620:	f1b8 0f00 	cmp.w	r8, #0
 8009624:	d099      	beq.n	800955a <_strtol_l.constprop.0+0x1a>
 8009626:	2a00      	cmp	r2, #0
 8009628:	d1f6      	bne.n	8009618 <_strtol_l.constprop.0+0xd8>
 800962a:	f8c8 1000 	str.w	r1, [r8]
 800962e:	e794      	b.n	800955a <_strtol_l.constprop.0+0x1a>
 8009630:	0800a173 	.word	0x0800a173

08009634 <_strtol_r>:
 8009634:	f7ff bf84 	b.w	8009540 <_strtol_l.constprop.0>

08009638 <_strtoul_l.constprop.0>:
 8009638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800963c:	4e34      	ldr	r6, [pc, #208]	@ (8009710 <_strtoul_l.constprop.0+0xd8>)
 800963e:	4686      	mov	lr, r0
 8009640:	460d      	mov	r5, r1
 8009642:	4628      	mov	r0, r5
 8009644:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009648:	5d37      	ldrb	r7, [r6, r4]
 800964a:	f017 0708 	ands.w	r7, r7, #8
 800964e:	d1f8      	bne.n	8009642 <_strtoul_l.constprop.0+0xa>
 8009650:	2c2d      	cmp	r4, #45	@ 0x2d
 8009652:	d12f      	bne.n	80096b4 <_strtoul_l.constprop.0+0x7c>
 8009654:	782c      	ldrb	r4, [r5, #0]
 8009656:	2701      	movs	r7, #1
 8009658:	1c85      	adds	r5, r0, #2
 800965a:	f033 0010 	bics.w	r0, r3, #16
 800965e:	d109      	bne.n	8009674 <_strtoul_l.constprop.0+0x3c>
 8009660:	2c30      	cmp	r4, #48	@ 0x30
 8009662:	d12c      	bne.n	80096be <_strtoul_l.constprop.0+0x86>
 8009664:	7828      	ldrb	r0, [r5, #0]
 8009666:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800966a:	2858      	cmp	r0, #88	@ 0x58
 800966c:	d127      	bne.n	80096be <_strtoul_l.constprop.0+0x86>
 800966e:	786c      	ldrb	r4, [r5, #1]
 8009670:	2310      	movs	r3, #16
 8009672:	3502      	adds	r5, #2
 8009674:	f04f 38ff 	mov.w	r8, #4294967295
 8009678:	2600      	movs	r6, #0
 800967a:	fbb8 f8f3 	udiv	r8, r8, r3
 800967e:	fb03 f908 	mul.w	r9, r3, r8
 8009682:	ea6f 0909 	mvn.w	r9, r9
 8009686:	4630      	mov	r0, r6
 8009688:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800968c:	f1bc 0f09 	cmp.w	ip, #9
 8009690:	d81c      	bhi.n	80096cc <_strtoul_l.constprop.0+0x94>
 8009692:	4664      	mov	r4, ip
 8009694:	42a3      	cmp	r3, r4
 8009696:	dd2a      	ble.n	80096ee <_strtoul_l.constprop.0+0xb6>
 8009698:	f1b6 3fff 	cmp.w	r6, #4294967295
 800969c:	d007      	beq.n	80096ae <_strtoul_l.constprop.0+0x76>
 800969e:	4580      	cmp	r8, r0
 80096a0:	d322      	bcc.n	80096e8 <_strtoul_l.constprop.0+0xb0>
 80096a2:	d101      	bne.n	80096a8 <_strtoul_l.constprop.0+0x70>
 80096a4:	45a1      	cmp	r9, r4
 80096a6:	db1f      	blt.n	80096e8 <_strtoul_l.constprop.0+0xb0>
 80096a8:	fb00 4003 	mla	r0, r0, r3, r4
 80096ac:	2601      	movs	r6, #1
 80096ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096b2:	e7e9      	b.n	8009688 <_strtoul_l.constprop.0+0x50>
 80096b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80096b6:	bf04      	itt	eq
 80096b8:	782c      	ldrbeq	r4, [r5, #0]
 80096ba:	1c85      	addeq	r5, r0, #2
 80096bc:	e7cd      	b.n	800965a <_strtoul_l.constprop.0+0x22>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1d8      	bne.n	8009674 <_strtoul_l.constprop.0+0x3c>
 80096c2:	2c30      	cmp	r4, #48	@ 0x30
 80096c4:	bf0c      	ite	eq
 80096c6:	2308      	moveq	r3, #8
 80096c8:	230a      	movne	r3, #10
 80096ca:	e7d3      	b.n	8009674 <_strtoul_l.constprop.0+0x3c>
 80096cc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80096d0:	f1bc 0f19 	cmp.w	ip, #25
 80096d4:	d801      	bhi.n	80096da <_strtoul_l.constprop.0+0xa2>
 80096d6:	3c37      	subs	r4, #55	@ 0x37
 80096d8:	e7dc      	b.n	8009694 <_strtoul_l.constprop.0+0x5c>
 80096da:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80096de:	f1bc 0f19 	cmp.w	ip, #25
 80096e2:	d804      	bhi.n	80096ee <_strtoul_l.constprop.0+0xb6>
 80096e4:	3c57      	subs	r4, #87	@ 0x57
 80096e6:	e7d5      	b.n	8009694 <_strtoul_l.constprop.0+0x5c>
 80096e8:	f04f 36ff 	mov.w	r6, #4294967295
 80096ec:	e7df      	b.n	80096ae <_strtoul_l.constprop.0+0x76>
 80096ee:	1c73      	adds	r3, r6, #1
 80096f0:	d106      	bne.n	8009700 <_strtoul_l.constprop.0+0xc8>
 80096f2:	2322      	movs	r3, #34	@ 0x22
 80096f4:	f8ce 3000 	str.w	r3, [lr]
 80096f8:	4630      	mov	r0, r6
 80096fa:	b932      	cbnz	r2, 800970a <_strtoul_l.constprop.0+0xd2>
 80096fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009700:	b107      	cbz	r7, 8009704 <_strtoul_l.constprop.0+0xcc>
 8009702:	4240      	negs	r0, r0
 8009704:	2a00      	cmp	r2, #0
 8009706:	d0f9      	beq.n	80096fc <_strtoul_l.constprop.0+0xc4>
 8009708:	b106      	cbz	r6, 800970c <_strtoul_l.constprop.0+0xd4>
 800970a:	1e69      	subs	r1, r5, #1
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	e7f5      	b.n	80096fc <_strtoul_l.constprop.0+0xc4>
 8009710:	0800a173 	.word	0x0800a173

08009714 <_strtoul_r>:
 8009714:	f7ff bf90 	b.w	8009638 <_strtoul_l.constprop.0>

08009718 <_malloc_usable_size_r>:
 8009718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800971c:	1f18      	subs	r0, r3, #4
 800971e:	2b00      	cmp	r3, #0
 8009720:	bfbc      	itt	lt
 8009722:	580b      	ldrlt	r3, [r1, r0]
 8009724:	18c0      	addlt	r0, r0, r3
 8009726:	4770      	bx	lr

08009728 <_init>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	bf00      	nop
 800972c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972e:	bc08      	pop	{r3}
 8009730:	469e      	mov	lr, r3
 8009732:	4770      	bx	lr

08009734 <_fini>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	bf00      	nop
 8009738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973a:	bc08      	pop	{r3}
 800973c:	469e      	mov	lr, r3
 800973e:	4770      	bx	lr
